{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./axis/index.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/./tooltip/BasicTooltip.js","webpack://vc/./data-parser/BasicBSParser.js","webpack://vc/./series/Bar.js","webpack://vc/./series/BarSeries.js","webpack://vc/./charts/BarSeriesChart.js"],"names":["Chart","container","opts","isString","isObject","length","dataParser","$container","$","Error","containerName","takeContainerWidth","chart","width","takeContainerHeight","height","maxWidth","minWidth","options","chartHeight","chartWidth","margin","chartType","left","right","top","bottom","chartFullSpace","chartComponentsArr","svg","select","get","size","append","node","empty","attr","className","uniqueId","graphZone","console","log","this","forEach","chartCmpt","ChartComponent","draw","update","showFlag","showHide","remove","chartResize","throttedResize","throttle","Math","floor","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","off","Axis","position","orient","label","unit","rangeScale","domainScale","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","constants","TICK_PADDING","scalePadding","SCALE_PADDING","visible","axis","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","DIR_BOTTOM","axisBottom","DIR_TOP","axisTop","tickSizeInner","tickValues","DIR_LEFT","axisLeft","DIR_RIGHT","axisRight","isFunction","externalFormatter","val","self","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","text","classed","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","BRUSHY_BUFFER","padding","clamp","range","domain","isNumber","tickVal","newTick","dayLength","minuteLength","ticks","call","limitText","tickFmt","emptyFn","selectAll","style","d","i","truncateText","addDefaultChartOptions","isTouchScreen","tooltip","format","legend","legendPrefix","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","xAxis","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","Series","plotSeries","plotFn","redraw","BasicTooltip","$toolTipDiv","addClass","x","y","displayData","excludeToolTipDiv","rootPos","offset","xpos","round","ypos","css","display","html","data","show","hide","BasicBSParser","dataOptions","series","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","seriesData","barseries","columns","values","chartData","map","valData","eachPlotSet","plotInfo","getObject","yAxis2","yRange","yRange2","max","findEachPlotRange","minVal","maxVal","each","eachPlot","Infinity","allMax","allMax2","plotData","barOrderMembers","member","allMin","allMin2","yMin","yMax","reduce","a","b","ind","dataColorArr","yLeft","yRight","refineName","refineString","memberArr","valueRange","isBoolean","ChartAxisParser","Bar","barData","xAxisTarget","barType","GROUPED_BAR","events","barOrderIndex","filter","ele","seriesLength","indexOf","xScale","yScale","srData","seriesArr","xAxisArr","indexVal","push","barStack","stack","keys","transpose","yMaxGrouped","yMaxStacked","nameIndexMap","barVisibleOrder","plot","pt","clipElement","find","barSeries","enter","bars","srName","parentNode","colorArr","bandwidth","hover","d3Event","pageX","pageY","fn","apply","arguments","STACKED_BAR","BarSeries","bar","BarSeriesChart","startTime","Date","dataExecutor","chartInitilize","axisOptions","tooltipOpts","Tooltip","reScaleYAxis","chartResponsive","mouseHandler","triggerMouseAction","timeDiff","getTime","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","modifyAxisProps","reScaleAxis","requiredWidth","class","maxText","dummyG","ticksArr","tickHtml","String","getComputedTextLength","Y_AXIS_SPACE"],"mappings":"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","file":"barseries.min.js","sourcesContent":["export {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {\n  select,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone\n} from 'd3-shape'\n\nexport default {\n  version: 'v5'\n}\n","import {isObject, isString, throttle} from '@/utils'\nimport uniqueId from 'lodash/uniqueId'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.$container = $(container)\n      if (!this.$container.length) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = this.$container.width()\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = this.$container.height()\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = select(this.$container.get(0)).select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = select(this.$container.get(0)).select('.vc-div-svg').append('svg')\n      }\n\n      // Clear svg if it has needless content\n      $(this.svg.node()).empty()\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', uniqueId('chart_clip'))\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('ac.chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'ac_' + this.options.chart.id\n      $(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    let resizedGraphWidth = this.$container.width()\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, this.$container.height())\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'ac_' + this.options.chart.id\n      $(window).off('resize.' + chartId)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.$container.remove()\n\n    return null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import constants from '@/constants'\nimport {getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\n\n","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.$toolTipDiv = $('<div></div>').addClass('vc-tooltip-display ' + this.opts.className)\n    this.opts.chart.$container\n      .append(this.$toolTipDiv)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    // This will be called by series -- bar / pie\n    var rootPos = this.opts.chart.$container.offset()\n    var xpos = Math.round(x - rootPos.left)\n    var ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (this.$toolTipDiv.width() / 2))\n      ypos = Math.round(ypos - (this.$toolTipDiv.height() / 2))\n    }\n\n    this.$toolTipDiv\n      .css({\n        left: xpos + 'px',\n        top: ypos + 'px',\n        display: 'inline-block'\n      })\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n\n    if (showFlag) {\n      this.$toolTipDiv && this.$toolTipDiv.show()\n    } else {\n      this.$toolTipDiv && this.$toolTipDiv.hide()\n    }\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n","import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getObject, refineString, isBoolean} from '@/utils'\nimport {map, each} from 'lodash'\n\nexport default class BasicBSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while barseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on barseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    if (!validJSONType) {\n      throw new Error('Invalid Bar series JSON received')\n    }\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: map(seriesData, 0)\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if (!yRange || !yRange2) {\n      let findEachPlotRange = false\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if (findEachPlotRange) {\n\n        // Reset range for each plot for finding min , max\n        each(eachPlotSet, function (eachPlot) {\n          eachPlot.minVal = Infinity\n          eachPlot.maxVal = -Infinity\n        })\n\n\n        // Calculate Max and Min for each plots series\n        var valData = 0\n        data.forEach(function (d) {\n          each(eachPlotSet, function (eachPlot) {\n            valData = d[eachPlot.dataIndex]\n            if (valData < eachPlot.minVal) {\n              eachPlot.minVal = valData\n            }\n            if (valData > eachPlot.maxVal) {\n              eachPlot.maxVal = valData\n            }\n          })\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'bar') {\n          plotInfo[key].forEach(function (plotData) {\n            var memberArr = plotData.barOrderMembers\n            memberArr.forEach(function (member) {\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'left' && eachPlotSet[member.name].maxVal > allMax) {\n                allMax = eachPlotSet[member.name].maxVal\n              }\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'right' && eachPlotSet[member.name].maxVal > allMax2) {\n                allMax2 = eachPlotSet[member.name].maxVal\n              }\n            })\n          })\n        }\n      }\n\n      // // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {each, map} from 'lodash'\nimport {stack, range, transpose, max, select, d3Event} from '@/d3Importer'\n\nexport default class Bar extends ChartComponent {\n  constructor (opts) {\n    super()\n\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      barData: null,\n      xAxisTarget: null,\n      barType: constants.GROUPED_BAR,\n      barOrderMembers: {},\n      visible: true,\n      events: {}\n    }, opts)\n\n    const self = this\n\n    const eachPlotSet = this.opts.chart.options.plotSet\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    this.opts.seriesLength = this.opts.barOrderIndex.length\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.xScale = x\n    this.yScale = y\n\n    const srData = this.opts.barData\n    this.opts.seriesArr = []\n    this.opts.xAxisArr = map(srData, this.opts.xAxisTarget)\n    each(this.opts.barOrderIndex, function (indexVal) {\n      self.opts.seriesArr.push(map(srData, indexVal))\n    })\n\n    this.opts.barStack = stack().keys(range(this.opts.seriesLength))(transpose(this.opts.seriesArr))\n\n    this.yMaxGrouped = max(this.opts.seriesArr, function (y) {\n      return max(y)\n    })\n    this.yMaxStacked = max(this.opts.barStack, function (y) {\n      return max(y, function (d) {\n        return d[1]\n      })\n    })\n  }\n\n  draw () {\n    const self = this\n    const nameIndexMap = {}\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const barVisibleOrder = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n    each(barVisibleOrder, function (plot, name) {\n      const pt = eachPlotSet[plot.name]\n      nameIndexMap[pt.dataIndex - 1] = plot.name\n    })\n\n\n    const clipElement = this.opts.chart.$container.find('svg clipPath')\n    this.barSeries = this.opts.chart.graphZone.selectAll('.vc-bar-series')\n      .data(this.opts.barStack)\n      .enter()\n      .append('g')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-bar-series')\n      .attr('fill', function (d, i) {\n        return eachPlotSet[nameIndexMap[i]].color\n      })\n      .attr('seriesName', function (d, i) {\n        return nameIndexMap[i]\n      })\n      .attr('seriesIndex', function (d, i) {\n        return i\n      })\n\n\n    this.bars = this.barSeries.selectAll('rect')\n      .data(function (d) {\n        return d\n      })\n      .enter().append('rect')\n      .attr('x', function (d, i) {\n        return self.xScale(self.opts.xAxisArr[i])\n      })\n      .attr('fill', function (d, i) {\n        const srName = select(this.parentNode).attr('seriesName')\n        return eachPlotSet[srName].colorArr && eachPlotSet[srName].colorArr[i]\n      })\n      .attr('y', this.opts.chart.chartHeight)\n      .attr('width', this.xScale.bandwidth())\n      .attr('height', 0)\n      .on('mousemove', function (d, i) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(d3Event.pageX, d3Event.pageY - 50, {\n          data: {\n            val: self.opts.barData[i],\n            ind: i\n          }\n        })\n      })\n      .on('mouseout', function (d) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n      })\n\n\n    each(this.opts.events, function (fn, name) {\n      self.bars.on(name, function () {\n        fn.apply(self.opts.chart, arguments)\n      })\n    })\n\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    if (this.opts.barType === constants.STACKED_BAR) {\n      this.bars\n        .attr('y', function (d) {\n          return self.yScale(d[1])\n        })\n        .attr('height', function (d) {\n          return self.yScale(d[0]) - self.yScale(d[1])\n        })\n        .attr('x', function (d, i) {\n          return self.xScale(self.opts.xAxisArr[i])\n        })\n        .attr('width', self.xScale.bandwidth())\n    } else {\n      this.bars\n        .attr('x', function (d, i) {\n          const xVal = self.xScale(self.opts.xAxisArr[i]) + self.xScale.bandwidth() / self.opts.seriesLength * select(this.parentNode).attr('seriesIndex')\n          return xVal\n        })\n        .attr('width', self.xScale.bandwidth() / self.opts.seriesLength)\n        .attr('y', function (d) {\n          return self.yScale(d[1] - d[0])\n        })\n        .attr('height', function (d) {\n          return self.yScale(0) - self.yScale(d[1] - d[0])\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.barSeries.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify barOrder arr based on visibleSeries\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all bar series\n    this.barSeries && this.barSeries.remove()\n    // draw with new barOrderMembers\n    this.draw()\n  }\n\n  remove () {\n    this.barSeries && this.barSeries.remove()\n    this.bars = null\n    this.opts = null\n  }\n\n}","import {isArray} from '@/utils'\nimport Bar from '@/series/Bar'\nimport Series from '@/series/Series'\n\nexport default class BarSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.bar) && plotInfo.bar.forEach((plotData) => {\n      this.plotSeries.push(new Bar({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        barOrderMembers: plotData.barOrderMembers,\n        barData: data\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultBSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicBSParser from '@/data-parser/BasicBSParser'\nimport BarSeries from '@/series/BarSeries'\n\nexport default class BarSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicBSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultBSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new BarSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n  }\n\n  draw () {\n    console.log('BarSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.$container.find('svg ' + reScaleAxis[axis].class).find('text')\n      ticksArr.each(function (i) {\n        const tickHtml = $(ticksArr[i])\n          .text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n          $(this).remove() // remove it just after displaying\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n"],"sourceRoot":""}