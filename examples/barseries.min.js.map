{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/./axis/index.js","webpack://vc/./tooltip/BasicTooltip.js","webpack://vc/./data-parser/BasicBSParser.js","webpack://vc/./series/Bar.js","webpack://vc/./series/BarSeries.js","webpack://vc/./charts/BarSeriesChart.js"],"names":["Chart","container","opts","isString","isObject","length","dataParser","select","size","Error","containerName","containerBox","elementOffset","takeContainerWidth","chart","width","takeContainerHeight","height","maxWidth","minWidth","options","chartHeight","chartWidth","margin","chartType","left","right","top","bottom","chartFullSpace","chartComponentsArr","svg","append","html","attr","className","counter","graphZone","console","log","this","forEach","chartCmpt","ChartComponent","draw","update","showFlag","showHide","remove","chartResize","throttedResize","throttle","Math","floor","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","isTouchScreen","chartCounter","tooltip","visible","format","legend","legendPrefix","position","constants","DIR_TOP","isFunction","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","val","unit","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","xAxis","UNITS_TIME","tickFormatter","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","d","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","series","pie","percentage","total","DIR_RIGHT","Series","plotSeries","plotFn","redraw","Axis","orient","label","rangeScale","domainScale","scaleType","axisClamp","tickNumber","rotateText","textLimit","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","axis","scale","scaleBand","scaleLinear","scaleTime","DIR_BOTTOM","axisBottom","axisTop","tickSizeInner","tickValues","DIR_LEFT","axisLeft","axisRight","externalFormatter","self","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","text","classed","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","BRUSHY_BUFFER","padding","clamp","range","domain","isNumber","tickVal","newTick","dayLength","minuteLength","ticks","call","limitText","tickFmt","emptyFn","selectAll","style","i","truncateText","BasicTooltip","toolTipDiv","x","y","displayData","excludeToolTipDiv","box","rootPos","xpos","round","ypos","data","$toolTipDiv","BasicBSParser","dataOptions","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","seriesData","barseries","columns","values","chartData","map","dt","eachPlotSet","plotInfo","getObject","yAxis2","yRange","yRange2","max","findEachPlotRange","minVal","maxVal","plot","eachPlot","Infinity","valData","allMax","allMax2","plotData","barOrderMembers","member","allMin","allMin2","yMin","yMax","reduce","a","b","ind","dataColorArr","yLeft","yRight","refineName","refineString","memberArr","valueRange","isBoolean","ChartAxisParser","Bar","barData","xAxisTarget","barType","GROUPED_BAR","events","barOrderIndex","filter","ele","seriesLength","indexOf","xScale","yScale","srData","seriesArr","xAxisArr","sData","push","indexVal","brInd","barStack","stack","keys","transpose","yMaxGrouped","yMaxStacked","nameIndexMap","pt","clipElement","barSeries","enter","bars","srName","parentNode","colorArr","bandwidth","hover","d3Event","pageX","pageY","hide","fn","apply","arguments","STACKED_BAR","BarSeries","bar","BarSeriesChart","startTime","Date","dataExecutor","chartInitilize","axisOptions","tooltipOpts","Tooltip","reScaleYAxis","chartResponsive","mouseHandler","triggerMouseAction","timeDiff","getTime","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","modifyAxisProps","reScaleAxis","requiredWidth","class","maxText","dummyG","each","tickHtml","String","getComputedTextLength","Y_AXIS_SPACE"],"mappings":"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","file":"barseries.min.js","sourcesContent":["export {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport default {\n  version: 'v5'\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    this.showHide(true)\n    // This will be called by series -- bar / pie\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    let xpos = Math.round(x - rootPos.left)\n    let ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (box.width / 2))\n      ypos = Math.round(ypos - (box.height / 2))\n    }\n\n\n    this.toolTipDiv\n      .style('left', xpos + 'px')\n      .style('top', ypos + 'px')\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n","import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getObject, refineString, isBoolean} from '@/utils'\n\nexport default class BasicBSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while barseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on barseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    if (!validJSONType) {\n      throw new Error('Invalid Bar series JSON received')\n    }\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: seriesData.map((dt) => dt[0])\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if (!yRange || !yRange2) {\n      let findEachPlotRange = false\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if (findEachPlotRange) {\n\n        // Reset range for each plot for finding min , max\n        for (const plot in eachPlotSet) {\n          const eachPlot = eachPlotSet[plot]\n          eachPlot.minVal = Infinity\n          eachPlot.maxVal = -Infinity\n        }\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            valData = d[eachPlot.dataIndex]\n            if (valData < eachPlot.minVal) {\n              eachPlot.minVal = valData\n            }\n            if (valData > eachPlot.maxVal) {\n              eachPlot.maxVal = valData\n            }\n          }\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'bar') {\n          plotInfo[key].forEach(function (plotData) {\n            const memberArr = plotData.barOrderMembers\n            memberArr.forEach(function (member) {\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'left' && eachPlotSet[member.name].maxVal > allMax) {\n                allMax = eachPlotSet[member.name].maxVal\n              }\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'right' && eachPlotSet[member.name].maxVal > allMax2) {\n                allMax2 = eachPlotSet[member.name].maxVal\n              }\n            })\n          })\n        }\n      }\n\n      // // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {stack, range, transpose, max, select, d3Event} from '@/d3Importer'\n\nexport default class Bar extends ChartComponent {\n  constructor (opts) {\n    super()\n\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      barData: null,\n      xAxisTarget: null,\n      barType: constants.GROUPED_BAR,\n      barOrderMembers: {},\n      visible: true,\n      events: {}\n    }, opts)\n\n    const self = this\n\n    const eachPlotSet = this.opts.chart.options.plotSet\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    this.opts.seriesLength = this.opts.barOrderIndex.length\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.xScale = x\n    this.yScale = y\n\n    const srData = this.opts.barData\n    this.opts.seriesArr = []\n    this.opts.xAxisArr = []\n    srData.forEach((sData, ind) => {\n      this.opts.xAxisArr.push(sData[this.opts.xAxisTarget])\n      this.opts.barOrderIndex.forEach(function (indexVal, brInd) {\n        if (!self.opts.seriesArr[brInd]) {\n          self.opts.seriesArr[brInd] = []\n        }\n        const eachSeriesData = self.opts.seriesArr[brInd]\n        eachSeriesData.push(sData[indexVal])\n      })\n    })\n    // this.opts.barOrderIndex.forEach(function (indexVal) {\n    //   self.opts.seriesArr.push(map(srData, indexVal))\n    // })\n\n    this.opts.barStack = stack().keys(range(this.opts.seriesLength))(transpose(this.opts.seriesArr))\n\n    this.yMaxGrouped = max(this.opts.seriesArr, function (y) {\n      return max(y)\n    })\n    this.yMaxStacked = max(this.opts.barStack, function (y) {\n      return max(y, function (d) {\n        return d[1]\n      })\n    })\n  }\n\n  draw () {\n    const self = this\n    const nameIndexMap = {}\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const barVisibleOrder = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n    barVisibleOrder.forEach(function (plot, name) {\n      const pt = eachPlotSet[plot.name]\n      nameIndexMap[pt.dataIndex - 1] = plot.name\n    })\n\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    this.barSeries = this.opts.chart.graphZone.selectAll('.vc-bar-series')\n      .data(this.opts.barStack)\n      .enter()\n      .append('g')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-bar-series')\n      .attr('fill', function (d, i) {\n        return eachPlotSet[nameIndexMap[i]].color\n      })\n      .attr('seriesName', function (d, i) {\n        return nameIndexMap[i]\n      })\n      .attr('seriesIndex', function (d, i) {\n        return i\n      })\n\n\n    this.bars = this.barSeries.selectAll('rect')\n      .data(function (d) {\n        return d\n      })\n      .enter().append('rect')\n      .attr('x', function (d, i) {\n        return self.xScale(self.opts.xAxisArr[i])\n      })\n      .attr('fill', function (d, i) {\n        const srName = select(this.parentNode).attr('seriesName')\n        return eachPlotSet[srName].colorArr && eachPlotSet[srName].colorArr[i]\n      })\n      .attr('y', this.opts.chart.chartHeight)\n      .attr('width', this.xScale.bandwidth())\n      .attr('height', 0)\n      .on('mousemove', function (d, i) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(d3Event.pageX, d3Event.pageY - 50, {\n          data: {\n            val: self.opts.barData[i],\n            ind: i\n          }\n        })\n      })\n      .on('mouseout', function (d) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n      })\n\n    for (const name in this.opts.events) {\n      const fn = this.opts.events[name]\n      self.bars.on(name, function () {\n        fn.apply(self.opts.chart, arguments)\n      })\n    }\n\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    if (this.opts.barType === constants.STACKED_BAR) {\n      this.bars\n        .attr('y', function (d) {\n          return self.yScale(d[1])\n        })\n        .attr('height', function (d) {\n          return self.yScale(d[0]) - self.yScale(d[1])\n        })\n        .attr('x', function (d, i) {\n          return self.xScale(self.opts.xAxisArr[i])\n        })\n        .attr('width', self.xScale.bandwidth())\n    } else {\n      this.bars\n        .attr('x', function (d, i) {\n          const xVal = self.xScale(self.opts.xAxisArr[i]) + self.xScale.bandwidth() / self.opts.seriesLength * select(this.parentNode).attr('seriesIndex')\n          return xVal\n        })\n        .attr('width', self.xScale.bandwidth() / self.opts.seriesLength)\n        .attr('y', function (d) {\n          return self.yScale(d[1] - d[0])\n        })\n        .attr('height', function (d) {\n          return self.yScale(0) - self.yScale(d[1] - d[0])\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.barSeries.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify barOrder arr based on visibleSeries\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all bar series\n    this.barSeries && this.barSeries.remove()\n    // draw with new barOrderMembers\n    this.draw()\n  }\n\n  remove () {\n    this.barSeries && this.barSeries.remove()\n    this.bars = null\n    this.opts = null\n  }\n\n}","import {isArray} from '@/utils'\nimport Bar from '@/series/Bar'\nimport Series from '@/series/Series'\n\nexport default class BarSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.bar) && plotInfo.bar.forEach((plotData) => {\n      this.plotSeries.push(new Bar({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        barOrderMembers: plotData.barOrderMembers,\n        barData: data\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultBSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicBSParser from '@/data-parser/BasicBSParser'\nimport BarSeries from '@/series/BarSeries'\nimport {select} from '@/d3Importer'\n\nexport default class BarSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicBSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultBSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new BarSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n  }\n\n  draw () {\n    console.log('BarSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n"],"sourceRoot":""}