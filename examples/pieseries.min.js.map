{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/../node_modules/babel-runtime/core-js/object/keys.js","webpack://vc/./legend/TimeSeriesLegend.js","webpack://vc/../node_modules/core-js/library/fn/object/keys.js","webpack://vc/../node_modules/core-js/library/modules/es6.object.keys.js","webpack://vc/./tooltip/BasicTooltip.js","webpack://vc/./data-parser/BasicPSParser.js","webpack://vc/./series/Pie.js","webpack://vc/./series/PieSeries.js","webpack://vc/./legend/PieSeriesLegend.js","webpack://vc/./charts/PieSeriesChart.js"],"names":["Chart","container","opts","isString","isObject","length","dataParser","select","size","Error","containerName","containerBox","elementOffset","takeContainerWidth","chart","width","takeContainerHeight","height","maxWidth","minWidth","options","chartHeight","chartWidth","margin","chartType","left","right","top","bottom","chartFullSpace","chartComponentsArr","svg","append","html","attr","className","counter","graphZone","console","log","this","forEach","chartCmpt","ChartComponent","draw","update","showFlag","showHide","remove","chartResize","throttedResize","throttle","Math","floor","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","isTouchScreen","chartCounter","tooltip","visible","format","legend","legendPrefix","position","constants","DIR_TOP","isFunction","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","val","unit","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","xAxis","UNITS_TIME","tickFormatter","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","d","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","series","pie","percentage","total","DIR_RIGHT","Series","plotSeries","plotFn","redraw","module","exports","__esModule","TimeSeriesLegend","disableSeriesToggle","self","maxWidthLegend","spacingNames","eachPlotSet","eachPlotNames","leng","textWidth","maxLenLegend","dummyG","selectAll","data","enter","style","text","each","i","thisWidth","round","getComputedTextLength","push","ele","maxTextLength","graphOptions","toggleSeries","emptyFn","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","seriesName","visibleSeries","plotName","applyYAxis","currentPlotInfo","DIR_LEFT","constructYAxisInfo","modifyAxisProps","domainScale","yRange","yAxis2","yRange2","reScaleYAxis","sFlag","classed","onLegendChange","call","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER","Object","keys","toObject","$keys","it","BasicTooltip","toolTipDiv","x","y","displayData","excludeToolTipDiv","box","rootPos","xpos","ypos","$toolTipDiv","BasicPSParser","dataOptions","constructPlotInfo","err","pieData","pieseries","plotInfo","othersArc","arcs","values","sort","a","b","arcInfo","ind","pieArcCount","refineName","refineString","chartData","ChartDataParser","Pie","donutPercent","positionPercentage","seriesOrder","piePosPercentage","PIE_POS_DEFAULT","radius","order","donutLength","tooltipHelper","arc","outerRadius","PIE_TOOLTIP_BUFFER","innerRadius","pieTag","arcZone","PIE_DARK_OPACITY","txtEle","textPos","hover","PIE_DULL_OPACITY","PIE_ARC_STROKE","transition","delay","attrTween","interpolate","PIE_HOVER_BUFFER","t","hide","centroid","PieSeries","pieInfo","PieSeriesLegend","hasOverflow","pieforeignDiv","legendXDiv","chartZoneWidth","pieLegendPos","PIE_POS_LEGEND","show","PieSeriesChart","startTime","Date","dataExecutor","chartInitilize","tooltipOpts","getObject","Tooltip","document","implementation","hasFeature","legends","chartResponsive","timeDiff","getTime"],"mappings":"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","file":"pieseries.min.js","sourcesContent":["export {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport default {\n  version: 'v5'\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    this.showHide(true)\n    // This will be called by series -- bar / pie\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    let xpos = Math.round(x - rootPos.left)\n    let ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (box.width / 2))\n      ypos = Math.round(ypos - (box.height / 2))\n    }\n\n\n    this.toolTipDiv\n      .style('left', xpos + 'px')\n      .style('top', ypos + 'px')\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n","import {refineString} from '@/utils'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\n\nexport default class BasicPSParser extends ChartDataParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while pieseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on pieseries JSON parsing')\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const pieData = resJson.pieseries\n    const plotInfo = dataOptions.series\n    const eachPlotSet = {}\n    const othersArc = {\n      name: 'Others',\n      value: 0,\n      color: '#324fff'\n    }\n\n    // Create pieSet for each pie charts and arcInfo which contains each pie arcs to be drawn\n    const pieObj = plotInfo.pie\n    pieObj.total = 0\n    const arcs = []\n\n    // Find total value for entire pie chart\n    const allArcArr = pieData.values\n\n    allArcArr.sort(function (a, b) {\n      return (b.value - a.value)\n    }).forEach(function (arcInfo, ind) {\n      if (pieObj.pieArcCount && (ind + 1) >= pieObj.pieArcCount) {\n        // Add to others arc\n        othersArc.value += arcInfo.value\n      } else {\n        const refineName = refineString(arcInfo.name)\n        // arcInfo.name = refineName\n        eachPlotSet[refineName] = {}\n        eachPlotSet[refineName].name = arcInfo.name\n        eachPlotSet[refineName].color = arcInfo.color\n        eachPlotSet[refineName].value = arcInfo.value\n        eachPlotSet[refineName].visible = true\n        eachPlotSet[refineName].unit = pieObj.unit\n        arcs.push(arcInfo)\n      }\n      pieObj.total += arcInfo.value\n     \n    })\n    // Add others to arc\n    if (othersArc.value) {\n      const refineName = refineString(othersArc.name)\n      // othersArc.name = refineName\n      eachPlotSet[refineName] = {}\n      eachPlotSet[refineName].name = othersArc.name\n      eachPlotSet[refineName].color = othersArc.color\n      eachPlotSet[refineName].value = othersArc.value\n      eachPlotSet[refineName].visible = true\n      eachPlotSet[refineName].unit = pieObj.unit\n      arcs.push(othersArc)\n    }\n\n    return {\n      plotSet: eachPlotSet,\n      series: {\n        pie: pieObj\n      },\n      chartData: {\n        name: pieObj.name,\n        arcs\n      }\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {pie, arc, interpolate, select} from '@/d3Importer'\nimport {elementOffset} from '@/utils'\n\nexport default class Pie extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      pieData: null,\n      donutPercent: 100,\n      positionPercentage: null,\n      seriesOrder: true,\n      visible: true\n    }, opts)\n\n    this.opts.piePosPercentage = this.opts.positionPercentage || (constants.PIE_POS_DEFAULT / 100)\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n\n    // X Position of pie graph on the chart\n    this.pie = pie()\n\n    if (this.opts.seriesOrder) {\n      this.pie\n        .sort(function (a, b) {\n          return (b.order - a.order) // Sort based on each series order\n        })\n    }\n\n    this.pie\n      .value(function (d) {\n        return d.value // provide index of this series in data Arr\n      })\n\n\n    if (this.opts.donutPercent > 100 || this.opts.donutPercent < 0) {\n      this.opts.donutPercent = 100\n    }\n\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.opts.tooltipHelper = arc()\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arc = arc()\n    // .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n  }\n\n  draw () {\n\n    const outerRadius = this.opts.radius\n    const arc = this.arc\n    const self = this\n    this.pieTag = this.opts.chart.graphZone.append('g')\n      .attr('class', 'vc-pie-plot vc-pie-' + this.opts.className)\n      .attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n\n    this.arcZone = this.pieTag.selectAll('.vc-pie-arc')\n      .data(this.pie(this.opts.pieData.arcs))\n      .enter().append('g')\n      .attr('class', 'vc-pie-arc')\n\n    this.arcZone.append('path')\n      .each(function (d) {\n        d.outerRadius = outerRadius\n      })\n      .attr('d', this.arc)\n      .attr('fill', function (d) {\n        return d.data.color\n      })\n      .style('opacity', constants.PIE_DARK_OPACITY)\n      .style('stroke-width', 0)\n      .on('mouseover', function (d, ind) {\n        // tooltip feature\n        const txtEle = self.arcZone.select(`.vc-tool-text_${ind}`)\n        const textPos = elementOffset(txtEle) // Find position of Arc respective tooltipHelper\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(textPos.left, textPos.top, d)\n        // Dull all other Arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DULL_OPACITY)\n        // Provide new radius and stroke-width\n        select(this)\n          .style('opacity', constants.PIE_DARK_OPACITY)\n          .style('stroke-width', constants.PIE_ARC_STROKE)\n          .transition().delay(10).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius + constants.PIE_HOVER_BUFFER)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n      .on('mouseout', function (d) { // Hide tooltip\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n        // Provide dark opacity to all arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DARK_OPACITY)\n        // Revert back to its loaded radius\n        select(this)\n          .style('stroke-width', 0)\n          .transition().delay(150).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n\n    // Add tooltip-helper for each arc outside pie area\n    this.arcZone.append('text')\n      .attr('class', function (d, ind) {\n        return `vc-tool-text_${ind}`\n      })\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  update () {\n    const self = this\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n    this.pieTag.attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.arc\n      .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n\n    this.opts.tooltipHelper\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arcZone.select('path').attr('d', this.arc)\n    this.arcZone.select('text')\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.pieTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.arcZone && this.arcZone.remove()\n    this.pieTag && this.pieTag.remove()\n    this.opts.tooltipHelper = null\n    this.arc = null\n    this.pie = null\n    this.opts = null\n  }\n}","import Series from '@/series/Series'\nimport Pie from '@/series/Pie'\n\nexport default class PieSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData\n    const pieInfo = this.opts.chart.options.series.pie\n\n    this.plotSeries.push(new Pie({\n      chart: this.opts.chart,\n      className: pieInfo.className || pieInfo.name,\n      pieData: data,\n      donutPercent: pieInfo.donutPercent || 100,\n      visible: pieInfo.visible\n    }))\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\n\nexport default class PieSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.hasOverflow = false\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const textWidth = []\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n        }\n        textWidth.push(thisWidth)\n      })\n\n    dummyG.remove()\n\n    if (this.opts.maxWidthLegend > constants.LEGEND_MAX_WIDTH) {\n      this.opts.maxWidthLegend = constants.LEGEND_MAX_WIDTH\n    }\n\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n\n    const pieforeignDiv = this.legendDisplay\n      .append('foreignObject')\n      .attr('width', divWidth)\n      .attr('height', fullYLen)\n      .attr('class', 'vc-legend-right')\n      .append('xhtml:div')\n      .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n      .style('height', '100%')\n      .style('padding', '5px 0px')\n\n    if (fullYLen === maxYLen) {\n      // Add overflow to chart\n      pieforeignDiv\n        .style('overflow', 'auto')\n      this.opts.hasOverflow = true\n    }\n\n    this.legendBlock = pieforeignDiv\n      .selectAll('div')\n      .data(eachPlotNames)\n      .enter()\n      .append('div')\n      .attr('class', 'vc-legend-name')\n\n\n    this.legendBlock.append('span')\n      .style('background-color', function (d) {\n        return eachPlotSet[d].color\n      })\n\n    this.legendBlock.append('label')\n      .style('width', (divWidth - 40) + 'px')\n      .style('font-size', '11px')\n      .style('font-weight', '600')\n      .text(function (d) {\n        return (self.opts.legendPrefix + eachPlotSet[d].name)\n      })\n\n    this.legendXDiv = pieforeignDiv\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const chartZoneWidth = this.opts.chart.graphZone.node().getBBox().width\n    const basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right + constants.LEGEND_RIGHT_BUFFER\n\n    let pieLegendPos = constants.PIE_POS_LEGEND\n    if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n      pieLegendPos = constants.PIE_POS_LEGEND - 5\n    }\n\n    let legendXPos = Math.floor(this.opts.chart.chartWidth * pieLegendPos / 100)\n    let xBuff = this.opts.chart.chartWidth - legendXPos\n    xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n    legendXPos += xBuff\n\n    const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n    if (!this.opts.hasOverflow) {\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n    } else {\n      this.legendXDiv\n        .style('position', 'relative')\n        .style('top', legendYPos + 'px')\n        .style('left', legendXPos + 'px')\n    }\n\n    if (this.opts.chart.chartWidth < (basicWidth + chartZoneWidth)) {\n      // Hide legend display for pielegends\n      this.hide()\n    } else {\n      this.show()\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport {addDefaultPSOptions} from '@/helpers'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicPSParser from '@/data-parser/BasicPSParser'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\nimport PieSeries from '@/series/PieSeries'\nimport PieSeriesLegend from '@/legend/PieSeriesLegend'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\n\nexport default class PieSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicPSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartDataParser\n    if (!(opts.dataParser instanceof ChartDataParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartDataParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultPSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new PieSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      // IF browser supports foreignObject use pieLegends API\n      if (document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#Extensibility', '1.1')) {\n        this.legends = new PieSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      } else {\n        this.legends = new TimeSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      }\n\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('PieSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    this.chartResponsive()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n}\n"],"sourceRoot":""}