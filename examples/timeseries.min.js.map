{"version":3,"sources":["webpack://vc/./data-parser/BasicTSParser.js","webpack://vc/./tooltip/TimeSeriesTooltip.js","webpack://vc/./mouse-handler/index.js","webpack://vc/./zoom/index.js","webpack://vc/./series/Line.js","webpack://vc/./series/StackArea.js","webpack://vc/./series/TimeSeries.js","webpack://vc/./charts/TimeSeriesChart.js","webpack://vc/../node_modules/core-js/library/fn/object/keys.js","webpack://vc/../node_modules/core-js/library/modules/es6.object.keys.js","webpack://vc/./d3Importer.js","webpack://vc/./axis/index.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/../node_modules/babel-runtime/core-js/object/keys.js","webpack://vc/./legend/TimeSeriesLegend.js"],"names":["BasicTSParser","opts","this","dataOptions","data","series","yAxis","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","console","log","onError","Error","seriesData","timeseries","columns","values","validJSONType","length","firstTime","isNumber","isDate","start","forEach","d","getDateFromEpoc","chartData","timeInfo","dataIndex","timeRange","eachPlotSet","plotSet","plotInfo","getObject","yAxis2","findEachPlotRange","key","yRange","yRange2","min","max","minVal","maxVal","stack","plot","eachPlot","Infinity","plotData","valueRange","valData","memberArr","stackOrderMembers","sum","member","name","visible","allMax","allMax2","plotAxis","allMin","allMin2","yMin","yMax","reduce","a","b","ind","timeStampIndex","dataColorArr","color","yLeft","yRight","refineName","refineString","unit","isBoolean","barOrderMembers","ChartAxisParser","TimeSeriesTooltip","crossHairs","enable","isFunction","format","toolTipDiv","chart","container","append","attr","className","svg","margin","left","top","constants","TOOLTIP_TOP_BUFFER","chartHeight","mouseHandler","register","self","xScale","dateIndex","options","dataSet","bisectDate","bisector","eventName","isTouchScreen","mouseBrush","on","xMouse","d3Mouse","yMouse","xVal","invert","found","dBefore","dPrev","dFound","toolTipData","chartWidth","dataParseLen","Math","floor","visibleDataIndex","pl","multiArrMap","dSet","filter","val","index","sort","maxInd","mp","arrSet","dateIntRange","abs","hover","hide","select","xPos","yPos","displayData","showHide","percentageDiff","box","elementOffset","rootPos","round","width","height","style","html","call","showFlag","classed","remove","ChartComponent","MouseHandler","registerFn","zoom","callback","push","fun","Zoom","onZoom","emptyFn","onY1Zoom","onY2Zoom","yScaleLeft","yScaleRight","brushOverlay","brushX","extent","brushXDiv","selectAll","d3Event","selection","d0","map","d1","move","xAxis","modifyAxisProps","domainScale","update","brushYLeft","brushY","brushYLeftDiv","brushYRight","brushYRightDiv","BRUSHY_BUFFER","right","Line","DIR_LEFT","DIR_BOTTOM","lineData","yAxisTarget","xAxisTarget","x","indexOf","DIR_TOP","y","DIR_RIGHT","line","defined","lineTag","graphZone","enter","clipElement","lineWidth","seriesName","draw","StackArea","stackData","stackOrderIndex","ele","d3Stack","area","i","y0","y1","keys","order","stackOrderNone","offset","stackOffsetNone","stackVisibleOrder","stackLayer","stackMember","TimeSeries","plotSeries","isArray","Series","TimeSeriesChart","startTime","Date","dataParser","isObject","dataExecutor","addDefaultTSOptions","chartInitilize","axisOptions","Axis","position","orient","rangeScale","chartComponentsArr","tooltipOpts","tooltip","Tooltip","zoomOpts","zoomBrush","onXZoom","legend","legends","TimeSeriesLegend","legendPrefix","disableSeriesToggle","onLegendChange","afterDraw","reScaleYAxis","chartResponsive","triggerMouseAction","timeDiff","getTime","onComplete","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","tickValues","reScaleAxis","requiredWidth","class","maxText","dummyG","axis","each","tickHtml","text","String","getComputedTextLength","Y_AXIS_SPACE","chartFullSpace","Chart","module","exports","Object","toObject","$keys","it","label","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","axisBottom","axisTop","tickSizeInner","axisLeft","axisRight","externalFormatter","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","padding","clamp","range","domain","tickVal","newTick","dayLength","minuteLength","ticks","limitText","tickFmt","truncateText","isString","size","containerName","containerBox","takeContainerWidth","takeContainerHeight","maxWidth","minWidth","chartType","bottom","counter","chartCmpt","chartResize","throttedResize","throttle","setTimeout","chartId","id","window","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","chartCounter","c","time","error","defaultValueFormat","decimals","kVal","getValueWithDecimals","timeLen","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","UNITS_DEF","formatTime","zoneOffset","tableStr","isNaN","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","pie","percentage","total","plotFn","redraw","__esModule","maxWidthLegend","spacingNames","eachPlotNames","leng","textWidth","maxLenLegend","thisWidth","maxTextLength","graphOptions","toggleSeries","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","visibleSeries","plotName","applyYAxis","currentPlotInfo","sFlag","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER"],"mappings":"2TAGqBA,E,YACnB,WAAaC,GAAM,2DACXA,IADW,OAEjB,EAAKA,KAAOA,EAFK,E,4DAOjB,IAYE,OAVAC,KAAKC,YAAc,GACnBD,KAAKD,KAAKG,OAASF,KAAKC,YAAYC,KAAOF,KAAKD,KAAKG,MACrDF,KAAKD,KAAKI,SAAWH,KAAKC,YAAYE,OAASH,KAAKD,KAAKI,QACzDH,KAAKD,KAAKK,QAAUJ,KAAKC,YAAYG,MAAQJ,KAAKD,KAAKK,OAEvD,IAAcJ,KAAKC,YAAaD,KAAKK,sBACrC,IAAcL,KAAKC,YAAaD,KAAKM,sBACrC,IAAcN,KAAKC,YAAaD,KAAKO,qBACrC,IAAcP,KAAKC,YAAaD,KAAKQ,sBAE9BR,KAAKC,YAEZ,MAAOQ,GAGP,MAFAC,QAAQC,IAAI,oDAAqDF,GACjET,KAAKD,KAAKa,QAAQH,GACZ,IAAII,MAAM,+D,2CAKlB,IAEMC,EAFcd,KAAKC,YACGC,KACDa,WACrBC,EAAUF,EAAWE,QACrBd,EAAOY,EAAWG,OAClBC,EAAiBF,EAAQG,QAAUjB,EAAKiB,OAIxCC,EAAYlB,EAAK,GADA,GAEvB,IAAKgB,IAAmBG,YAASD,KAAcE,YAAOF,GACpD,MAAM,IAAIP,MAAM,qCAGlB,IAAIU,EAAQ,EASZ,OARArB,EAAKsB,SAAQ,SAAUC,GACrB,GAAIF,EAAQE,EARS,GASnB,MAAM,IAAIZ,MAAM,kFAElBU,EAAQE,EAXa,GAYrBA,EAZqB,GAYDC,YAAgBD,EAZf,IAYkC,MAGlD,CACLE,UAAWzB,K,2CAKb,IACMY,EADcd,KAAKC,YACM0B,UAE/B,MAAO,CACLC,SAAU,CACRC,UAHc,EAIdC,UAAW,CAAChB,EAAW,GAJT,GAIwBA,EAAYA,EAAWK,OAAS,GAJxD,Q,2CAUlB,IAAMlB,EAAcD,KAAKC,YACnB8B,EAAc9B,EAAY+B,QAC1BC,EAAWhC,EAAYE,OACvBD,EAAOD,EAAY0B,UACnBvB,EAAQ8B,YAAUjC,EAAa,cAC/BkC,EAASD,YAAUjC,EAAa,eAClCmC,GAAoB,EACpBC,SACAC,EAAS,KACTC,EAAU,KA2Jd,OAxJInC,GACE,IAAgBA,EAAMoC,MAAQ,IAAgBpC,EAAMqC,OACtDH,EAAS,CAAClC,EAAMoC,IAAKpC,EAAMqC,MAI3BN,GACE,IAAgBA,EAAOK,MAAQ,IAAgBL,EAAOM,OACxDF,EAAU,CAACJ,EAAOK,IAAKL,EAAOM,OAK7BrC,IAAUkC,GAAYH,IAAWI,IAAU,WAE9C,IAAKF,KAAON,EACV,IAAK,IAAgBA,EAAYM,GAAKK,UAAY,IAAgBX,EAAYM,GAAKM,QAAS,CAC1FP,GAAoB,EACpB,MAIJ,GAAKH,EAASW,OAASX,EAASW,MAAMzB,QAAWiB,EAAmB,CAElE,GAAIA,EAEF,IAAK,IAAMS,KAAQd,EAAa,CAC9B,IAAMe,EAAWf,EAAYc,GAC7BC,EAASJ,OAASK,IAClBD,EAASH,QAAUI,IAKvBd,EAASW,OAASX,EAASW,MAAMpB,SAAQ,SAAUwB,GACjDA,EAASC,WAAa,CAACF,KAAWA,QAIpC,IAAIG,EAAU,EACdhD,EAAKsB,SAAQ,SAAUC,GACrB,GAAIW,EACF,IAAK,IAAMS,KAAQd,EAAa,CAC9B,IAAMe,EAAWf,EAAYc,IAC7BK,EAAUzB,EAAEqB,EAASjB,YACPiB,EAASJ,SACrBI,EAASJ,OAASQ,GAEhBA,EAAUJ,EAASH,SACrBG,EAASH,OAASO,GAKxBjB,EAASW,OAASX,EAASW,MAAMpB,SAAQ,SAAUwB,GACjD,IAAMG,EAAYH,EAASI,kBACvBC,EAAM,EACVF,EAAU3B,SAAQ,SAAU8B,GAC1BD,GAAQtB,EAAYuB,EAAOC,MAAMC,QAAU/B,EAAEM,EAAYuB,EAAOC,MAAM1B,WAAa,KAGjFwB,EAAML,EAASC,WAAW,KAC5BD,EAASC,WAAW,GAAKI,GAEvBA,EAAML,EAASC,WAAW,KAC5BD,EAASC,WAAW,GAAKI,SAOjC,IAAII,GAAUV,IACVW,GAAWX,IACf,IAAKV,KAAOJ,EACE,SAARI,EACFJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC1BjB,EAAYiB,EAASO,MAAMC,SAAsD,SAA3CzB,EAAYiB,EAASO,MAAMI,SAAS,IAAiB5B,EAAYiB,EAASO,MAAMZ,OAASc,IACjIA,EAAS1B,EAAYiB,EAASO,MAAMZ,QAElCZ,EAAYiB,EAASO,MAAMC,SAAsD,UAA3CzB,EAAYiB,EAASO,MAAMI,SAAS,IAAkB5B,EAAYiB,EAASO,MAAMZ,OAASe,IAClIA,EAAU3B,EAAYiB,EAASO,MAAMZ,WAGxB,UAARN,GACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GACD,SAAzBA,EAASW,SAAS,IAAiBX,EAASC,WAAW,GAAKQ,IAC9DA,EAAST,EAASC,WAAW,IAEF,UAAzBD,EAASW,SAAS,IAAkBX,EAASC,WAAW,GAAKS,IAC/DA,EAAUV,EAASC,WAAW,OAOtC,IAAIW,EAASb,IACTc,EAAUd,IACd,IAAKV,KAAON,EAC2B,SAAjCA,EAAYM,GAAKsB,SAAS,IAAiB5B,EAAYM,GAAKmB,SAAWzB,EAAYM,GAAKK,OAASkB,IACnGA,EAAS7B,EAAYM,GAAKK,QAES,UAAjCX,EAAYM,GAAKsB,SAAS,IAAkB5B,EAAYM,GAAKmB,SAAWzB,EAAYM,GAAKK,OAASmB,IACpGA,EAAU9B,EAAYM,GAAKK,QAK/B,IAAIoB,SAAMC,SAEN,CAACH,EAAQH,GAAQO,QAAO,SAAUC,EAAGC,GACvC,OAAO,IAAgBD,IAAM,IAAgBC,OAE7CJ,EAAO5B,YAAUjC,EAAa,kBAC9B6D,EAAO,IAAgBA,GAAQA,EAAOF,EACtCG,EAAO7B,YAAUjC,EAAa,mBAC9B8D,EAAO,IAAgBA,GAAQA,EAAON,KAEpCM,EAAOD,EAAO,IAEhBxB,EAAS,CAACwB,EAAMC,IAGdzB,IADElC,GACO,CAAC,EAAG,IAOb,CAACyD,EAASH,GAASM,QAAO,SAAUC,EAAGC,GACzC,OAAO,IAAgBD,IAAM,IAAgBC,OAE7CJ,EAAO5B,YAAUjC,EAAa,mBAC9B6D,EAAO,IAAgBA,GAAQA,EAAOD,EACtCE,EAAO7B,YAAUjC,EAAa,oBAC9B8D,EAAO,IAAgBA,GAAQA,EAAOL,KAEpCK,EAAOD,EAAO,IAEhBvB,EAAU,CAACuB,EAAMC,IAGfxB,IADEJ,GACQ,CAAC,EAAG,IAnI4B,GA2IzC,CACLG,OAAQA,EACRC,QAASA,K,0CAKX,IAAMtC,EAAcD,KAAKC,YAEnBa,EADUb,EAAYC,KACDa,WACrBC,EAAUF,EAAWE,QACvBmD,EAAM,EAEJpC,EAAc,GAEdE,EAAWhC,EAAYE,OACzBkC,SAEE+B,EAAiBnE,EAAY2B,SAASC,UACtCwC,EAAevD,EAAWwD,OAAS,GACnCC,EAAQrC,YAAUjC,EAAa,cAC/BuE,EAAStC,YAAUjC,EAAa,eAsBtC,IAAKoC,KAnBLrB,EAAQQ,SAAQ,SAAUC,GACxB,GAAI2C,IAAmBD,EAAvB,CAKA,IAAMM,EAAaC,YAAajD,GAChCM,EAAY0C,GAAc,CACxBlB,KAAM9B,EACNI,UAAWsC,EACXzB,OAAQK,IACRJ,QAASI,IACTS,SAAS,EACTc,MAAOD,EAAaF,IAAQ,QAE9BA,SAbEA,OAiBQlC,EACE,SAARI,EACFJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9BA,EAASO,KAAOmB,YAAa1B,EAASO,MACtC,IAAMe,EAAQtB,EAASsB,MACvB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYiB,EAASO,MAAMe,MAAQA,GAC7C,IAAMX,EAAWX,EAASW,UAAY,CAAC,OAAQ,UAC/C5B,EAAYiB,EAASO,MAAMI,SAAWA,EACtC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYiB,EAASO,MAAMoB,KAAOA,EAClCC,YAAU5B,EAASQ,WAAazB,EAAYiB,EAASO,MAAMC,QAAUR,EAASQ,YAE/D,UAARnB,EACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9B,IAAMG,EAAYH,EAASI,kBAC3BJ,EAASC,WAAa,CAACF,KAAWA,KAClCI,EAAU3B,SAAQ,SAAU8B,GAC1BA,EAAOC,KAAOmB,YAAapB,EAAOC,MAClC,IAAMe,EAAQhB,EAAOgB,MACrB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYuB,EAAOC,MAAMe,MAAQA,GAC3C,IAAMX,EAAWL,EAAOK,UAAY,CAAC,OAAQ,UAC7C5B,EAAYuB,EAAOC,MAAMI,SAAWA,EACpC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYuB,EAAOC,MAAMoB,KAAOA,EAChCC,YAAUtB,EAAOE,WAAazB,EAAYuB,EAAOC,MAAMC,QAAUF,EAAOE,eAG3D,QAARnB,GACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9B,IAAMG,EAAYH,EAAS6B,gBAC3B7B,EAASC,WAAa,CAACF,KAAWA,KAClCI,EAAU3B,SAAQ,SAAU8B,GAC1BA,EAAOC,KAAOmB,YAAapB,EAAOC,MAClC,IAAMe,EAAQhB,EAAOgB,MACrB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYuB,EAAOC,MAAMe,MAAQA,GAC3C,IAAMX,EAAWL,EAAOK,UAAY,CAAC,OAAQ,UAC7C5B,EAAYuB,EAAOC,MAAMI,SAAWA,EACpC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYuB,EAAOC,MAAMoB,KAAOA,EAChCC,YAAUtB,EAAOE,WAAazB,EAAYuB,EAAOC,MAAMC,QAAUF,EAAOE,eAMhF,MAAO,CACLrD,OAAQ8B,EACRD,QAASD,O,GA9U4B+C,K,gCCEtBC,E,YACnB,WAAahF,GAAM,oEAEjB,EAAKA,KAAO,IAAc,CACxBiF,WAAY,CACVC,QAAQ,GAEVzB,SAAS,GACRzD,GAGEmF,YAAW,EAAKnF,KAAKoF,UACxB,EAAKpF,KAAKoF,OAAS,SAAU1D,GAC3B,iDAAkD,IAAeA,GAAjE,YAZa,E,oDAiBX,WACNzB,KAAKgF,YAAa,EAClBhF,KAAKoF,WAAapF,KAAKD,KAAKsF,MAAMC,UAC/BC,OAAO,OACPC,KAAK,QAAS,sBAAwBxF,KAAKD,KAAK0F,YAEf,IAAhCzF,KAAKD,KAAKiF,WAAWC,SACvBjF,KAAKgF,WAAahF,KAAKD,KAAKsF,MAAMK,IAC/BH,OAAO,KACPC,KAAK,QAAS,mBACjBxF,KAAKgF,WAAWO,OAAO,QACpBC,KAAK,YAAa,wBAClBA,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOE,IAAMC,IAAUC,oBAClDP,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAOxF,KAAKD,KAAKsF,MAAMW,YAAchG,KAAKD,KAAKsF,MAAMM,OAAOE,MAItE7F,KAAKD,KAAKsF,MAAMY,aAAaC,UAAS,WAEpC,IAAMC,EAAO,EACPC,EAASlE,YAAU,EAAKnC,KAAM,uBAAwB,EACtDkG,EAAe,EAAKlG,KAAKsF,MAAMY,aAC/BI,EAAY,EAAKtG,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC7C0E,EAAU,EAAKxG,KAAKsF,MAAMiB,QAAQ3E,UAElC6E,EAAaC,aAAS,SAAUhF,GACpC,OAAOA,EAAE4E,MACRT,KA+ECc,EAAY,YACZ,EAAK3G,KAAKsF,MAAMiB,QAAQjB,MAAMsB,gBAChCD,EAAY,SAEdT,EAAaW,WACVC,GAAGH,GAlFW,SAAUjF,GAEzB,IAAMqF,EAASC,YAAQ/G,MAAM,GACvBgH,EAASD,YAAQ/G,MAAM,GACvBiH,EAAOb,EAAOc,OAAOJ,GAGrBK,EAAQX,EAAWD,EAASU,EAAM,GAGlCG,EAAUb,EAAQY,EAAQ,GAG1BE,EAAQd,EAAQY,EAAQ,GAGxBG,EAASf,EAAQY,IAAUE,EAE7BE,EAAcF,EACdd,EAAQpF,OAASgF,EAAKpG,KAAKsF,MAAMmC,WAAY,WAE/C,IAAMC,EAAeC,KAAKC,MAAMpB,EAAQpF,OAASgF,EAAKpG,KAAKsF,MAAMmC,YAAc,EAEzEI,EAAmB,GAEzB,IAAK,IAAMC,KAAM1B,EAAKpG,KAAKsF,MAAMiB,QAAQtE,QAAS,CAChD,IAAMa,EAAOsD,EAAKpG,KAAKsF,MAAMiB,QAAQtE,QAAQ6F,GACzChF,EAAKW,UACPoE,EAAiB/E,EAAKhB,YAAa,GAMvC,IAFA,IAAMiG,EAAc,GAEX3D,EAAOgD,EAAQM,EAAetD,EAAOgD,EAAQM,EAAetD,IACnE,GAAIoC,EAAQpC,GAAM,CAChB,IAAM4D,EAAOxB,EAAQpC,GAAK6D,QAAO,SAAUC,EAAKC,GAC9C,OAAON,EAAiBM,MACvBC,MAAK,SAAUlE,EAAGC,GACnB,OAAOA,EAAID,KAET8D,EAAK5G,SACP2G,EAAY3D,GAAO4D,GAIzB,IAAIK,SACAzF,GAAUI,IACd,IAAK,IAAMsF,KAAMP,EAAa,CAC5B,IAAMQ,EAASR,EAAYO,GACvB1F,EAAS2F,EAAO,KAClB3F,EAAS2F,EAAO,GAChBF,EAASC,GAIbd,EAAchB,EAAQ6B,IAAWd,EArCc,GAwC/CC,EAAeN,EAAOI,EAAMhB,GAAeiB,EAAOjB,GAAaY,EAAQK,EAASD,EAGlF,IAAIkB,EAAejB,EAAOjB,GAAagB,EAAMhB,IAExCkC,GAAgBnB,IACnBmB,EAAelB,EAAMhB,GAAae,EAAQf,IAGxCkC,EAAeb,KAAKc,IAAIlB,EAAOjB,GAAaY,MAE9CM,EAAc,IACFlB,GAAaY,GAG3Bd,EAAKsC,MAAM3B,EAAQE,EAAQO,MAS1BV,GAAG,YAAY,WACdV,EAAKuC,UAEN7B,GAAG,aAAa,WACfV,EAAKuC,UAGTzC,EAAaW,WAAW+B,OAAO,gBAC5B9B,GAAG,aAAa,WACfV,EAAKuC,e,4BAMNE,EAAMC,EAAMC,GAEjB9I,KAAKgF,YAAchF,KAAKgF,WAAW2D,OAAO,QACvCnD,KAAK,YADW,aACeoD,EADf,OAEhBpD,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOE,IAAMC,IAAUC,oBAClDP,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAOxF,KAAKD,KAAKsF,MAAMW,YAAchG,KAAKD,KAAKsF,MAAMM,OAAOE,KACpE7F,KAAK+I,UAAS,GAEd,IAAIC,EAAiBJ,EAAO5I,KAAKD,KAAKsF,MAAMmC,WAExCwB,EAAiB,KACnBA,EAAiB,IAEfA,EAAiB,KACnBA,EAAiB,KAGnB,IAAMC,EAAMC,YAAclJ,KAAKoF,YACzB+D,EAAUD,YAAclJ,KAAKD,KAAKsF,MAAMC,WACxCM,EAAO8B,KAAK0B,MAAMD,EAAQvD,KAAO5F,KAAKD,KAAKsF,MAAMM,OAAOC,KAAOgD,EAAOK,EAAII,MAAQL,GAAkB,KACpGnD,EAAM6B,KAAK0B,MAAMD,EAAQtD,IAAMoD,EAAIK,OAAS,EAAmC,EAA/BxD,IAAUC,oBAA0B,KAG1F/F,KAAKoF,WACFmE,MAAM,OAAQ3D,GACd2D,MAAM,MAAO1D,GACb0D,MAAM,UAAW,gBACjBC,KAAKxJ,KAAKD,KAAKoF,OAAOsE,KAAKzJ,KAAKD,KAAKsF,MAAOyD,M,+BAGvCY,GACRA,IAAaA,EAEb1J,KAAKgF,YAAchF,KAAKgF,WAAW2E,QAAQ,aAAcD,GACzD1J,KAAKoF,YAAcpF,KAAKoF,WAAWuE,QAAQ,aAAcD,GACzD1J,KAAKD,KAAKyD,QAAUkG,I,+BAIpB1J,KAAKoF,YAAcpF,KAAKoF,WAAWwE,SACnC5J,KAAKgF,YAAchF,KAAKgF,WAAW4E,SACnC5J,KAAKD,KAAO,S,GA9L+B8J,KCH1BC,E,YACnB,WAAa/J,GAAM,oEAEjB,EAAKA,KAAOA,EACZ,EAAKA,KAAKgK,WAAa,GAHN,E,oDAOjB/J,KAAK4G,WAAa5G,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC1CC,KAAK,QAAS,aACdA,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,aAC/BR,KAAK,OAAQ,QACbA,KAAK,iBAAkB,OACvBA,KAAK,QAAS,iDACdA,KAAK,YAPU,aAOgBxF,KAAKD,KAAKsF,MAAMM,OAAOC,KAPvC,IAO+C5F,KAAKD,KAAKsF,MAAMM,OAAOE,IAPtE,KASd7F,KAAKD,KAAKsF,MAAMiB,QAAQjB,MAAMsB,eAChC3G,KAAK4G,WAAWpB,KAAK,SAAU,WAG5BxF,KAAKD,KAAKsF,MAAMiB,QAAQ0D,KAAKxG,SAEhCxD,KAAK4G,WAAWrB,OAAO,QACpBC,KAAK,QAAS,WACdA,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,e,+BAKpChG,KAAK4G,WAAWpB,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC3ChC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,aAC/BR,KAAK,YAFR,aAEkCxF,KAAKD,KAAKsF,MAAMM,OAAOC,KAFzD,IAEiE5F,KAAKD,KAAKsF,MAAMM,OAAOE,IAFxF,KAGK7F,KAAKD,KAAKsF,MAAMiB,QAAQ0D,KAAKxG,SAChCxD,KAAK4G,WAAW+B,OAAO,gBACpBnD,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,e,+BAI5B0D,GACRA,IAAaA,EACb1J,KAAK4G,YAAc5G,KAAK4G,WAAW+C,QAAQ,aAAcD,K,+BAGjDO,GACRjK,KAAKD,KAAKgK,WAAWG,KAAKD,K,2CAGN,WACpBjK,KAAKD,KAAKgK,WAAWvI,SAAQ,SAAC2I,GAC5BA,EAAIV,KAAK,Q,+BAKXzJ,KAAK4G,YAAc5G,KAAK4G,WAAWgD,SACnC5J,KAAKD,KAAO,S,GA5D0B8J,KCGrBO,E,YACnB,WAAarK,GAAM,oEAEjB,EAAKA,KAAO,IAAc,CACxBsK,OAAQC,IACRC,SAAUD,IACVE,SAAUF,KACTvK,GANc,E,oDAUjB,IAAMoG,EAAOnG,KACPoG,EAASlE,YAAUlC,KAAKD,KAAM,uBAAwB,EACtD0K,EAAavI,YAAUlC,KAAKD,KAAM,uBAAwB,EAC1D2K,EAAcxI,YAAUlC,KAAKD,KAAM,wBAAyB,EAC9D4K,EAAe,KACfvE,IAEFpG,KAAK4K,OAASA,cACXC,OAAO,CACN,CAAC,EAAG,GACJ,CAAC7K,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAIjDhG,KAAK8K,UAAY9K,KAAKD,KAAKsF,MAAMY,aAAaW,WAC3C6C,KAAKzJ,KAAK4K,QAEbD,EAAe3K,KAAK8K,UAAUC,UAAU,gBAGxC/K,KAAK4K,OAAO/D,GAAG,OAAO,WACpB,GAAKmE,IAAQC,UAAb,CAIA,IAAMC,EAAKF,IAAQC,UAAUE,IAAI/E,EAAOc,QAGlCkE,EAAKF,GAAMA,EAAGC,IAAIzD,KAAK0B,OAG7BjD,EAAK2E,UAAUrB,KAAKtD,EAAKyE,OAAOS,KAAM,MACtCV,EAAapB,MAAM,SAAU,QAO7BpD,EAAKpG,KAAKsF,MAAMiG,MAAMC,gBAAgB,CACpCC,YAAaJ,IAGfjF,EAAKpG,KAAKsF,MAAMlF,OAAOsL,SAIvBtF,EAAKpG,MAAQoG,EAAKpG,KAAKsK,OAAOZ,KAAKtD,EAAKpG,KAAKsF,MAAO+F,EAAG,GAAIA,EAAG,SAM9DX,IACFzK,KAAK0L,WAAaC,cAElB3L,KAAK4L,cAAgB5L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC7CC,KAAK,QAAS,kBAGjBxF,KAAK0L,WAAW7E,GAAG,OAAO,WACxB,GAAKmE,IAAQC,UAAb,CAGA9E,EAAKyF,cAAcnC,KAAKtD,EAAKuF,WAAWL,KAAM,MAE9C,IAAMH,EAAKF,IAAQC,UAAUE,IAAIV,EAAWvD,QAGtCkE,EAAKF,GAAMA,EAAGC,IAAIzD,KAAK0B,OAC1BjB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMjF,MAAMmL,gBAAgB,CACpCC,YAAaJ,IAGfjF,EAAKpG,KAAKsF,MAAMlF,OAAOsL,SAGvBvG,YAAWiB,EAAKpG,KAAKwK,WAAapE,EAAKpG,KAAKwK,SAASd,KAAKtD,EAAKpG,KAAKsF,MAAO+F,EAAG,GAAIA,EAAG,SAMrFV,IACF1K,KAAK6L,YAAcF,cAEnB3L,KAAK8L,eAAiB9L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC9CC,KAAK,QAAS,mBAEjBxF,KAAK6L,YAAYhF,GAAG,OAAO,WACzB,GAAKmE,IAAQC,UAAb,CAGA9E,EAAK2F,eAAerC,KAAKtD,EAAK0F,YAAYR,KAAM,MAEhD,IAAMH,EAAKF,IAAQC,UAAUE,IAAIT,EAAYxD,QAGvCkE,EAAKF,GAAMA,EAAGC,IAAIzD,KAAK0B,OAC1BjB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMlD,OAAOoJ,gBAAgB,CACrCC,YAAaJ,IAGfjF,EAAKpG,KAAKsF,MAAMlF,OAAOsL,SAGvBvG,YAAWiB,EAAKpG,KAAKyK,WAAarE,EAAKpG,KAAKyK,SAASf,KAAKtD,EAAKpG,KAAKsF,MAAO+F,EAAG,GAAIA,EAAG,SAKzFT,GAAgB3K,KAAKD,KAAKsF,MAAMY,aAAaC,UAAS,WAEpDyE,EACG9D,GAAG,aAAa,WACf8D,EAAapB,MAAM,SAAU,iBAE9B1C,GAAG,SAAS,WACX8D,EAAapB,MAAM,SAAU,cAGnCvJ,KAAKyL,W,+BAKDzL,KAAK4K,SACP5K,KAAK4K,OAAOC,OAAO,CACjB,CAAC,EAAG,GACJ,CAAC7K,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAG/ChG,KAAK8K,UAAUrB,KAAKzJ,KAAK4K,SAGvB5K,KAAK0L,aACP1L,KAAK0L,WACFb,OAAO,CACN,CAAC,EAAG,GACJ,CAAE7K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAOE,IAAUiG,cAAgB/L,KAAKD,KAAKsF,MAAMW,eAG9EhG,KAAK4L,cACFpG,KAAK,YAAa,aAAeM,IAAUiG,cAAgB,IAAM/L,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAC9F4D,KAAKzJ,KAAK0L,aAGX1L,KAAK6L,cACP7L,KAAK6L,YACFhB,OAAO,CACN,CAAE7K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAa1B,IAAUiG,cAAgB,GACvF,CAAE/L,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAaxH,KAAKD,KAAKsF,MAAMM,OAAOqG,MAAQlG,IAAUiG,cAAgB/L,KAAKD,KAAKsF,MAAMW,eAG1IhG,KAAK8L,eACFtG,KAAK,YAAa,aAAgBM,IAAUiG,cAAiB,IAAM/L,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAChG4D,KAAKzJ,KAAK6L,gB,+BAIPnC,GACRA,IAAaA,EACb1J,KAAK8K,WAAa9K,KAAK8K,UAAUnB,QAAQ,aAAcD,GACvD1J,KAAK4L,eAAiB5L,KAAK4L,cAAcjC,QAAQ,aAAcD,GAC/D1J,KAAK8L,gBAAkB9L,KAAK8L,eAAenC,QAAQ,aAAcD,GACjE1J,KAAKD,KAAKyD,QAAUkG,I,+BAIhB1J,KAAK8K,YACP9K,KAAK8K,UAAUrB,KAAKzJ,KAAK4K,OAAOS,KAAM,MACtCrL,KAAK8K,WAAa9K,KAAK8K,UAAUlB,UAE/B5J,KAAK4L,gBACP5L,KAAK4L,cAAcnC,KAAKzJ,KAAK0L,WAAWL,KAAM,MAC9CrL,KAAK4L,cAAchC,UAEjB5J,KAAK8L,iBACP9L,KAAK8L,eAAerC,KAAKzJ,KAAK6L,YAAYR,KAAM,MAChDrL,KAAK8L,eAAelC,UAEtB5J,KAAKD,KAAO,S,GAxMkB8J,K,QCAboC,E,YAEnB,WAAalM,GAAM,6DAGjB,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACX9B,SAAU,CAACmC,IAAUoG,SAAUpG,IAAUqG,YACzCC,SAAU,KACVC,YAAa,KACbC,YAAa,KACb9I,SAAS,GACRzD,GAEH,IAAMoG,EAAOA,EAGToG,EAAIrK,YAAU,EAAKnC,KAAM,qBACzB,EAAKA,KAAK4D,SAAS6I,QAAQ1G,IAAU2G,UAAY,IACnDF,EAAIrK,YAAU,EAAKnC,KAAM,uBAG3B,IAAI2M,EAAIxK,YAAU,EAAKnC,KAAM,qBApBZ,OAqBb,EAAKA,KAAK4D,SAAS6I,QAAQ1G,IAAU6G,YAAc,IACrDD,EAAIxK,YAAU,EAAKnC,KAAM,uBAG3B,EAAK6M,KAAOA,cAER,EAAK7M,KAAKsM,aAEZ,EAAKO,KACFC,SAAQ,SAAUpL,GACjB,OAAmC,MAA5BA,EAAE0E,EAAKpG,KAAKsM,gBAEpBE,GAAE,SAAU9K,GAEX,OAAO8K,EAAE9K,EAAE0E,EAAKpG,KAAKuM,iBAEtBI,GAAE,SAAUjL,GACX,OAAOiL,EAAEjL,EAAE0E,EAAKpG,KAAKsM,iBAtCV,E,oDA4CjB,IAAMlG,EAAOnG,KACbA,KAAK8M,QAAU9M,KAAKD,KAAKsF,MAAM0H,UAAUhC,UAAU,YAAc/K,KAAKD,KAAK0F,WACxEvF,KAAK,CAACF,KAAKD,KAAKqM,WAChBY,QACAzH,OAAO,KACPC,KAAK,QAAS,wBAA0BxF,KAAKD,KAAK0F,WAErD,IAAMwH,EAAcjN,KAAKD,KAAKsF,MAAMC,UAAUqD,OAAO,gBAErD3I,KAAK8M,QAAQvH,OAAO,QACjBC,KAAK,YAAa,QAAUyH,EAAYzH,KAAK,MAAQ,KACrDA,KAAK,QAAS,WACd+D,MAAM,UAAU,SAAU9H,GACzB,OAAOA,EAAE6C,SAEViF,MAAM,OAAQ,eACdA,MAAM,gBAAgB,SAAU9H,GAC/B,OAAOA,EAAEyL,WAAa,SAEvB1H,KAAK,KAAK,SAAU/D,GACnB,OAAO0E,EAAKyG,KAAKnL,EAAER,a,+BAMvB,IAAMkF,EAAOnG,KACbA,KAAK8M,SAAW9M,KAAK8M,QAAQnE,OAAO,QAAQnD,KAAK,KAAK,SAAU/D,GAC9D,OAAO0E,EAAKyG,KAAKnL,EAAER,a,+BAIbyI,GACRA,IAAaA,EACb1J,KAAK8M,SAAW9M,KAAK8M,QAAQnD,QAAQ,aAAcD,GACnD1J,KAAKD,KAAKyD,QAAUkG,I,+BAKpB,IAAM3H,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QACtCmL,EAAanN,KAAKD,KAAKqM,SAAS7I,KAEtCvD,KAAK8M,SAAW9M,KAAK8M,QAAQlD,SAEzB7H,GAAeA,EAAYoL,IAAepL,EAAYoL,GAAY3J,SACpExD,KAAKoN,S,+BAMPpN,KAAK8M,SAAW9M,KAAK8M,QAAQlD,SAC7B5J,KAAK4M,KAAO,KACZ5M,KAAKD,KAAO,S,GApGkB8J,KCAbwD,E,YACnB,WAAatN,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACX9B,SAAU,CAACmC,IAAUoG,SAAUpG,IAAUqG,YACzCG,YAAa,GACbgB,UAAW,KACXlK,kBAAmB,GACnBI,SAAS,GACRzD,GAEH,IAAMoG,EAAOA,EACPpE,EAAc,EAAKhC,KAAKsF,MAAMiB,QAAQtE,QAE5C,EAAKjC,KAAKwN,gBAAkB,EAAKxN,KAAKqD,kBAAkB4E,QAAO,SAAUwF,GACvE,OAAOzL,EAAYyL,EAAIjK,MAAMC,UAAW,KAEvC2H,KAAI,SAAUqC,GACb,OAAOzL,EAAYyL,EAAIjK,MAAM1B,aAKjC,IAAI0K,EAAIrK,YAAU,EAAKnC,KAAM,qBACzB,EAAKA,KAAK4D,SAAS6I,QAAQ1G,IAAU2G,UAAY,IACnDF,EAAIrK,YAAU,EAAKnC,KAAM,uBAG3B,IAAI2M,EAAIxK,YAAU,EAAKnC,KAAM,qBA5BZ,OA6Bb,EAAKA,KAAK4D,SAAS6I,QAAQ1G,IAAU6G,YAAc,IACrDD,EAAIxK,YAAU,EAAKnC,KAAM,uBAG3B,EAAKA,KAAK0N,QAAU7K,cAEpB,EAAK8K,KAAOA,cACTnB,GAAE,SAAU9K,EAAGkM,GACd,OAAOpB,EAAE9K,EAAEvB,KAAKiG,EAAKpG,KAAKuM,iBAE3BsB,IAAG,SAAUnM,GACZ,OAAOiL,EAAEjL,EAAE,OAEZoM,IAAG,SAAUpM,GACZ,OAAOiL,EAAEjL,EAAE,OA3CE,E,oDAiDjB,IAAM0E,EAAOnG,KACP+B,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QAE5ChC,KAAKD,KAAK0N,QAAQK,KAAK9N,KAAKD,KAAKwN,iBACjCvN,KAAKD,KAAK0N,QAAQM,MAAMC,KACxBhO,KAAKD,KAAK0N,QAAQQ,OAAOC,KAGzB,IAAMC,EAAoBnO,KAAKD,KAAKqD,kBAAkB4E,QAAO,SAAUwF,GACrE,OAAQzL,EAAYyL,EAAIjK,MAAMC,UAAW,KAG3CxD,KAAKoO,WAAapO,KAAKD,KAAKsF,MAAM0H,UAAUhC,UAAU,aAAe/K,KAAKD,KAAK0F,WAC5EvF,KAAKF,KAAKD,KAAK0N,QAAQzN,KAAKD,KAAKuN,YACjCN,QACAzH,OAAO,KACPC,KAAK,QAAS,0BAA4BxF,KAAKD,KAAK0F,WAEvD,IAAMwH,EAAcjN,KAAKD,KAAKsF,MAAMC,UAAUqD,OAAO,gBAGrD3I,KAAKoO,WAAW7I,OAAO,QACpBC,KAAK,YAAa,QAAUyH,EAAYzH,KAAK,MAAQ,KACrDA,KAAK,SAAS,SAAU/D,GAIvB,MAAO,sBAHa0M,EAAkBhI,EAAKpG,KAAKwN,gBAAgBf,QAAQ/K,EAAEY,OAAS,CACjFkB,KAAM,KAEkCA,QAE3CgG,MAAM,QAAQ,SAAU9H,GACvB,IAAM4M,EAAcF,EAAkBhI,EAAKpG,KAAKwN,gBAAgBf,QAAQ/K,EAAEY,OAAS,CACjFkB,KAAM,IAER,OAAOxB,EAAYsM,EAAY9K,MAAMe,SAEtCkB,KAAK,IAAKxF,KAAK0N,Q,+BAMlB1N,KAAKoO,YAAcpO,KAAKoO,WAAWzF,OAAO,QAAQnD,KAAK,IAAKxF,KAAK0N,Q,+BAIjE,IAAM3L,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QAE5ChC,KAAKD,KAAKwN,gBAAkBvN,KAAKD,KAAKqD,kBAAkB4E,QAAO,SAAUwF,GACvE,OAAQzL,EAAYyL,EAAIjK,MAAMC,UAAW,KAExC2H,KAAI,SAAUqC,GACb,OAAOzL,EAAYyL,EAAIjK,MAAM1B,aAIjC7B,KAAKoO,YAAcpO,KAAKoO,WAAWxE,SAEnC5J,KAAKoN,S,+BAGG1D,GACRA,IAAaA,EACb1J,KAAKoO,WAAWzE,QAAQ,aAAcD,GACtC1J,KAAKD,KAAKyD,QAAUkG,I,+BAKpB1J,KAAKoO,YAAcpO,KAAKoO,WAAWxE,SACnC5J,KAAKD,KAAK0N,QAAU,KACpBzN,KAAK0N,KAAO,KACZ1N,KAAKD,KAAO,S,GAzHuB8J,KCAlByE,E,YACnB,WAAavO,GAAM,6DAEjB,EAAKA,KAAOA,EACZ,EAAKwO,WAAa,GAClB,IAAMrO,EAAO,EAAKH,KAAKsF,MAAMiB,QAAQ3E,UAC/BM,EAAW,EAAKlC,KAAKsF,MAAMiB,QAAQnG,OACnC4B,EAAc,EAAKhC,KAAKsF,MAAMiB,QAAQtE,QAN3B,OASjBwM,YAAQvM,EAASW,QAAUX,EAASW,MAAMpB,SAAQ,SAACwB,GACjD,EAAKuL,WAAWrE,KAAK,IAAImD,EAAU,CACjChI,MAAO,EAAKtF,KAAKsF,MACjBI,UAAWzC,EAASyC,WAAazC,EAASO,KAC1CI,SAAUX,EAASW,SACnB2I,YAAa,EAAKvM,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC9CyL,UAAWpN,EACXkD,kBAAmBJ,EAASI,wBAIhCoL,YAAQvM,EAAS2K,OAAS3K,EAAS2K,KAAKpL,SAAQ,SAACwB,GAC/C,EAAKuL,WAAWrE,KAAK,IAAI+B,EAAK,CAC5B5G,MAAO,EAAKtF,KAAKsF,MACjBI,UAAWzC,EAASyC,WAAazC,EAASO,KAC1CI,SAAUX,EAASW,SACnB0I,YAAatK,EAAYiB,EAASO,MAAM1B,UACxCyK,YAAa,EAAKvM,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC9C2B,QAASzB,EAAYiB,EAASO,MAAMC,QACpC4I,SAAU,CACR7I,KAAMP,EAASO,KACfe,MAAOvC,EAAYiB,EAASO,MAAMe,MAClC4I,UAAWnL,EAAYiB,EAASO,MAAM2J,UACtCjM,OAAQf,SAhCG,E,yBADmBuO,GCSnBC,E,YACnB,WAAapJ,EAAWvF,GAQtB,GAR4B,YAC5BA,EAAK4O,UAAY,IAAIC,KAGhB7O,EAAK8O,aACR9O,EAAK8O,WAAa,IAAI/O,EAAcC,MAGhCA,EAAK8O,sBAAsB/J,KAC/B,MAAM,IAAIjE,MAAM,wEATU,+CAatByE,EAAWvF,IAbW,OAgBxB+O,YAAS,EAAKD,aAChB,IAAc,EAAKvI,QAAS,EAAKuI,WAAWE,gBAI9CC,YAAoB,EAAK1I,SAGzB,EAAK2I,iBAEL,KAAa,kBAAM,EAAK7B,UA1BI,E,8DA8B5B,IAAI8B,SACE5M,EAAStC,KAAKsG,QAAQhE,OACtBC,EAAUvC,KAAKsG,QAAQ/D,QACvBX,EAAW5B,KAAKsG,QAAQ1E,SAE1BU,IACF4M,EAAchN,YAAUlC,KAAM,sBAC9BA,KAAKI,MAAQ,IAAI+O,IAAJ,KACX9J,MAAOrF,KACPoP,SAAU,IACVC,OAAQ,OACRC,WAAY,CAACtP,KAAKgG,YAAa,GAC/BwF,YAAalJ,GACV4M,IAELlP,KAAKuP,mBAAmBrF,KAAKlK,KAAKI,QAGhCmC,IACF2M,EAAchN,YAAUlC,KAAM,uBAC9BA,KAAKmC,OAAS,IAAIgN,IAAJ,KACZ9J,MAAOrF,KACPoP,SAAU,IACVC,OAAQ,QACRC,WAAY,CAACtP,KAAKgG,YAAa,GAC/BwF,YAAajJ,GACV2M,IAGLlP,KAAKuP,mBAAmBrF,KAAKlK,KAAKmC,SAGhCP,EAASE,YACXoN,EAAchN,YAAUlC,KAAM,wBAC9BA,KAAKsL,MAAQ,IAAI6D,IAAJ,KACX9J,MAAOrF,KACPoP,SAAU,IACVC,OAAQ,SACRC,WAAY,CAAC,EAAGtP,KAAKwH,YACrBgE,YAAa5J,EAASE,WACnBoN,IAELlP,KAAKuP,mBAAmBrF,KAAKlK,KAAKsL,QAGpC,IAAMkE,EAActN,YAAUlC,KAAM,mBAChCwP,EAAYhM,UACdxD,KAAKyP,QAAU,IAAIC,EAAJ,KACbrK,MAAOrF,MACJwP,IAELxP,KAAKuP,mBAAmBrF,KAAKlK,KAAKyP,UAGpC,IAAME,EAAWzN,YAAUlC,KAAM,eAAgB,KAC5CwP,EAAYhM,SAAWmM,EAASnM,WACnCxD,KAAKiG,aAAe,IAAI6D,EAAa,CACnCzE,MAAOrF,OAETA,KAAKuP,mBAAmBrF,KAAKlK,KAAKiG,eAGhCjG,KAAKsG,QAAQ0D,KAAKxG,UACpBxD,KAAK4P,UAAY,IAAIxF,EAAK,CACxB/E,MAAOrF,KACPqK,OAAQrK,KAAKsG,QAAQ0D,KAAK6F,QAC1BtF,SAAUvK,KAAKsG,QAAQ0D,KAAKO,SAC5BC,SAAUxK,KAAKsG,QAAQ0D,KAAKQ,WAE9BxK,KAAKuP,mBAAmBrF,KAAKlK,KAAK4P,YAGhC5P,KAAKsG,QAAQnG,SACfH,KAAKG,OAAS,IAAImO,EAAW,CAC3BjJ,MAAOrF,OAGTA,KAAKuP,mBAAmBrF,KAAKlK,KAAKG,SAGhCH,KAAKsG,QAAQwJ,OAAOtM,UACtBxD,KAAK+P,QAAU,IAAIC,IAAiB,CAClC3K,MAAOrF,KACPiQ,aAAcjQ,KAAKsG,QAAQwJ,OAAOG,aAClCb,SAAUtJ,IAAU2G,QACpByD,oBAAqBlQ,KAAKsG,QAAQwJ,OAAOI,oBACzCC,eAAgBnQ,KAAKsG,QAAQwJ,OAAOK,iBAEtCnQ,KAAKuP,mBAAmBrF,KAAKlK,KAAK+P,Y,6BAKpCrP,QAAQC,IAAI,uBAAwBX,MACpC,oEACAA,KAAKsG,QAAQ8J,UAAU3G,KAAKzJ,MAG5BA,KAAKqQ,eAELrQ,KAAKsQ,kBAELtQ,KAAKiG,cAAgBjG,KAAKiG,aAAasK,qBAEvCvQ,KAAKwQ,UAAY,IAAI5B,MAClB6B,UAAYzQ,KAAKsG,QAAQqI,UAAU8B,UACtCzQ,KAAKsG,QAAQoK,WAAWjH,KAAKzJ,KAAMA,KAAKwQ,Y,mCAI5BG,GAAe,WAEvBC,SACAC,SACAC,SACA/M,SACAgN,GAAc,EACdC,GAAc,EAEdL,IAAkB7K,IAAUoG,WAC9B8E,GAAc,GAGZL,IAAkB7K,IAAU6G,YAC9BoE,GAAc,GAIhBhN,EAAO7B,YAAUlC,KAAKsG,QAAS,kBAC3BtG,KAAKsG,QAAQhE,QAAUyO,IAAgB,IAAgBhN,KACzD6M,EAAa5Q,KAAKI,MAAM6Q,YAET9P,OAAS,IAEtB0P,EAAUD,EAAW,GAAKA,EAAW,GAErCE,EAAWF,EAAW,GAAKC,EAG3B7Q,KAAKsG,QAAQhE,OAAO,GAAKwO,EAGzB9Q,KAAKI,MAAMmL,gBAAgB,CACzBC,YAAaxL,KAAKsG,QAAQhE,UAKhCyB,EAAO7B,YAAUlC,KAAKsG,QAAS,mBAC3BtG,KAAKsG,QAAQ/D,SAAWyO,IAAgB,IAAgBjN,KAC1D6M,EAAa5Q,KAAKmC,OAAO8O,YAEV9P,OAAS,IACtB0P,EAAUD,EAAW,GAAKA,EAAW,GACrCE,EAAWF,EAAW,GAAKC,EAE3B7Q,KAAKsG,QAAQ/D,QAAQ,GAAKuO,EAG1B9Q,KAAKmC,OAAOoJ,gBAAgB,CAC1BC,YAAaxL,KAAKsG,QAAQ/D,WAMhC,IAAM2O,EAAc,GAChBC,EAAgB,EAEhBnR,KAAKsG,QAAQhE,SACf4O,EAAYpL,IAAUoG,UAAY,GAClCgF,EAAYpL,IAAUoG,UAAUkF,MAAQ,gBACxCF,EAAYpL,IAAUoG,UAAUmF,QAAU,IAGxCrR,KAAKsG,QAAQ/D,UACf2O,EAAYpL,IAAU6G,WAAa,GACnCuE,EAAYpL,IAAU6G,WAAWyE,MAAQ,iBACzCF,EAAYpL,IAAU6G,WAAW0E,QAAU,IAI7C,IAAMC,EAAStR,KAAK0F,IAAIH,OAAO,KAC5BC,KAAK,QAAS,WAzEU,WA2EhB+L,GACQ,EAAKjM,UAAUqD,OAAO,OAASuI,EAAYK,GAAMH,OAAOrG,UAAU,QAC1EyG,MAAK,SAAU7D,GACtB,IAAM8D,EAAW9I,YAAO3I,MAAM0R,QAAU,GACpCD,EAAStQ,OAAS+P,EAAYK,GAAMF,QAAQlQ,SAC9C+P,EAAYK,GAAMF,QAAUI,MAIhCH,EAAOvG,UAAU,cACd7K,KAAK,CAACgR,EAAYK,GAAMF,UACxBrE,QACAzH,OAAO,QACPmM,KAAKC,QACLH,MAAK,SAAU/P,EAAGkM,GAEjBwD,EAAgBnR,KAAK4R,2BAIzB,EAAKjM,OAAO4L,GAAQ7J,KAAK0B,MAAM+H,GAAiBrL,IAAU+L,cApB5D,IAAK,IAAMN,KAAQL,EAAa,EAArBK,GAuBXD,EAAO1H,SAEP5J,KAAKwH,WAAcxH,KAAK8R,eAAezI,MAAQrJ,KAAK2F,OAAOC,KAAO5F,KAAK2F,OAAOqG,MAC9EhM,KAAKyL,a,GAlPoCsG,KAAxBrD,a,oBCdrB,EAAQ,KACRsD,EAAOC,QAAU,EAAQ,IAAuBC,OAAOpE,M,oBCAvD,IAAIqE,EAAW,EAAQ,IACnBC,EAAQ,EAAQ,IAEpB,EAAQ,GAAR,CAAyB,QAAQ,WAC/B,OAAO,SAAcC,GACnB,OAAOD,EAAMD,EAASE,S,+BCN1B,siC,iKCQqBlD,E,YACnB,WAAapP,GAAM,6DAgDjB,GA9CA,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACX2J,SAAU,IACVC,OAAQ,OACRiD,MAAO,GACP3N,KAAM,GACN2K,WAAY,CAAC,EAAG,KAChB9D,YAAa,CAAC,EAAG,KACjB+G,UAAW,GACXC,WAAW,EACXC,WAAY,KACZC,YAAY,EACZC,UAAW,EACXC,eAAe,EACfC,eAAe,EACfC,YAAahN,IAAUiN,aACvBC,aAAclN,IAAUmN,cACxBzP,SAAS,GACRzD,GAEH,EAAKwR,KAAO,KAEgB,cAAxB,EAAKxR,KAAKwS,UACZ,EAAKW,MAAQC,eAEb,EAAKD,MAAQE,cACT,EAAKrT,KAAK4E,OAASmB,IAAUuN,aAC/B,EAAKH,MAAQI,gBAIU,MAAvB,EAAKvT,KAAKqP,WACR,EAAKrP,KAAKsP,SAAWvJ,IAAUqG,WACjC,EAAKoF,KAAOgC,cACH,EAAKxT,KAAKsP,SAAWvJ,IAAU2G,UACxC,EAAK8E,KAAOiC,gBAEkB,IAA5B,EAAKzT,KAAK8S,eACZ,EAAKtB,KAAKkC,eAAgB,EAAK1T,KAAKsF,MAAMW,cAM9C,EAAKiL,WAAa,GAES,MAAvB,EAAKlR,KAAKqP,WACR,EAAKrP,KAAKsP,SAAWvJ,IAAUoG,SACjC,EAAKqF,KAAOmC,cACH,EAAK3T,KAAKsP,SAAWvJ,IAAU6G,YACxC,EAAK4E,KAAOoC,cACZ,EAAKpC,KAAKkC,cAAc,KAEM,IAA5B,EAAK1T,KAAK8S,eACZ,EAAKtB,KAAKkC,eAAgB,EAAK1T,KAAKsF,MAAMmC,YAGxCtC,YAAW,EAAKnF,KAAK6S,gBAAgB,CAEvC,IAAMgB,EAAoB,EAAK7T,KAAK6S,cACpC,EAAK7S,KAAK6S,cAAgB,SAAU3K,GAElC,OADA9B,KAAK8K,WAAW4C,QAAQ5L,GACjB2L,EAAkB3L,IAhEd,OAqEb,EAAKlI,KAAK+S,YAAc,GAC1B,EAAKvB,KAAKuB,YAAY,EAAK/S,KAAK+S,aAtEjB,E,+DA0ES,IAAX/S,EAAW,uDAAJ,GACtB,IAAcC,KAAKD,KAAMA,GACzBC,KAAKyL,W,6BAILzL,KAAK8T,cAAgB,KAEjB9T,KAAKD,KAAKsP,SAAWvJ,IAAUqG,WACjCnM,KAAK8T,cAAL,eAAoC9T,KAAKD,KAAKsF,MAAMW,YAApD,IACShG,KAAKD,KAAKsP,SAAWvJ,IAAU6G,YACxC3M,KAAK8T,cAAL,aAAkC9T,KAAKD,KAAKsF,MAAMmC,WAAlD,OAGFxH,KAAK+T,QAAU/T,KAAKD,KAAKsF,MAAM0H,UAAUxH,OAAO,KAC7CC,KAAK,QADO,mBACqBxF,KAAKD,KAAKsP,OAD/B,YACiDrP,KAAKD,KAAK0F,WAI1EP,YAAWlF,KAAKD,KAAK6S,gBAAkB5S,KAAKuR,KAAKyC,WAAWhU,KAAKD,KAAK6S,eAGlE5S,KAAKD,KAAKuS,QACZtS,KAAKD,KAAKkU,aAAejU,KAAK+T,QAAQxO,OAAO,QAC1CC,KAAK,QAAS,iBACdkM,KAAK1R,KAAKD,KAAKuS,QAGpBtS,KAAKyL,UAGJzL,KAAKD,KAAKyD,SAAWxD,KAAK+T,QAAQpK,QAAQ,aAAa,K,+BAexD,GAVI3J,KAAKD,KAAKsP,SAAWvJ,IAAUqG,aACjCnM,KAAKD,KAAKuP,WAAa,CAAC,EAAGtP,KAAKD,KAAKsF,MAAMmC,aAGzCxH,KAAKD,KAAKsP,SAAWvJ,IAAU6G,YACjC3M,KAAK8T,cAAL,aAAkC9T,KAAKD,KAAKsF,MAAMmC,WAAlD,OAKExH,KAAKD,KAAKuS,MAAO,CACnB,IAAI4B,EAAS,EACTC,EAAS,EACTC,EAAS,EACTpU,KAAKD,KAAKsP,SAAWvJ,IAAUqG,YACjC+H,EAASxM,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMmC,WAAa,GACjD2M,EAASrO,IAAUuO,gBACVrU,KAAKD,KAAKsP,SAAWvJ,IAAUoG,UAAYlM,KAAKD,KAAKsP,SAAWvJ,IAAU6G,YAC/E3M,KAAKD,KAAKsP,SAAWvJ,IAAUoG,UACjCgI,GAAWlU,KAAKD,KAAKsF,MAAMM,OAAOC,KAAQE,IAAUiG,cACpDqI,EAAS,MAETF,EAASlU,KAAKD,KAAKsF,MAAMM,OAAOqG,MAAQlG,IAAUiG,cAClDqI,EAAS,IAEXD,EAASzM,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMW,YAAc,IAEpDhG,KAAKD,KAAKkU,aACPzO,KAAK,YADR,aAEiB0O,EAFjB,IAE2BC,EAF3B,YAE6CC,EAF7C,KAKFpU,KAAKiR,WAAa,GAElB,IAAIzF,EAAc,CAACxL,KAAKD,KAAKyL,YAAY,GAAIxL,KAAKD,KAAKyL,YAAYxL,KAAKD,KAAKyL,YAAYrK,OAAS,IAclG,GAb4B,cAAxBnB,KAAKD,KAAKwS,WACZ/G,EAAcxL,KAAKD,KAAKyL,YACxBxL,KAAKkT,MACFoB,QAAQtU,KAAKD,KAAKiT,eAErBhT,KAAKD,KAAKyS,WAAaxS,KAAKkT,MAAMqB,QAGpCvU,KAAKkT,MAAMsB,MAAMxU,KAAKD,KAAKuP,YACxBmF,OAAOjJ,GAEVxL,KAAKuR,KAAK2B,MAAMlT,KAAKkT,OAEjB7R,YAASrB,KAAKD,KAAK0S,YAAa,CAClC,IAAIiC,EAAU1U,KAAKD,KAAK0S,WACxB,GAA2B,MAAvBzS,KAAKD,KAAKqP,UAAoBpP,KAAKD,KAAK4E,OAASmB,IAAUuN,WAAY,CAEzE,IAAMsB,EAAUjN,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMmC,WAAa,IAClDoN,EAAYlN,KAAKC,OAAO3H,KAAKD,KAAKyL,YAAY,GAAKxL,KAAKD,KAAKyL,YAAY,IAAlD,OAAiF,EAC1GoJ,EAAY,GAAKA,EAAYF,IAC/BA,EAAUE,GAGZ,IAAMC,EAAenN,KAAKC,OAAO3H,KAAKD,KAAKyL,YAAY,GAAKxL,KAAKD,KAAKyL,YAAY,IAAlD,KAC5BqJ,EAAeH,IACjBA,EAAUG,GAGRF,EAAUD,IACZA,EAAUC,GAId3U,KAAKuR,KAAKuD,MAAMJ,QACPxP,YAAWlF,KAAKD,KAAK0S,aAC9BzS,KAAKuR,KAAKuD,MAAM9U,KAAKD,KAAK0S,cAG5BzS,KAAK8T,eAAiB9T,KAAK+T,QAAQvO,KAAK,YAAaxF,KAAK8T,eAEtD9T,KAAKD,KAAK8S,eAAwC,MAAvB7S,KAAKD,KAAKqP,UACvCpP,KAAKuR,KAAKkC,eAAgBzT,KAAKD,KAAKsF,MAAMmC,YAG5CxH,KAAK+T,QAAQtK,KAAKzJ,KAAKuR,MAGvB,IAAMwD,EAAY/U,KAAKD,KAAK4S,UACtBqC,EAAU9P,YAAWlF,KAAKD,KAAK6S,eAAiB5S,KAAKD,KAAK6S,cAAgBtI,IAEnD,UAAzBtK,KAAKD,KAAK2S,WACZ1S,KAAK+T,QACFhJ,UAAU,QACVxB,MAAM,cAAe,OACrB/D,KAAK,IAAK,KACVA,KAAK,KAAM,UACXA,KAAK,KAAM,SACXA,KAAK,YAAa,eAClBkM,MAAK,SAAUjQ,EAAGkM,GACjB,OAAOsH,YAAaD,EAAQvT,GAAIsT,MAEF,aAAzB/U,KAAKD,KAAK2S,YACnB1S,KAAK+T,QACFhJ,UAAU,QACVvF,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,YAAa,cAClB+D,MAAM,cAAe,SACrBmI,MAAK,SAAUjQ,EAAGkM,GACjB,OAAOsH,YAAaD,EAAQvT,GAAIsT,Q,+BAK9BrL,GACRA,IAAaA,EACb1J,KAAK+T,SAAW/T,KAAK+T,QAAQpK,QAAQ,aAAcD,GACnD1J,KAAKD,KAAKkU,cAAgBjU,KAAKD,KAAKkU,aAAatK,QAAQ,aAAcD,GACvE1J,KAAKD,KAAKyD,QAAUkG,I,+BAKpB1J,KAAKD,KAAKkU,cAAgBjU,KAAKD,KAAKkU,aAAarK,SACjD5J,KAAK+T,SAAW/T,KAAK+T,QAAQnK,SAC7B5J,KAAKkT,MAAQ,KACblT,KAAKuR,KAAO,KACZvR,KAAKD,KAAO,S,GA1OkB8J,KAAbsF,O,2JCJA4C,E,YACnB,WAAazM,EAAWvF,GAAM,6DAE5B,GAAImV,YAAS5P,IAAcwJ,YAAS/O,IAASuF,EAAUnE,QAAU2N,YAAS/O,EAAK8O,YAAa,CAE1F,GADA,EAAKvJ,UAAYqD,YAAOrD,IACnB,EAAKA,UAAU6P,OAClB,MAAM,IAAItU,MAAM,iFAElBd,EAAKqV,cAAgB9P,EAErB,IAAM+P,EAAenM,YAAc,EAAK5D,WAEpCgQ,GAAqB,EACpB,IAAgBvV,EAAKsF,MAAMgE,SAC9BtJ,EAAKsF,MAAMgE,MAAQgM,EAAahM,MAChCiM,GAAqB,GAGvB,IAAIC,GAAsB,EACrB,IAAgBxV,EAAKsF,MAAMiE,UAC9BvJ,EAAKsF,MAAMiE,OAAS+L,EAAa/L,OACjCiM,GAAsB,GAGpBxV,EAAKsF,MAAMgE,MAAQtJ,EAAKsF,MAAMmQ,WAChCzV,EAAKsF,MAAMgE,MAAQtJ,EAAKsF,MAAMmQ,UAG5BzV,EAAKsF,MAAMgE,MAAQtJ,EAAKsF,MAAMoQ,WAChC1V,EAAKsF,MAAMgE,MAAQtJ,EAAKsF,MAAMoQ,UAGhC,EAAKnP,QAAUvG,EAEf,EAAKiG,YAAcjG,EAAKsF,MAAMiE,OAC9B,EAAK9B,WAAazH,EAAKsF,MAAMgE,MAC7B,EAAK1D,OAAS5F,EAAKsF,MAAMM,OACzB,EAAK+P,UAAY3V,EAAKsF,MAAMqQ,UAExBJ,IACF,EAAK9N,WAAa,EAAKA,YAAc,EAAK7B,OAAOC,KAAO,EAAKD,OAAOqG,QAGlEuJ,IACF,EAAKvP,YAAc,EAAKA,aAAe,EAAKL,OAAOE,IAAM,EAAKF,OAAOgQ,SAIvE,EAAK9G,WAAa9O,EAAK8O,kBAGhB,EAAKvI,QAAQuI,WAEpB,EAAKiD,eAAiB,CACpBzI,MAAO,EAAK7B,WAAa,EAAK7B,OAAOC,KAAO,EAAKD,OAAOqG,MACxD1C,OAAQ,EAAKtD,YAAc,EAAKL,OAAOE,IAAM,EAAKF,OAAOgQ,QAK3D,EAAKpG,mBAAqB,GAE1B,EAAK7J,IAAM,EAAKJ,UAAUqD,OAAO,OAET,IAApB,EAAKjD,IAAIyP,SAEX,EAAKzP,IAAM,EAAKJ,UAAUC,OAAO,QAInC,EAAKG,IAAI8D,KAAK,IAEd,EAAK9D,IACFF,KAAK,QAAS,EAAKsM,eAAezI,OAClC7D,KAAK,SAAU,EAAKsM,eAAexI,QACnC9D,KAAK,QAAS,UAAYzF,EAAKsF,MAAMI,WAGxC,EAAKC,IAAIH,OAAO,QACbA,OAAO,YACPC,KAAK,KAFR,cAE4B,EAAKc,QAAQjB,MAAMuQ,SAC5CrQ,OAAO,QACPC,KAAK,QAAS,EAAKgC,YACnBhC,KAAK,SAAU,EAAKQ,aAGvB,EAAK+G,UAAY,EAAKrH,IAAIH,OAAO,KAC9BC,KAAK,YAAa,aAAe,EAAKG,OAAOC,KAAO,IAAM,EAAKD,OAAOE,IAAM,KAC5EL,KAAK,QAAS,gBAvFS,S,oDA4F5B9E,QAAQC,IAAI,aAAcX,MAE1BA,KAAKuP,mBAAmB/N,SAAQ,SAAUqU,GACpCA,aAAqBhM,KACvBgM,EAAUzI,Y,+BAMdpN,KAAK0F,IAAIF,KAAK,QAASxF,KAAK8R,eAAezI,OAC3CrJ,KAAK+M,UAAUvH,KAAK,YAAa,aAAexF,KAAK2F,OAAOC,KAAO,IAAM5F,KAAK2F,OAAOE,IAAM,KAC3F7F,KAAK0F,IAAIiD,OAAO,YAAYA,OAAO,QAAQnD,KAAK,QAASxF,KAAKwH,YAE9D9G,QAAQC,IAAI,eAAgBX,MAE5BA,KAAKuP,mBAAmB/N,SAAQ,SAAUqU,GACpCA,aAAqBhM,KACvBgM,EAAUpK,c,+BAKN/B,GACRhJ,QAAQC,IAAI,iBAAkBX,MAC9B0J,IAAaA,EACb1J,KAAKuP,mBAAmB/N,SAAQ,SAAUqU,GACpCA,aAAqBhM,KACvBgM,EAAU9M,SAASW,Q,+BAMvBhJ,QAAQC,IAAI,eAAgBX,MAC5BA,KAAKuP,mBAAmB/N,SAAQ,SAAUqU,GACpCA,aAAqBhM,KACvBgM,EAAUjM,c,wCAMG,WACjB,GAAI5J,KAAKsG,QAAQjB,MAAMyQ,YAAa,CAClC9V,KAAK+V,eAAiBC,aAAS,SAAC3M,EAAOC,GACjCD,IAAU,EAAKyI,eAAezI,QAGlC,EAAKyI,eAAezI,MAAQ3B,KAAKC,MAAM0B,GACvC,EAAKyI,eAAexI,OAAS5B,KAAKC,MAAM2B,GACxC,EAAK9B,WAAa,EAAKsK,eAAezI,OAAS,EAAK1D,OAAOC,KAAO,EAAKD,OAAOqG,OAC9E,EAAKhG,YAAc,EAAK8L,eAAexI,QAAU,EAAK3D,OAAOE,IAAM,EAAKF,OAAOgQ,QAC/EM,YAAW,kBAAM,EAAKxK,WAAU,MAC/B,KAGH,IAAMyK,EAAU,OAASlW,KAAKsG,QAAQjB,MAAM8Q,IAAMnW,KAAKsG,QAAQjB,MAAMuQ,SACrEjN,YAAOyN,QAAQvP,GAAG,UAAYqP,GAAS,kBAAM,EAAKG,sB,sCAMpD,IAAMhB,EAAenM,YAAclJ,KAAKsF,WACpCgR,EAAoBjB,EAAahM,MAEjCiN,EAAoBtW,KAAKsG,QAAQjB,MAAMmQ,WACzCc,EAAoBtW,KAAKsG,QAAQjB,MAAMmQ,UAGrCc,EAAoBtW,KAAKsG,QAAQjB,MAAMoQ,WACzCa,EAAoBtW,KAAKsG,QAAQjB,MAAMoQ,UAGzCzV,KAAK+V,eAAeO,EAAmBjB,EAAa/L,U,8BAI7CiN,GAGP,GAFAA,IAAgBA,EAEZvW,KAAKsG,QAAQjB,MAAMyQ,YAAa,CAClC,IAAMI,EAAU,OAASlW,KAAKsG,QAAQjB,MAAM8Q,IAAMnW,KAAKsG,QAAQjB,MAAMuQ,SACrEjN,YAAOyN,QAAQvP,GAAG,UAAYqP,EAAS,MAUzC,OANAlW,KAAK4J,SAGL2M,GAAevW,KAAK0F,IAAIkE,SACxB2M,GAAevW,KAAKsF,UAAUsE,SAEvB,S,GA3LwBC,KAAdkI,O,iMCAd,SAASyE,EAAwBzW,GAwCtC,OAtCAA,EAAKsF,MAAQ,IAAc,CACzByQ,aAAa,EACbnP,eAAe,EACflB,UAAW,GACX+P,aACAC,SAAU,GACT1V,EAAKsF,OACRtF,EAAKsF,MAAMuQ,QAAUa,cAErB1W,EAAK0P,QAAU,IAAc,CAC3BjM,SAAS,EACT2B,QAAQ,GACNpF,EAAK0P,SAAW,IAEpB1P,EAAK+P,OAAS,IAAc,CAC1BtM,SAAS,EACTyM,aAAc,GACdb,SAAUtJ,IAAU2G,SAClB1M,EAAK+P,QAAU,IAEd5K,YAAWnF,EAAKqQ,aACnBrQ,EAAKqQ,UAAY,SAAUsG,GACzB,OAAOA,IAINxR,YAAWnF,EAAK2Q,cACnB3Q,EAAK2Q,WAAa,SAAUiG,GAC1BjW,QAAQC,IAAR,oBAAgCZ,EAAKqV,cAArC,oBAAsEuB,EAAtE,SAICzR,YAAWnF,EAAKa,WACnBb,EAAKa,QAAU,SAAUgW,GACvBlW,QAAQC,IAAR,kCAA8CZ,EAAKqV,cAAnD,IAAqEwB,KAIlE7W,EAGF,SAAS8W,EAAoB5O,GAA8B,IAAzBtD,EAAyB,uDAAlB,GAAImS,EAAc,uDAAH,EAE7D,GAAI7O,EADgB,IACG,CACrB,IAAM8O,EAAOC,YAAqB/O,EAFhB,IAEmC6O,GACrD,OAAIC,EAHc,IAIHC,YAAqBD,EAJlB,IAIsCD,GACtD,KAAmBnS,EAEXoS,EAAV,KAAmBpS,EAErB,OAAUqS,YAAqB/O,EAAK6O,GAApC,IAAiDnS,EAI5C,SAASqK,EAAqBjP,GASnC,GAPAA,EAAKuL,MAAQ,IAAc,CACzBqK,OAAQ,CACNhR,KAAMmB,IAAUuN,WAChB7P,SAAS,IAETzD,EAAKuL,OAAS,KAEbpG,YAAWnF,EAAKuL,MAAMqK,OAAO/C,eAAgB,CAChD,IAAMhR,EAAW7B,EAAK6B,SAEhBqV,EAAUrV,EAASE,UAAUX,OAG7B+V,EAFWtV,EAASE,UAAUmV,EAAU,GAAKrV,EAASE,UAAU,GAE1CgE,IAAUqR,mBAAsBC,YAAW,SAAWA,YAAW,YAC7FrX,EAAKuL,MAAMqK,OAAO/C,cAAgB,SAACyE,GACjC,OAAOH,EAAQG,IAqCnB,GAhCKtX,EAAKK,QACRL,EAAKK,MAAQ,CACXwF,KAAM,KAIN7F,EAAKK,MAAMwF,OACb7F,EAAKK,MAAMwF,KAAO,IAAc,CAC9BjB,KAAMmB,IAAUwR,UAChB9U,IAAK,EACLgB,SAAS,GACRzD,EAAKK,MAAMwF,OAGZ7F,EAAKK,MAAM4L,QACbjM,EAAKK,MAAM4L,MAAQ,IAAc,CAC/BrH,KAAMmB,IAAUwR,UAChB9U,IAAK,EACLgB,SAAS,GACRzD,EAAKK,MAAM4L,QAGhBjM,EAAKiK,KAAO,IAAc,CACxBxG,SAAS,GACPzD,EAAKiK,MAAQ,IAGjBjK,EAAK0P,QAAU,IAAc,CAC3BjM,SAAS,EACT2B,QAAQ,GACNpF,EAAK0P,SAAW,KAEfvK,YAAWnF,EAAK0P,QAAQtK,QAAS,CACpC,IAAMoS,EAAaH,YAAW,sBAC9BrX,EAAK0P,QAAQtK,OAAS,SAAU1D,GAC9B,IAAKA,IAAM+M,YAAQ/M,GACjB,MAAO,GAET,IAAMO,EAAUhC,KAAKsG,QAAQtE,QACvBJ,EAAW5B,KAAKsG,QAAQ1E,SACxB4V,EAAaxX,KAAKsG,QAAQgF,MAAMkM,YAAc,GAC9CpX,EAAQJ,KAAKsG,QAAQlG,MAEvBqX,EAAWA,oFAEPF,EAAW9V,EAAEG,EAASC,YAF1B,IAEyC2V,EAFzC,2BAKJ,IAAK,IAAMnV,KAAOL,EAAS,CACzB,IAAMiG,EAAMxG,EAAEO,EAAQK,GAAKR,WAC3B,GAAKG,EAAQK,GAAKmB,UAAWkU,MAAMzP,GAAnC,CAKA,IACM9C,EADU/E,EAAM4B,EAAQK,GAAKsB,SAAS,IACrBwB,QAAU0R,EAEjCY,iFAEoCzV,EAAQK,GAAKiC,MAFjD,YAEkEtC,EAAQK,GAAKkB,KAF/E,4DAKM4B,EAAO8C,EAAKjG,EAAQK,GAAKsC,MAL/B,kCAYF,OAFA8S,GAAY,oBAQhB,OAFAjB,EAAuBzW,GAEhBA,EAGF,SAAS4X,EAAqB5X,GA0FnC,OAxFAA,EAAKuL,MAAQ,IAAc,CACzBqK,OAAQ,CACNhR,KAAMmB,IAAUwR,UAChB9T,SAAS,IAETzD,EAAKuL,OAAS,IAIbvL,EAAKK,QACRL,EAAKK,MAAQ,CACXwF,KAAM,KAIN7F,EAAKK,MAAMwF,OACb7F,EAAKK,MAAMwF,KAAO,IAAc,CAC9BjB,KAAMmB,IAAUwR,UAChB9U,IAAK,EACLgB,SAAS,GACRzD,EAAKK,MAAMwF,OAGZ7F,EAAKK,MAAM4L,QACbjM,EAAKK,MAAM4L,MAAQ,IAAc,CAC/BrH,KAAMmB,IAAUwR,UAChB9U,IAAK,EACLgB,SAAS,GACRzD,EAAKK,MAAM4L,QAGhBjM,EAAKiK,KAAO,IAAc,CACxBxG,SAAS,GACPzD,EAAKiK,MAAQ,IAIjBjK,EAAK0P,QAAU,IAAc,CAC3BjM,SAAS,EACT2B,QAAQ,GACNpF,EAAK0P,SAAW,IAEfvK,YAAWnF,EAAK0P,QAAQtK,UAC3BpF,EAAK0P,QAAQtK,OAAS,SAAU1D,GAC9B,IAAImW,EAAUnW,EAId,GAHIA,GAAKA,EAAEwG,MACT2P,EAAUnW,EAAEwG,MAETuG,YAAQoJ,GACX,MAAO,GAET,IAAM5V,EAAUhC,KAAKsG,QAAQtE,QACvBJ,EAAW5B,KAAKsG,QAAQ1E,SACxBxB,EAAQJ,KAAKsG,QAAQlG,MAEvBqX,EAAWA,oFAEPG,EAAQhW,EAASC,WAFrB,2BAKJ,IAAK,IAAMQ,KAAOL,EAAS,CACzB,IAAMiG,EAAM2P,EAAQ5V,EAAQK,GAAKR,WACjC,GAAKG,EAAQK,GAAKmB,UAAWkU,MAAMzP,GAAnC,CAKA,IACM9C,EADU/E,EAAM4B,EAAQK,GAAKsB,SAAS,IACrBwB,QAAU0R,EAEjCY,iFAEoCzV,EAAQK,GAAKiC,MAFjD,qEAKMa,EAAO8C,EAAKjG,EAAQK,GAAKsC,MAL/B,kCAYF,OAFA8S,GAAY,qBAMhBjB,EAAuBzW,GAEhBA,EAGF,SAAS8X,EAAqB9X,GAmCnC,OAhCAA,EAAK0P,QAAU,IAAc,CAC3BjM,SAAS,EACT2B,QAAQ,GACNpF,EAAK0P,SAAW,IAEfvK,YAAWnF,EAAK0P,QAAQtK,UAC3BpF,EAAK0P,QAAQtK,OAAS,SAAU1D,GAC9B,IAAKA,IAAMA,EAAEqW,MACX,MAAO,GAET,IAAMC,EAAS/X,KAAKsG,QAAQnG,OAAO6X,IAC7B7S,EAAS4S,EAAO5S,QAAU0R,EAC1BoB,EAAajB,YAAsBvV,EAAEqW,MAAQC,EAAOG,MAAS,IAAK,GAExE,gJAGyDzW,EAAE6C,MAH3D,YAG4E7C,EAAE8B,KAH9E,0CAI4B0U,EAJ5B,iGAOwC9S,EAAO1D,EAAEqW,MAAOC,EAAOpT,MAP/D,+EAcJ6R,EAAuBzW,GAEvBA,EAAK+P,OAAOV,SAAWtJ,IAAU6G,UAE1B5M,I,oHChSY0O,E,YACnB,WAAa1O,GAAM,8D,oDAKjBC,KAAKuO,WAAW/M,SAAQ,SAAU2W,GAChCA,EAAO/K,Y,+BAKTpN,KAAKuO,WAAW/M,SAAQ,SAAU2W,GAChCA,EAAO1M,c,+BAID/B,GACR1J,KAAKuO,WAAW/M,SAAQ,SAAU2W,GAChCA,EAAOpP,SAASW,Q,+BAMlB1J,KAAKuO,WAAW/M,SAAQ,SAAU2W,GAChCA,EAAOC,c,+BAKTpY,KAAKuO,WAAW/M,SAAQ,SAAU2W,GAChCA,EAAOvO,YAET5J,KAAKuO,WAAa,KAClBvO,KAAKD,KAAO,S,SAnCoB8J,GAAf4E,O,mBCFrBuD,EAAOC,QAAU,CAAE,QAAW,EAAQ,KAAmCoG,YAAY,I,kLCKhErI,E,YACnB,WAAajQ,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxBmQ,qBAAqB,GACpBnQ,GAEH,IAAMoG,EAAOA,EACb,EAAKpG,KAAKuY,eAAiB,EAC3B,EAAKvY,KAAKwY,aAAe,GAGzB,IACMxW,EADe,EAAKhC,KAAKsF,MAAMiB,QACJtE,QAC3BwW,EAAgB,IAAYzW,GAC9B0W,EAAO,EACLC,EAAY,GACdC,SAEErH,EAAS,EAAKvR,KAAKsF,MAAMK,IAAIH,OAAO,KAlBzB,OAoBjB+L,EAAOvG,UAAU,cACd7K,KAAKsY,GACLxL,QACAzH,OAAO,QACPC,KAAK,QAAS,mBACd+D,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrBmI,MAAK,SAAUjQ,GACd,OAAQ0E,EAAKpG,KAAKkQ,cAAgBlO,EAAYN,GAAKM,EAAYN,GAAG8B,KAAO,OAE1EiO,MAAK,SAAU/P,EAAGkM,GAEjB,IAAMiL,EAAYlR,KAAK0B,MAAMpJ,KAAK4R,yBAC9BgH,EAAYzS,EAAKpG,KAAKuY,iBACxBnS,EAAKpG,KAAKuY,eAAiBM,EAC3BD,EAAelX,GAEjBiX,EAAUxO,KAAK0O,MAInBF,EAAUlX,SAAQ,SAAUgM,GAC1BiL,GAAQjL,EACRrH,EAAKpG,KAAKwY,aAAarO,KAAKuO,MAI9B,EAAK1Y,KAAK8Y,cAAgBF,EAAaxX,OAAS,IAEhDmQ,EAAO1H,SAjDU,E,oDAsDjB,IAAMzD,EAAOnG,KACP8Y,EAAe9Y,KAAKD,KAAKsF,MAAMiB,QACjCyS,EAAezO,IACbvI,EAAc+W,EAAa9W,QAC3BwW,EAAgB,IAAYzW,GAC5BiX,EAAUtR,KAAKC,MAA8C,GAAxC3H,KAAKD,KAAKsF,MAAMyM,eAAexI,OAAc,KACpE2P,EAAWT,EAAcrX,OAAS2E,IAAUoT,eAChDD,EAAWA,EAAWD,EAAUA,EAAUC,EAC1C,IAAME,EAAWnZ,KAAKD,KAAKuY,eAAiBxS,IAAUsT,kBAEtDpZ,KAAKD,KAAKsZ,UAAY,CACpBhQ,MAAO8P,EACP7P,OAAQ2P,GAKLjZ,KAAKD,KAAKmQ,sBAEb6I,EAAe,SAAU5L,GACvB,IAAImM,EAAgB,EAChBC,SAEJ,GAAIxX,EAAYoL,IAAepL,EAAYoL,GAAY3J,QAAS,CAE9D,IAAK+V,KAAYxX,EACfA,EAAYwX,GAAU/V,SAAW8V,IAGnC,GAAIA,GAAiB,EACnB,OAIJ,IAAIE,SAGAC,SAOJ,GALI1X,GAAeA,EAAYoL,KAC7BsM,EAAkB1X,GAIhB0X,EAAiB,CAEnBA,EAAgBtM,GAAY3J,SAAWiW,EAAgBtM,GAAY3J,QAE/DiW,EAAgBtM,GAAYxJ,SAAS,KAAOmC,IAAUoG,UAGxD,IAAc/F,EAAKpG,KAAKsF,MAAMiB,QAASH,EAAKpG,KAAKsF,MAAMwJ,WAAWrO,sBAElEgZ,EAAa1T,IAAUoG,SAEvB/F,EAAKpG,KAAKsF,MAAMjF,MAAMmL,gBAAgB,CACpCC,YAAasN,EAAaxW,UAGnBmX,EAAgBtM,GAAYxJ,SAAS,KAAOmC,IAAU6G,YAG/D,IAAcxG,EAAKpG,KAAKsF,MAAMiB,QAASH,EAAKpG,KAAKsF,MAAMwJ,WAAWrO,sBAElEgZ,EAAa1T,IAAU6G,UAEvBxG,EAAKpG,KAAKsF,MAAMlD,OAAOoJ,gBAAgB,CACrCC,YAAasN,EAAavW,WAK9B4D,EAAKpG,KAAKsF,MAAMgL,aAAamJ,GAG7BrT,EAAKpG,KAAKsF,MAAMlF,OAAOiY,SAEvB,IAAMsB,EAAQD,EAAgBtM,GAAY3J,QAE1CmF,YAAO3I,MACJ2J,QAAQ,kBAAmB+P,GAE9BxU,YAAWiB,EAAKpG,KAAKoQ,iBAAmBhK,EAAKpG,KAAKoQ,eAAe1G,KAAKtD,EAAKpG,KAAKsF,MAAOoU,EAAgBtM,GAAauM,MAM1H1Z,KAAK2Z,cAAgB3Z,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC7CC,KAAK,QAAS,mBACdA,KAAK,YAAa,oBAErBxF,KAAK4Z,YAAc5Z,KAAK2Z,cACrB5O,UAAU,KACV7K,KAAKsY,GACLxL,QACAzH,OAAO,KACPC,KAAK,aAAa,SAAU/D,EAAGkM,GAE9B,OAAIxH,EAAKpG,KAAKqP,WAAatJ,IAAU2G,QAE5B,cADGtG,EAAKpG,KAAKwY,aAAa5K,EAAI,GAAMxH,EAAKpG,KAAKwY,aAAa5K,EAAI,GAAK7H,IAAU+T,aAAelM,EAAK,GAC/E,OACjBxH,EAAKpG,KAAKqP,WAAatJ,IAAU6G,UAGnC,gBADGgB,EAAI7H,IAAUoT,eACK,SAHxB,KAMR1T,KAAK,SAAS,SAAU/D,GACvB,MAAO,uBAAyBA,KAEjCkI,QAAQ,kBAAkB,SAAUlI,EAAGkM,GACtC,QAAQ5L,EAAYN,KAAMM,EAAYN,GAAG+B,WAI7CxD,KAAK4Z,YACF/S,GAAG,QAASmP,YAAS+C,EAAc,IAAK,CACvCe,UAAU,KAId9Z,KAAK4Z,YAAYrU,OAAO,QACrBC,KAAK,QAAS,mBACdA,KAAK,IAAKM,IAAUiU,eACpBvU,KAAK,IAAKM,IAAUkU,eACpBzQ,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrBmI,MAAK,SAAUjQ,GACd,IAAIwY,EAAW9T,EAAKpG,KAAKkQ,cAAgBlO,EAAYN,GAAKM,EAAYN,GAAG8B,KAAO,IAIhF,OAHI4C,EAAKpG,KAAKma,aAAe/T,EAAKpG,KAAK8Y,cAAgBoB,EAAQ9Y,SAC7D8Y,EAAUA,EAAQE,UAAU,EAAGhU,EAAKpG,KAAK8Y,eAAiB,OAErDoB,KAIXja,KAAK4Z,YAAYrU,OAAO,QACrBC,KAAK,QAAS,iBACdA,KAAK,IAAK,GACVA,KAAK,QAASM,IAAUsU,kBACxB5U,KAAK,SAAUM,IAAUsU,kBACzB7Q,MAAM,UAAU,SAAU9H,GACzB,OAAOM,EAAYN,GAAKM,EAAYN,GAAG6C,MAAQ,MAEhDiF,MAAM,eAAgB,OACtBA,MAAM,QAAQ,SAAU9H,GACvB,OAAOM,EAAYN,GAAKM,EAAYN,GAAG6C,MAAQ,MAGnDtE,KAAKD,KAAKsa,sBAAwB3S,KAAK0B,MAAMpJ,KAAK2Z,cAAcW,OAC7DC,UACAlR,OAEHrJ,KAAKyL,W,+BAML,IAAMtF,EAAOnG,KACPwa,EAAaxa,KAAKD,KAAKsF,MAAMC,UAAUyF,UAAU,wBACnD0P,EAAaza,KAAKD,KAAKuY,eAAiBtY,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMM,OAAOqG,MAEjG,GAAIhM,KAAKD,KAAKqP,WAAatJ,IAAU6G,UAAW,CAE9C8N,GAAc3U,IAAUsT,kBACxB,IAAIsB,EAAY5U,IAAU6U,gBACtB3a,KAAKD,KAAKuY,iBAAmBxS,IAAU8U,mBACzCF,EAAY5U,IAAU6U,gBAAkB,IAE1C,IAAIE,EAAanT,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMmC,WAAakT,EAAY,KACjEI,EAAQ9a,KAAKD,KAAKsF,MAAMmC,WAAaqT,EAEzCA,GADAC,EAAQpT,KAAKC,OAAOmT,EAAQ9a,KAAKD,KAAKsZ,UAAUhQ,OAAS,GAGzD,IAAM0R,EAAarT,KAAKC,OAAO3H,KAAKD,KAAKsF,MAAMyM,eAAexI,OAAStJ,KAAKD,KAAKsZ,UAAU/P,QAAU,GAErGtJ,KAAK2Z,cACFnU,KAAK,YAAa,aAAeqV,EAAa,IAAME,EAAa,KAItE,IAAMC,EAAQhb,KAAKD,KAAKsF,MAAMK,IAE1B1F,KAAKD,KAAKqP,WAAatJ,IAAU2G,UACnCgO,EAAa3U,IAAU+T,aAAe1T,EAAKpG,KAAKwY,aAAapX,OAAS2E,IAAUmV,uBAE3Ejb,KAAKD,KAAKsa,sBAAwBvU,IAAUoV,oBAAuB/U,EAAKpG,KAAKsF,MAAMmC,YAEtFwT,EAAMjQ,UAAU,cACbyG,MAAK,WACJ,IAAMrE,EAAaxE,YAAO3I,MAAM2I,OAAO,QAAQa,OAC/Cb,YAAO3I,MAAM2I,OAAO,QACjBa,KAAK,IACLjE,OAAO,aACPmM,KAAKvE,MAEZqN,EAAW7Q,QAAQ,aAAa,GAE5BxD,EAAKpG,KAAKsF,MAAMmC,WAAaiT,EAE/Bza,KAAK4Z,YACFpU,KAAK,aAAa,SAAU/D,EAAGkM,GAE9B,MAAO,eADGA,EAAI7H,IAAUoT,eACI,OAIhClZ,KAAK4Z,YACFpU,KAAK,aAAa,SAAU/D,EAAGkM,GAE9B,MAAO,aADG7H,IAAU+T,aAAelM,EACT,YAKhC3N,KAAK4Z,YACFpU,KAAK,aAAa,SAAU/D,EAAGkM,GAE9B,MAAO,cADGxH,EAAKpG,KAAKwY,aAAa5K,EAAI,GAAMxH,EAAKpG,KAAKwY,aAAa5K,EAAI,GAAK7H,IAAU+T,aAAelM,EAAK,GAC/E,UAGzB3N,KAAKD,KAAKma,cACbc,EAAMjQ,UAAU,cACbyG,MAAK,WACJ7I,YAAO3I,MAAM2I,OAAO,QACjBa,KAAK,OAEZgR,EAAW7Q,QAAQ,aAAa,Q,+BAO9BD,GACRA,IAAaA,EACb1J,KAAKD,KAAKyD,QAAUkG,EACpB1J,KAAK2Z,eAAiB3Z,KAAK2Z,cAAchQ,QAAQ,aAAcD,K,+BAI/D1J,KAAK4Z,aAAe5Z,KAAK4Z,YAAYhQ,SACrC5J,KAAK2Z,eAAiB3Z,KAAK2Z,cAAc/P,SACzC5J,KAAKD,KAAO,S,GA5S8B8J,KAAzBmG","file":"timeseries.min.js","sourcesContent":["import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getDateFromEpoc, getObject, refineString, isNumber, isDate, isBoolean} from '@/utils'\n\nexport default class BasicTSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while timeseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on timeseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    // Find seconds in unitArr to find the timeStampIndex\n    const timeStampIndex = 0\n    const firstTime = data[0][timeStampIndex]\n    if (!validJSONType || !(isNumber(firstTime) || isDate(firstTime))) {\n      throw new Error('Invalid Time series JSON received')\n    }\n\n    let start = 0\n    data.forEach(function (d) {\n      if (start > d[timeStampIndex]) {\n        throw new Error('Invalid Time series JSON received: Timestamp Values must be in ascending order')\n      }\n      start = d[timeStampIndex]\n      d[timeStampIndex] = getDateFromEpoc(d[timeStampIndex], true) // convert EPOC to date\n    })\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: [seriesData[0][dataIndex], seriesData[(seriesData.length - 1)][dataIndex]]\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let findEachPlotRange = false\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if ((yAxis && !yRange) || (yAxis2 && !yRange2)) {\n\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if ((plotInfo.stack && plotInfo.stack.length) || findEachPlotRange) {\n\n        if (findEachPlotRange) {\n          // Reset range for each plot for finding min , max\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            eachPlot.minVal = Infinity\n            eachPlot.maxVal = -Infinity\n          }\n        }\n\n        // Reset stack range for each stack for finding min , max\n        plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n          plotData.valueRange = [Infinity, -Infinity]\n        })\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          if (findEachPlotRange) {\n            for (const plot in eachPlotSet) {\n              const eachPlot = eachPlotSet[plot]\n              valData = d[eachPlot.dataIndex]\n              if (valData < eachPlot.minVal) {\n                eachPlot.minVal = valData\n              }\n              if (valData > eachPlot.maxVal) {\n                eachPlot.maxVal = valData\n              }\n            }\n          }\n\n          plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n            const memberArr = plotData.stackOrderMembers\n            let sum = 0\n            memberArr.forEach(function (member) {\n              sum += (eachPlotSet[member.name].visible ? d[eachPlotSet[member.name].dataIndex] : 0)\n            })\n\n            if (sum < plotData.valueRange[0]) {\n              plotData.valueRange[0] = sum\n            }\n            if (sum > plotData.valueRange[1]) {\n              plotData.valueRange[1] = sum\n            }\n          })\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'line') {\n          plotInfo[key].forEach(function (plotData) {\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'left' && eachPlotSet[plotData.name].maxVal > allMax) {\n              allMax = eachPlotSet[plotData.name].maxVal\n            }\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'right' && eachPlotSet[plotData.name].maxVal > allMax2) {\n              allMax2 = eachPlotSet[plotData.name].maxVal\n            }\n          })\n        } else if (key === 'stack') {\n          plotInfo[key].forEach(function (plotData) {\n            if (plotData.plotAxis[0] === 'left' && plotData.valueRange[1] > allMax) {\n              allMax = plotData.valueRange[1]\n            }\n            if (plotData.plotAxis[0] === 'right' && plotData.valueRange[1] > allMax2) {\n              allMax2 = plotData.valueRange[1]\n            }\n          })\n        }\n      }\n\n      // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const timeStampIndex = dataOptions.timeInfo.dataIndex\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      if (timeStampIndex === ind) {\n        ind++\n        return\n      }\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'line') {\n        plotInfo[key].forEach(function (plotData) {\n          plotData.name = refineString(plotData.name)\n          const color = plotData.color // Apply color for each Plot series or pick from data color Arr\n          if (!color) {\n            throw `Color not present for series ${plotData.name}`\n          }\n          color && (eachPlotSet[plotData.name].color = color)\n          const plotAxis = plotData.plotAxis || ['left', 'bottom']\n          eachPlotSet[plotData.name].plotAxis = plotAxis\n          const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n          eachPlotSet[plotData.name].unit = unit\n          isBoolean(plotData.visible) && (eachPlotSet[plotData.name].visible = plotData.visible)\n        })\n      } else if (key === 'stack') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.stackOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      } else if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, getObject, isFunction} from '@/utils'\nimport {bisector, d3Mouse} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class TimeSeriesTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      crossHairs: {\n        enable: true\n      },\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.crossHairs = false\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n\n    if (this.opts.crossHairs.enable === true) {\n      this.crossHairs = this.opts.chart.svg\n        .append('g')\n        .attr('class', 'vc-tooltip-line')\n      this.crossHairs.append('line')\n        .attr('transform', 'translate(-999,-999)')\n        .attr('x1', this.opts.chart.margin.left)\n        .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n        .attr('x2', this.opts.chart.margin.left)\n        .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n\n    }\n\n    this.opts.chart.mouseHandler.register(() => {\n      // Register hover and hide/show toolip events\n      const self = this\n      const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n      const mouseHandler = this.opts.chart.mouseHandler\n      const dateIndex = this.opts.chart.options.timeInfo.dataIndex\n      const dataSet = this.opts.chart.options.chartData\n      // Find nearest existing date among array of sorted date\n      const bisectDate = bisector(function (d) {\n        return d[dateIndex]\n      }).left\n\n      const mouseEvt = function (d) {\n        // On mousemove of x overlay, find x,y values and update tooltip\n        const xMouse = d3Mouse(this)[0]\n        const yMouse = d3Mouse(this)[1]\n        const xVal = xScale.invert(xMouse) // find xAxis date for mouse position\n\n        // Do binary search of data set from 2nd data set to end\n        const found = bisectDate(dataSet, xVal, 1)\n\n          \n        const dBefore = dataSet[found - 2]\n\n          \n        const dPrev = dataSet[found - 1]\n        // get before find dataSet\n          \n        const dFound = dataSet[found] || dPrev // get find dataSet\n\n        let toolTipData = dPrev\n        if (dataSet.length > self.opts.chart.chartWidth) {\n          // More than one tick reside on each pixel. Hence find tick having max value among the dataset\n          const dataParseLen = Math.floor(dataSet.length / self.opts.chart.chartWidth) + 1\n\n          const visibleDataIndex = {}\n\n          for (const pl in self.opts.chart.options.plotSet) {\n            const plot = self.opts.chart.options.plotSet[pl]\n            if (plot.visible) {\n              visibleDataIndex[plot.dataIndex] = true\n            }\n          }\n\n          const multiArrMap = {}\n          // Do Scan from range -dataParseLen to +dataParseLen between found data index\n          for (let ind = (found - dataParseLen); ind < (found + dataParseLen); ind++) {\n            if (dataSet[ind]) {\n              const dSet = dataSet[ind].filter(function (val, index) {\n                return visibleDataIndex[index]\n              }).sort(function (a, b) {\n                return b - a\n              })\n              if (dSet.length) {\n                multiArrMap[ind] = dSet\n              }\n            }\n          }\n          let maxInd\n          let maxVal = -Infinity\n          for (const mp in multiArrMap) {\n            const arrSet = multiArrMap[mp]\n            if (maxVal < arrSet[0]) {\n              maxVal = arrSet[0]\n              maxInd = mp\n            }\n          }\n\n          toolTipData = dataSet[maxInd] || dFound\n        } else {\n          // Find nearest reaching date among above two dates\n          toolTipData = (xVal - dPrev[dateIndex]) > (dFound[dateIndex] - xVal) ? dFound : dPrev\n        }\n\n        let dateIntRange = dFound[dateIndex] - dPrev[dateIndex]\n\n        if (!dateIntRange && dBefore) {\n          dateIntRange = dPrev[dateIndex] - dBefore[dateIndex]\n        }\n\n        if (dateIntRange < Math.abs(dFound[dateIndex] - xVal)) {\n          // If found is outside data interval range, Then data doesnt exist for that tick.\n          toolTipData = []\n          toolTipData[dateIndex] = xVal\n        }\n\n        self.hover(xMouse, yMouse, toolTipData)\n      }\n\n      let eventName = 'mousemove'\n      if (this.opts.chart.options.chart.isTouchScreen) {\n        eventName = 'click'\n      }\n      mouseHandler.mouseBrush\n        .on(eventName, mouseEvt)\n        .on('mouseout', function () {\n          self.hide()\n        })\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n      mouseHandler.mouseBrush.select('rect.overlay')\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n    })\n  }\n\n  hover (xPos, yPos, displayData) {\n    // Update displayPanel and line based on x position\n    this.crossHairs && this.crossHairs.select('line')\n      .attr('transform', `translate(${xPos},0)`)\n      .attr('x1', this.opts.chart.margin.left)\n      .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n      .attr('x2', this.opts.chart.margin.left)\n      .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n    this.showHide(true)\n\n    let percentageDiff = xPos / this.opts.chart.chartWidth\n\n    if (percentageDiff < 0.3) {\n      percentageDiff = 0.2\n    }\n    if (percentageDiff > 0.7) {\n      percentageDiff = 0.95\n    }\n\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    const left = Math.round(rootPos.left + this.opts.chart.margin.left + xPos - box.width * percentageDiff) + 'px'\n    const top = Math.round(rootPos.top - box.height - 5 + constants.TOOLTIP_TOP_BUFFER * 2) + 'px'\n\n\n    this.toolTipDiv\n      .style('left', left)\n      .style('top', top)\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n\n    this.crossHairs && this.crossHairs.classed('vc-hidden', !showFlag)\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.toolTipDiv && this.toolTipDiv.remove()\n    this.crossHairs && this.crossHairs.remove()\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class MouseHandler extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.opts.registerFn = []\n  }\n\n  draw () {\n    this.mouseBrush = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-brushX')\n      .attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .attr('style', '-webkit-tap-highlight-color: rgba(0, 0, 0, 0)')\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n\n    if (this.opts.chart.options.chart.isTouchScreen) {\n      this.mouseBrush.attr('cursor', 'pointer')\n    }\n\n    if (!this.opts.chart.options.zoom.visible) {\n      // x-Zoom for chart doest not exist, Add rect overlay for brushXDiv\n      this.mouseBrush.append('rect')\n        .attr('class', 'overlay')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  update () {\n    this.mouseBrush.attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n    if (!this.opts.chart.options.zoom.visible) {\n      this.mouseBrush.select('rect.overlay')\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.mouseBrush && this.mouseBrush.classed('vc-hidden', !showFlag)\n  }\n\n  register (callback) {\n    this.opts.registerFn.push(callback)\n  }\n\n  triggerMouseAction () {\n    this.opts.registerFn.forEach((fun) => {\n      fun.call(this)\n    })\n  }\n\n  remove () {\n    this.mouseBrush && this.mouseBrush.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, emptyFn} from '@/utils'\nimport {brushX, brushY, d3Event} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class Zoom extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      onZoom: emptyFn,\n      onY1Zoom: emptyFn,\n      onY2Zoom: emptyFn\n    }, opts)\n  }\n\n  draw () {\n    const self = this\n    const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n    const yScaleLeft = getObject(this.opts, 'chart.yAxis.scale') || false\n    const yScaleRight = getObject(this.opts, 'chart.yAxis2.scale') || false\n    let brushOverlay = null\n    if (xScale) {\n      // Create x axis brush for Zoom operation\n      this.brushX = brushX()\n        .extent([\n          [0, 0],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n        ])\n\n      // Use the same mouseBrush for both xBrush and tooltip\n      this.brushXDiv = this.opts.chart.mouseHandler.mouseBrush\n        .call(this.brushX)\n\n      brushOverlay = this.brushXDiv.selectAll('rect.overlay')\n\n      // Call this event when xAxis brush is ended\n      this.brushX.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n\n        const d0 = d3Event.selection.map(xScale.invert)\n        // find x1 and x2\n          \n        const d1 = d0 && d0.map(Math.round) // round both values\n\n        // clear Brush\n        self.brushXDiv.call(self.brushX.move, null)\n        brushOverlay.style('cursor', 'auto')\n\n        // d1 = d1\n        //   .sort(function (a, b) {\n        //     return (a - b)\n        //   })\n\n        self.opts.chart.xAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of X axis upon horizontal zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        self.opts && self.opts.onZoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical left scale operation\n    if (yScaleLeft) {\n      this.brushYLeft = brushY()\n\n      this.brushYLeftDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-left')\n\n      // Call this event when yAxis brush is ended\n      this.brushYLeft.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYLeftDiv.call(self.brushYLeft.move, null)\n\n        const d0 = d3Event.selection.map(yScaleLeft.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of Y axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY1Zoom) && self.opts.onY1Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical right scale operation\n    if (yScaleRight) {\n      this.brushYRight = brushY()\n\n      this.brushYRightDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-right')\n\n      this.brushYRight.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYRightDiv.call(self.brushYRight.move, null)\n\n        const d0 = d3Event.selection.map(yScaleRight.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis2.modifyAxisProps({\n          domainScale: d1 // Change domain of Y2 axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY2Zoom) && self.opts.onY2Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    brushOverlay && this.opts.chart.mouseHandler.register(function () {\n      // When mouse is clicked or down, enable zoom brush and its mouse cursor\n      brushOverlay\n        .on('mousedown', function () {\n          brushOverlay.style('cursor', 'col-resize')\n        })\n        .on('click', function () {\n          brushOverlay.style('cursor', 'auto')\n        })\n    })\n    this.update()\n\n  }\n\n  update () {\n    if (this.brushX) {\n      this.brushX.extent([\n        [0, 0],\n        [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n      ])\n\n      this.brushXDiv.call(this.brushX)\n    }\n\n    if (this.brushYLeft) {\n      this.brushYLeft\n        .extent([\n          [0, 0],\n          [(this.opts.chart.margin.left - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYLeftDiv\n        .attr('transform', 'translate(' + constants.BRUSHY_BUFFER + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYLeft)\n    }\n\n    if (this.brushYRight) {\n      this.brushYRight\n        .extent([\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth - constants.BRUSHY_BUFFER), 0],\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth + this.opts.chart.margin.right - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYRightDiv\n        .attr('transform', 'translate(' + (constants.BRUSHY_BUFFER) + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYRight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.brushXDiv && this.brushXDiv.classed('vc-hidden', !showFlag)\n    this.brushYLeftDiv && this.brushYLeftDiv.classed('vc-hidden', !showFlag)\n    this.brushYRightDiv && this.brushYRightDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    if (this.brushXDiv) {\n      this.brushXDiv.call(this.brushX.move, null)\n      this.brushXDiv && this.brushXDiv.remove()\n    }\n    if (this.brushYLeftDiv) {\n      this.brushYLeftDiv.call(this.brushYLeft.move, null)\n      this.brushYLeftDiv.remove()\n    }\n    if (this.brushYRightDiv) {\n      this.brushYRightDiv.call(this.brushYRight.move, null)\n      this.brushYRightDiv.remove()\n    }\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {line} from '@/d3Importer'\n\nexport default class Line extends ChartComponent {\n\n  constructor (opts) {\n    super()\n    // Do not register this component in chartComponentsArr,  As the series component is already registered and will call the line APIs\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      lineData: null,\n      yAxisTarget: null,\n      xAxisTarget: null,\n      visible: true\n    }, opts)\n\n    const self = this\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.line = line()\n\n    if (this.opts.yAxisTarget) {\n      // For normal series, yAxisTarget refers to the index of this series in data Arr\n      this.line\n        .defined(function (d) {\n          return d[self.opts.yAxisTarget] != null\n        })\n        .x(function (d) {\n          // xAxisTarget refers the index of date in data Arr\n          return x(d[self.opts.xAxisTarget])\n        })\n        .y(function (d) {\n          return y(d[self.opts.yAxisTarget])\n        })\n    }\n  }\n\n  draw () {\n    const self = this\n    this.lineTag = this.opts.chart.graphZone.selectAll('.vc-line-' + this.opts.className)\n      .data([this.opts.lineData])\n      .enter()\n      .append('g')\n      .attr('class', 'vc-line-plot vc-line-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    // Adding the lines series for data to be shown\n    this.lineTag.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-line')\n      .style('stroke', function (d) {\n        return d.color\n      })\n      .style('fill', 'transparent')\n      .style('stroke-width', function (d) {\n        return d.lineWidth || '2px'\n      })\n      .attr('d', function (d) {\n        return self.line(d.values) // Values are array of array having format like  [[date, series1, series2 ....],...]\n      })\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    this.lineTag && this.lineTag.select('path').attr('d', function (d) {\n      return self.line(d.values)\n    })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.lineTag && this.lineTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const seriesName = this.opts.lineData.name\n    // Remove line series\n    this.lineTag && this.lineTag.remove()\n\n    if (eachPlotSet && eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n      this.draw()\n    }\n\n  }\n  \n  remove () {\n    this.lineTag && this.lineTag.remove()\n    this.line = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {area, stack, stackOrderNone, stackOffsetNone} from '@/d3Importer'\nimport {getObject} from '@/utils'\n\nexport default class StackArea extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      xAxisTarget: '',\n      stackData: null,\n      stackOrderMembers: {},\n      visible: true\n    }, opts)\n\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Define in what order, Stack series needs to be ploted\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.opts.d3Stack = stack()\n\n    this.area = area()\n      .x(function (d, i) {\n        return x(d.data[self.opts.xAxisTarget])\n      })\n      .y0(function (d) {\n        return y(d[0]) // Indicates where to start along YAxis\n      })\n      .y1(function (d) {\n        return y(d[1]) // Indicates where to end along YAxis\n      })\n\n  }\n\n  draw () {\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    this.opts.d3Stack.keys(this.opts.stackOrderIndex) // specify the stack series names in array format\n    this.opts.d3Stack.order(stackOrderNone) // use the given series order.\n    this.opts.d3Stack.offset(stackOffsetNone) // apply a zero baseline on start\n\n    // Show stack plot for only series which are visible\n    const stackVisibleOrder = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n\n    this.stackLayer = this.opts.chart.graphZone.selectAll('.vc-stack-' + this.opts.className)\n      .data(this.opts.d3Stack(this.opts.stackData))\n      .enter()\n      .append('g')\n      .attr('class', 'vc-stack-plot vc-stack-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n\n    // PLot stackLayer based on each series visiblity\n    this.stackLayer.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return 'vc-stack vc-stack-' + stackMember.name\n      })\n      .style('fill', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return eachPlotSet[stackMember.name].color\n      })\n      .attr('d', this.area)\n\n  }\n  \n  // Update stackLayer based on chart resize\n  update () {\n    this.stackLayer && this.stackLayer.select('path').attr('d', this.area)\n  }\n  \n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify stackOrder arr based on visibleSeries\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all stack series\n    this.stackLayer && this.stackLayer.remove()\n    // draw with new stackOrderMembers\n    this.draw()\n  }\n  \n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.stackLayer.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n  \n  remove () {\n    //  this.stackAreaPath.remove();\n    this.stackLayer && this.stackLayer.remove()\n    this.opts.d3Stack = null\n    this.area = null\n    this.opts = null\n  }\n}","import {isArray} from '@/utils'\nimport Line from '@/series/Line'\nimport StackArea from '@/series/StackArea'\nimport Series from '@/series/Series'\n\nexport default class TimeSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.stack) && plotInfo.stack.forEach((plotData) => {\n      this.plotSeries.push(new StackArea({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        stackData: data,\n        stackOrderMembers: plotData.stackOrderMembers\n      }))\n    })\n\n    isArray(plotInfo.line) && plotInfo.line.forEach((plotData) => {\n      this.plotSeries.push(new Line({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        yAxisTarget: eachPlotSet[plotData.name].dataIndex,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        visible: eachPlotSet[plotData.name].visible,\n        lineData: {\n          name: plotData.name,\n          color: eachPlotSet[plotData.name].color,\n          lineWidth: eachPlotSet[plotData.name].lineWidth,\n          values: data\n        }\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultTSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport BasicTSParser from '@/data-parser/BasicTSParser'\nimport Tooltip from '@/tooltip/TimeSeriesTooltip'\nimport MouseHandler from '@/mouse-handler'\nimport Zoom from '@/zoom'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\nimport TimeSeries from '@/series/TimeSeries'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicTSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Add default options to chart\n    addDefaultTSOptions(this.options)\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    const zoomOpts = getObject(this, 'options.zoom', {})\n    if ((tooltipOpts.visible || zoomOpts.visible)) {\n      this.mouseHandler = new MouseHandler({\n        chart: this,\n      })\n      this.chartComponentsArr.push(this.mouseHandler)\n    }\n\n    if (this.options.zoom.visible) {\n      this.zoomBrush = new Zoom({\n        chart: this,\n        onZoom: this.options.zoom.onXZoom,\n        onY1Zoom: this.options.zoom.onY1Zoom,\n        onY2Zoom: this.options.zoom.onY2Zoom\n      })\n      this.chartComponentsArr.push(this.zoomBrush)\n    }\n\n    if (this.options.series) {\n      this.series = new TimeSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      this.legends = new TimeSeriesLegend({\n        chart: this,\n        legendPrefix: this.options.legend.legendPrefix,\n        position: constants.DIR_TOP,\n        disableSeriesToggle: this.options.legend.disableSeriesToggle,\n        onLegendChange: this.options.legend.onLegendChange\n      })\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('TimeSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","export {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport default {\n  version: 'v5'\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}"],"sourceRoot":""}