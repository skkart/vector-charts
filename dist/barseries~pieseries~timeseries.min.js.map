{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./legend/TimeSeriesLegend.js","webpack://vc/./series/Series.js"],"names":["Chart","container","opts","isString","isObject","length","dataParser","select","size","Error","containerName","containerBox","elementOffset","takeContainerWidth","chart","width","takeContainerHeight","height","maxWidth","minWidth","options","chartHeight","chartWidth","margin","chartType","left","right","top","bottom","chartFullSpace","chartComponentsArr","svg","append","html","svgClass","className","isTouchScreen","attr","counter","graphZone","console","log","this","forEach","chartCmpt","ChartComponent","draw","update","showFlag","showHide","remove","chartResize","throttedResize","throttle","Math","floor","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","chartCounter","tooltip","visible","format","legend","legendPrefix","position","constants","DIR_TOP","isFunction","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","val","unit","decimals","denominator","kVal","getValueWithDecimals","mVal","addDefaultTSOptions","xAxis","UNITS_TIME","tickFormatter","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","d","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","tableStringArray","push","reverse","tString","addDefaultPSOptions","formatter","value","pieObj","series","pie","percentage","total","sunburst","sunburstObj","DIR_RIGHT","TimeSeriesLegend","disableSeriesToggle","self","maxWidthLegend","spacingNames","eachPlotSet","eachPlotNames","leng","textWidth","maxLenLegend","dummyG","selectAll","data","enter","style","text","each","i","thisWidth","round","getComputedTextLength","ele","maxTextLength","graphOptions","toggleSeries","emptyFn","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","seriesName","visibleSeries","plotName","applyYAxis","currentPlotInfo","DIR_LEFT","constructYAxisInfo","modifyAxisProps","domainScale","yRange","yAxis2","yRange2","reScaleYAxis","redraw","sFlag","classed","onLegendChange","call","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER","Series","plotSeries","plotFn"],"mappings":"4FAAA,yhD,2JCIqBA,E,YACnB,WAAaC,EAAWC,GAAM,6DAE5B,GAAIC,YAASF,IAAcG,YAASF,IAASD,EAAUI,QAAUD,YAASF,EAAKI,YAAa,CAE1F,GADA,EAAKL,UAAYM,YAAON,IACnB,EAAKA,UAAUO,OAClB,MAAM,IAAIC,MAAM,iFAElBP,EAAKQ,cAAgBT,EAErB,IAAMU,EAAeC,YAAc,EAAKX,WAEpCY,GAAqB,EACpB,IAAgBX,EAAKY,MAAMC,SAC9Bb,EAAKY,MAAMC,MAAQJ,EAAaI,MAChCF,GAAqB,GAGvB,IAAIG,GAAsB,EACrB,IAAgBd,EAAKY,MAAMG,UAC9Bf,EAAKY,MAAMG,OAASN,EAAaM,OACjCD,GAAsB,GAGpBd,EAAKY,MAAMC,MAAQb,EAAKY,MAAMI,WAChChB,EAAKY,MAAMC,MAAQb,EAAKY,MAAMI,UAG5BhB,EAAKY,MAAMC,MAAQb,EAAKY,MAAMK,WAChCjB,EAAKY,MAAMC,MAAQb,EAAKY,MAAMK,UAGhC,EAAKC,QAAUlB,EAEf,EAAKmB,YAAcnB,EAAKY,MAAMG,OAC9B,EAAKK,WAAapB,EAAKY,MAAMC,MAC7B,EAAKQ,OAASrB,EAAKY,MAAMS,OACzB,EAAKC,UAAYtB,EAAKY,MAAMU,UAExBX,IACF,EAAKS,WAAa,EAAKA,YAAc,EAAKC,OAAOE,KAAO,EAAKF,OAAOG,QAGlEV,IACF,EAAKK,YAAc,EAAKA,aAAe,EAAKE,OAAOI,IAAM,EAAKJ,OAAOK,SAIvE,EAAKtB,WAAaJ,EAAKI,kBAGhB,EAAKc,QAAQd,WAEpB,EAAKuB,eAAiB,CACpBd,MAAO,EAAKO,WAAa,EAAKC,OAAOE,KAAO,EAAKF,OAAOG,MACxDT,OAAQ,EAAKI,YAAc,EAAKE,OAAOI,IAAM,EAAKJ,OAAOK,QAK3D,EAAKE,mBAAqB,GAE1B,EAAKC,IAAM,EAAK9B,UAAUM,OAAO,OAET,IAApB,EAAKwB,IAAIvB,SAEX,EAAKuB,IAAM,EAAK9B,UAAU+B,OAAO,QAInC,EAAKD,IAAIE,KAAK,IAEd,IAAIC,EAAW,WAAahC,EAAKY,MAAMqB,WAAa,IAChD,EAAKf,QAAQN,MAAMsB,gBACrBF,GAAY,gBAEd,EAAKH,IACFM,KAAK,QAAS,EAAKR,eAAed,OAClCsB,KAAK,SAAU,EAAKR,eAAeZ,QACnCoB,KAAK,QAASH,GAIjB,EAAKH,IAAIC,OAAO,QACbA,OAAO,YACPK,KAAK,KAFR,cAE4B,EAAKjB,QAAQN,MAAMwB,SAC5CN,OAAO,QACPK,KAAK,QAAS,EAAKf,YACnBe,KAAK,SAAU,EAAKhB,aAGvB,EAAKkB,UAAY,EAAKR,IAAIC,OAAO,KAC9BK,KAAK,YAAa,aAAe,EAAKd,OAAOE,KAAO,IAAM,EAAKF,OAAOI,IAAM,KAC5EU,KAAK,QAAS,gBA5FS,S,oDAiG5BG,QAAQC,IAAI,aAAcC,MAE1BA,KAAKZ,mBAAmBa,SAAQ,SAAUC,GACpCA,aAAqBC,KACvBD,EAAUE,Y,+BAMdJ,KAAKX,IAAIM,KAAK,QAASK,KAAKb,eAAed,OAC3C2B,KAAKH,UAAUF,KAAK,YAAa,aAAeK,KAAKnB,OAAOE,KAAO,IAAMiB,KAAKnB,OAAOI,IAAM,KAC3Fe,KAAKX,IAAIxB,OAAO,YAAYA,OAAO,QAAQ8B,KAAK,QAASK,KAAKpB,YAE9DkB,QAAQC,IAAI,eAAgBC,MAE5BA,KAAKZ,mBAAmBa,SAAQ,SAAUC,GACpCA,aAAqBC,KACvBD,EAAUG,c,+BAKNC,GACRR,QAAQC,IAAI,iBAAkBC,MAC9BM,IAAaA,EACbN,KAAKZ,mBAAmBa,SAAQ,SAAUC,GACpCA,aAAqBC,KACvBD,EAAUK,SAASD,Q,+BAMvBR,QAAQC,IAAI,eAAgBC,MAC5BA,KAAKZ,mBAAmBa,SAAQ,SAAUC,GACpCA,aAAqBC,KACvBD,EAAUM,c,wCAMG,WACjB,GAAIR,KAAKtB,QAAQN,MAAMqC,YAAa,CAClCT,KAAKU,eAAiBC,aAAS,SAACtC,EAAOE,GACjCF,IAAU,EAAKc,eAAed,QAGlC,EAAKc,eAAed,MAAQuC,KAAKC,MAAMxC,GACvC,EAAKc,eAAeZ,OAASqC,KAAKC,MAAMtC,GACxC,EAAKK,WAAa,EAAKO,eAAed,OAAS,EAAKQ,OAAOE,KAAO,EAAKF,OAAOG,OAC9E,EAAKL,YAAc,EAAKQ,eAAeZ,QAAU,EAAKM,OAAOI,IAAM,EAAKJ,OAAOK,QAC/E4B,YAAW,kBAAM,EAAKT,WAAU,MAC/B,KAGH,IAAMU,EAAU,OAASf,KAAKtB,QAAQN,MAAM4C,IAAMhB,KAAKtB,QAAQN,MAAMwB,SACrE/B,YAAOoD,QAAQC,GAAG,UAAYH,GAAS,kBAAM,EAAKI,sB,sCAMpD,IAAMlD,EAAeC,YAAc8B,KAAKzC,WACpC6D,EAAoBnD,EAAaI,MAEjC+C,EAAoBpB,KAAKtB,QAAQN,MAAMI,WACzC4C,EAAoBpB,KAAKtB,QAAQN,MAAMI,UAGrC4C,EAAoBpB,KAAKtB,QAAQN,MAAMK,WACzC2C,EAAoBpB,KAAKtB,QAAQN,MAAMK,UAGzCuB,KAAKU,eAAeU,EAAmBnD,EAAaM,U,8BAI7C8C,GAGP,GAFAA,IAAgBA,EAEZrB,KAAKtB,QAAQN,MAAMqC,YAAa,CAClC,IAAMM,EAAU,OAASf,KAAKtB,QAAQN,MAAM4C,IAAMhB,KAAKtB,QAAQN,MAAMwB,SACrE/B,YAAOoD,QAAQC,GAAG,UAAYH,EAAS,MAUzC,OANAf,KAAKQ,SAGLa,GAAerB,KAAKX,IAAImB,SACxBa,GAAerB,KAAKzC,UAAUiD,SAEvB,S,GAhMwBL,KAAd7C,O,iMCAd,SAASgE,EAAwB9D,GAwCtC,OAtCAA,EAAKY,MAAQ,IAAc,CACzBqC,aAAa,EACbf,eAAe,EACfD,UAAW,GACXjB,aACAC,SAAU,GACTjB,EAAKY,OACRZ,EAAKY,MAAMwB,QAAU2B,cAErB/D,EAAKgE,QAAU,IAAc,CAC3BC,SAAS,EACTC,QAAQ,GACNlE,EAAKgE,SAAW,IAEpBhE,EAAKmE,OAAS,IAAc,CAC1BF,SAAS,EACTG,aAAc,GACdC,SAAUC,IAAUC,SAClBvE,EAAKmE,QAAU,IAEdK,YAAWxE,EAAKyE,aACnBzE,EAAKyE,UAAY,SAAUC,GACzB,OAAOA,IAINF,YAAWxE,EAAK2E,cACnB3E,EAAK2E,WAAa,SAAUC,GAC1BtC,QAAQC,IAAR,oBAAgCvC,EAAKQ,cAArC,oBAAsEoE,EAAtE,SAICJ,YAAWxE,EAAK6E,WACnB7E,EAAK6E,QAAU,SAAUC,GACvBxC,QAAQC,IAAR,kCAA8CvC,EAAKQ,cAAnD,IAAqEsE,KAIlE9E,EAGF,SAAS+E,EAAoBC,GAA8B,IAAzBC,EAAyB,uDAAlB,GAAIC,EAAc,uDAAH,EACvDC,EAAc,IACpB,GAAIH,EAAMG,EAAa,CACrB,IAAMC,EAAOC,YAAqBL,EAAMG,EAAaD,GACrD,GAAIE,EAAOD,EAAa,CACtB,IAAMG,EAAOD,YAAqBD,EAAOD,EAAaD,GACtD,OAAUI,EAAV,KAAmBL,EAErB,OAAUG,EAAV,KAAmBH,EAErB,OAAUI,YAAqBL,EAAKE,GAApC,IAAiDD,EAI5C,SAASM,EAAqBvF,GASnC,GAPAA,EAAKwF,MAAQ,IAAc,CACzB9D,OAAQ,CACNuD,KAAMX,IAAUmB,WAChBxB,SAAS,IAETjE,EAAKwF,OAAS,KAEbhB,YAAWxE,EAAKwF,MAAM9D,OAAOgE,eAAgB,CAChD,IAAMC,EAAW3F,EAAK2F,SAEhBC,EAAUD,EAASE,UAAU1F,OAG7B2F,EAFWH,EAASE,UAAUD,EAAU,GAAKD,EAASE,UAAU,GAE1CvB,IAAUyB,mBAAsBC,YAAW,SAAWA,YAAW,YAC7FhG,EAAKwF,MAAM9D,OAAOgE,cAAgB,SAACO,GACjC,OAAOH,EAAQG,IAqCnB,GAhCKjG,EAAKkG,QACRlG,EAAKkG,MAAQ,CACX3E,KAAM,KAINvB,EAAKkG,MAAM3E,OACbvB,EAAKkG,MAAM3E,KAAO,IAAc,CAC9B0D,KAAMX,IAAU6B,UAChBC,IAAK,EACLnC,SAAS,GACRjE,EAAKkG,MAAM3E,OAGZvB,EAAKkG,MAAM1E,QACbxB,EAAKkG,MAAM1E,MAAQ,IAAc,CAC/ByD,KAAMX,IAAU6B,UAChBC,IAAK,EACLnC,SAAS,GACRjE,EAAKkG,MAAM1E,QAGhBxB,EAAKqG,KAAO,IAAc,CACxBpC,SAAS,GACPjE,EAAKqG,MAAQ,IAGjBrG,EAAKgE,QAAU,IAAc,CAC3BC,SAAS,EACTC,QAAQ,GACNlE,EAAKgE,SAAW,KAEfQ,YAAWxE,EAAKgE,QAAQE,QAAS,CACpC,IAAMoC,EAAaN,YAAW,sBAC9BhG,EAAKgE,QAAQE,OAAS,SAAUqC,GAC9B,IAAKA,IAAMC,YAAQD,GACjB,MAAO,GAET,IAAME,EAAUjE,KAAKtB,QAAQuF,QACvBd,EAAWnD,KAAKtB,QAAQyE,SACxBe,EAAalE,KAAKtB,QAAQsE,MAAMkB,YAAc,GAC9CR,EAAQ1D,KAAKtB,QAAQgF,MAEvBS,EAAWA,oFAEPL,EAAWC,EAAEZ,EAASiB,YAF1B,IAEyCF,EAFzC,2BAKJ,IAAK,IAAMG,KAAOJ,EAAS,CACzB,IAAMzB,EAAMuB,EAAEE,EAAQI,GAAKD,WAC3B,GAAKH,EAAQI,GAAK5C,UAAW6C,MAAM9B,GAAnC,CAKA,IACMd,EADUgC,EAAMO,EAAQI,GAAKE,SAAS,IACrB7C,QAAUa,EAEjC4B,iFAEoCF,EAAQI,GAAKG,MAFjD,YAEkEP,EAAQI,GAAKI,KAF/E,4DAKM/C,EAAOc,EAAKyB,EAAQI,GAAK5B,MAL/B,kCAYF,OAFA0B,GAAY,oBAQhB,OAFA7C,EAAuB9D,GAEhBA,EAGF,SAASkH,EAAqBlH,GAkGnC,OAhGAA,EAAKwF,MAAQ,IAAc,CACzB9D,OAAQ,CACNuD,KAAMX,IAAU6B,UAChBlC,SAAS,IAETjE,EAAKwF,OAAS,IAIbxF,EAAKkG,QACRlG,EAAKkG,MAAQ,CACX3E,KAAM,KAINvB,EAAKkG,MAAM3E,OACbvB,EAAKkG,MAAM3E,KAAO,IAAc,CAC9B0D,KAAMX,IAAU6B,UAChBC,IAAK,EACLnC,SAAS,GACRjE,EAAKkG,MAAM3E,OAGZvB,EAAKkG,MAAM1E,QACbxB,EAAKkG,MAAM1E,MAAQ,IAAc,CAC/ByD,KAAMX,IAAU6B,UAChBC,IAAK,EACLnC,SAAS,GACRjE,EAAKkG,MAAM1E,QAGhBxB,EAAKqG,KAAO,IAAc,CACxBpC,SAAS,GACPjE,EAAKqG,MAAQ,IAIjBrG,EAAKgE,QAAU,IAAc,CAC3BC,SAAS,EACTC,QAAQ,GACNlE,EAAKgE,SAAW,IAEfQ,YAAWxE,EAAKgE,QAAQE,UAC3BlE,EAAKgE,QAAQE,OAAS,SAAUqC,GAC9B,IAAIY,EAAUZ,EAId,GAHIA,GAAKA,EAAEvB,MACTmC,EAAUZ,EAAEvB,MAETwB,YAAQW,GACX,MAAO,GAET,IAAMV,EAAUjE,KAAKtB,QAAQuF,QACvBd,EAAWnD,KAAKtB,QAAQyE,SACxBO,EAAQ1D,KAAKtB,QAAQgF,MACrBkB,EAAmB,GAErBT,EAAWA,oFAEPQ,EAAQxB,EAASiB,WAFrB,2BAKJ,IAAK,IAAMC,KAAOJ,EAAS,CACzB,IAAMzB,EAAMmC,EAAQV,EAAQI,GAAKD,WACjC,GAAKH,EAAQI,GAAK5C,UAAW6C,MAAM9B,GAAnC,CAKA,IACMd,EADUgC,EAAMO,EAAQI,GAAKE,SAAS,IACrB7C,QAAUa,EAGjCqC,EAAiBC,KAAjB,8EAEoCZ,EAAQI,GAAKG,MAFjD,qEAKM9C,EAAOc,EAAKyB,EAAQI,GAAK5B,MAL/B,mCAkBF,OARAmC,EAAiBE,UAGjBF,EAAiB3E,SAAQ,SAAC8E,GACxBZ,GAAYY,KAEdZ,GAAY,qBAMhB7C,EAAuB9D,GAEhBA,EAGF,SAASwH,EAAqBxH,GAQnC,GALAA,EAAKgE,QAAU,IAAc,CAC3BC,SAAS,EACTC,QAAQ,GACNlE,EAAKgE,SAAW,KAEfQ,YAAWxE,EAAKgE,QAAQE,QAAS,CACpC,IAAIuD,EAAY,SAAUlB,GACxB,IAAKA,IAAMA,EAAEmB,MACX,MAAO,GAET,IAAMC,EAASnF,KAAKtB,QAAQ0G,OAAOC,IAC7B3D,EAASyD,EAAOzD,QAAUa,EAC1B+C,EAAazC,YAAsBkB,EAAEmB,MAAQC,EAAOI,MAAS,IAAK,GAExE,gJAGyDxB,EAAES,MAH3D,YAG4ET,EAAEU,KAH9E,0CAI4Ba,EAJ5B,iGAOwC5D,EAAOqC,EAAEmB,MAAOC,EAAO1C,MAP/D,8EAcEjF,EAAK4H,QAAU5H,EAAK4H,OAAOI,WAC7BP,EAAY,SAAUlB,GACpB,IAAKA,IAAMA,EAAEmB,MACX,MAAO,GAGT,IAAMO,EAAczF,KAAKtB,QAAQ0G,OAAOI,SAClC9D,EAAS+D,EAAY/D,QAAUa,EACrC,gJAGuDwB,EAAES,MAHzD,YAG0ET,EAAEU,KAH5E,sDAIsC/C,EAAOqC,EAAEmB,MAAOO,EAAYhD,MAJlE,+EAUJjF,EAAKgE,QAAQE,OAASuD,EAOxB,OAJA3D,EAAuB9D,GAEvBA,EAAKmE,OAAOE,SAAWC,IAAU4D,UAE1BlI,I,kLC1TYmI,E,YACnB,WAAanI,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxBoI,qBAAqB,GACpBpI,GAEH,IAAMqI,EAAOA,EACb,EAAKrI,KAAKsI,eAAiB,EAC3B,EAAKtI,KAAKuI,aAAe,GAGzB,IACMC,EADe,EAAKxI,KAAKY,MAAMM,QACJuF,QAC3BgC,EAAgB,IAAYD,GAC9BE,EAAO,EACLC,EAAY,GACdC,SAEEC,EAAS,EAAK7I,KAAKY,MAAMiB,IAAIC,OAAO,KAlBzB,OAoBjB+G,EAAOC,UAAU,cACdC,KAAKN,GACLO,QACAlH,OAAO,QACPK,KAAK,QAAS,mBACd8G,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrBC,MAAK,SAAU3C,GACd,OAAQ8B,EAAKrI,KAAKoE,cAAgBoE,EAAYjC,GAAKiC,EAAYjC,GAAGU,KAAO,OAE1EkC,MAAK,SAAU5C,EAAG6C,GAEjB,IAAMC,EAAYjG,KAAKkG,MAAM9G,KAAK+G,yBAC9BF,EAAYhB,EAAKrI,KAAKsI,iBACxBD,EAAKrI,KAAKsI,eAAiBe,EAC3BT,EAAerC,GAEjBoC,EAAUtB,KAAKgC,MAInBV,EAAUlG,SAAQ,SAAU+G,GAC1Bd,GAAQc,EACRnB,EAAKrI,KAAKuI,aAAalB,KAAKqB,MAI9B,EAAK1I,KAAKyJ,cAAgBb,EAAazI,OAAS,IAEhD0I,EAAO7F,SAjDU,E,oDAsDjB,IAAMqF,EAAO7F,KACPkH,EAAelH,KAAKxC,KAAKY,MAAMM,QACjCyI,EAAeC,IACbpB,EAAckB,EAAajD,QAC3BgC,EAAgB,IAAYD,GAC5BqB,EAAUzG,KAAKC,MAA8C,GAAxCb,KAAKxC,KAAKY,MAAMe,eAAeZ,OAAc,KACpE+I,EAAWrB,EAActI,OAASmE,IAAUyF,eAChDD,EAAWA,EAAWD,EAAUA,EAAUC,EAC1C,IAAME,EAAWxH,KAAKxC,KAAKsI,eAAiBhE,IAAU2F,kBAEtDzH,KAAKxC,KAAKkK,UAAY,CACpBrJ,MAAOmJ,EACPjJ,OAAQ+I,GAKLtH,KAAKxC,KAAKoI,sBAEbuB,EAAe,SAAUQ,GACvB,IAAIC,EAAgB,EAChBC,SAEJ,GAAI7B,EAAY2B,IAAe3B,EAAY2B,GAAYlG,QAAS,CAE9D,IAAKoG,KAAY7B,EACfA,EAAY6B,GAAUpG,SAAWmG,IAGnC,GAAIA,GAAiB,EACnB,OAIJ,IAAIE,SAGAC,SAOJ,GALI/B,GAAeA,EAAY2B,KAC7BI,EAAkB/B,GAIhB+B,EAAiB,CAEnBA,EAAgBJ,GAAYlG,SAAWsG,EAAgBJ,GAAYlG,QAE/DsG,EAAgBJ,GAAYpD,SAAS,KAAOzC,IAAUkG,UAGxD,IAAcnC,EAAKrI,KAAKY,MAAMM,QAASmH,EAAKrI,KAAKY,MAAMR,WAAWqK,sBAElEH,EAAahG,IAAUkG,SAEvBnC,EAAKrI,KAAKY,MAAMsF,MAAMwE,gBAAgB,CACpCC,YAAajB,EAAakB,UAGnBL,EAAgBJ,GAAYpD,SAAS,KAAOzC,IAAU4D,YAG/D,IAAcG,EAAKrI,KAAKY,MAAMM,QAASmH,EAAKrI,KAAKY,MAAMR,WAAWqK,sBAElEH,EAAahG,IAAU4D,UAEvBG,EAAKrI,KAAKY,MAAMiK,OAAOH,gBAAgB,CACrCC,YAAajB,EAAaoB,WAK9BzC,EAAKrI,KAAKY,MAAMmK,aAAaT,GAG7BjC,EAAKrI,KAAKY,MAAMgH,OAAOoD,SAEvB,IAAMC,EAAQV,EAAgBJ,GAAYlG,QAE1C5D,YAAOmC,MACJ0I,QAAQ,kBAAmBD,GAE9BzG,YAAW6D,EAAKrI,KAAKmL,iBAAmB9C,EAAKrI,KAAKmL,eAAeC,KAAK/C,EAAKrI,KAAKY,MAAO2J,EAAgBJ,GAAac,MAM1HzI,KAAK6I,cAAgB7I,KAAKxC,KAAKY,MAAMiB,IAAIC,OAAO,KAC7CK,KAAK,QAAS,mBACdA,KAAK,YAAa,oBAErBK,KAAK8I,YAAc9I,KAAK6I,cACrBvC,UAAU,KACVC,KAAKN,GACLO,QACAlH,OAAO,KACPK,KAAK,aAAa,SAAUoE,EAAG6C,GAE9B,OAAIf,EAAKrI,KAAKqE,WAAaC,IAAUC,QAE5B,cADG8D,EAAKrI,KAAKuI,aAAaa,EAAI,GAAMf,EAAKrI,KAAKuI,aAAaa,EAAI,GAAK9E,IAAUiH,aAAenC,EAAK,GAC/E,OACjBf,EAAKrI,KAAKqE,WAAaC,IAAU4D,UAGnC,gBADGkB,EAAI9E,IAAUyF,eACK,SAHxB,KAMR5H,KAAK,SAAS,SAAUoE,GACvB,MAAO,uBAAyBA,KAEjC2E,QAAQ,kBAAkB,SAAU3E,EAAG6C,GACtC,QAAQZ,EAAYjC,KAAMiC,EAAYjC,GAAGtC,WAI7CzB,KAAK8I,YACF5H,GAAG,QAASP,YAASwG,EAAc,IAAK,CACvC6B,UAAU,KAIdhJ,KAAK8I,YAAYxJ,OAAO,QACrBK,KAAK,QAAS,mBACdA,KAAK,IAAKmC,IAAUmH,eACpBtJ,KAAK,IAAKmC,IAAUoH,eACpBzC,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrBC,MAAK,SAAU3C,GACd,IAAIoF,EAAWtD,EAAKrI,KAAKoE,cAAgBoE,EAAYjC,GAAKiC,EAAYjC,GAAGU,KAAO,IAIhF,OAHIoB,EAAKrI,KAAK4L,aAAevD,EAAKrI,KAAKyJ,cAAgBkC,EAAQxL,SAC7DwL,EAAUA,EAAQE,UAAU,EAAGxD,EAAKrI,KAAKyJ,eAAiB,OAErDkC,KAIXnJ,KAAK8I,YAAYxJ,OAAO,QACrBK,KAAK,QAAS,iBACdA,KAAK,IAAK,GACVA,KAAK,QAASmC,IAAUwH,kBACxB3J,KAAK,SAAUmC,IAAUwH,kBACzB7C,MAAM,UAAU,SAAU1C,GACzB,OAAOiC,EAAYjC,GAAKiC,EAAYjC,GAAGS,MAAQ,MAEhDiC,MAAM,eAAgB,OACtBA,MAAM,QAAQ,SAAU1C,GACvB,OAAOiC,EAAYjC,GAAKiC,EAAYjC,GAAGS,MAAQ,MAGnDxE,KAAKxC,KAAK+L,sBAAwB3I,KAAKkG,MAAM9G,KAAK6I,cAAcW,OAC7DC,UACApL,OAEH2B,KAAKK,W,+BAML,IAAMwF,EAAO7F,KACP0J,EAAa1J,KAAKxC,KAAKY,MAAMb,UAAU+I,UAAU,wBACnDqD,EAAa3J,KAAKxC,KAAKsI,eAAiB9F,KAAKxC,KAAKY,MAAMS,OAAOE,KAAOiB,KAAKxC,KAAKY,MAAMS,OAAOG,MAEjG,GAAIgB,KAAKxC,KAAKqE,WAAaC,IAAU4D,UAAW,CAE9CiE,GAAc7H,IAAU2F,kBACxB,IAAImC,EAAY9H,IAAU+H,gBACtB7J,KAAKxC,KAAKsI,iBAAmBhE,IAAUgI,mBACzCF,EAAY9H,IAAU+H,gBAAkB,IAE1C,IAAIE,EAAanJ,KAAKC,MAAMb,KAAKxC,KAAKY,MAAMQ,WAAagL,EAAY,KACjEI,EAAQhK,KAAKxC,KAAKY,MAAMQ,WAAamL,EAEzCA,GADAC,EAAQpJ,KAAKC,OAAOmJ,EAAQhK,KAAKxC,KAAKkK,UAAUrJ,OAAS,GAGzD,IAAM4L,EAAarJ,KAAKC,OAAOb,KAAKxC,KAAKY,MAAMe,eAAeZ,OAASyB,KAAKxC,KAAKkK,UAAUnJ,QAAU,GAErGyB,KAAK6I,cACFlJ,KAAK,YAAa,aAAeoK,EAAa,IAAME,EAAa,KAItE,IAAMC,EAAQlK,KAAKxC,KAAKY,MAAMiB,IAE1BW,KAAKxC,KAAKqE,WAAaC,IAAUC,UACnC4H,EAAa7H,IAAUiH,aAAelD,EAAKrI,KAAKuI,aAAapI,OAASmE,IAAUqI,uBAE3EnK,KAAKxC,KAAK+L,sBAAwBzH,IAAUsI,oBAAuBvE,EAAKrI,KAAKY,MAAMQ,YAEtFsL,EAAM5D,UAAU,cACbK,MAAK,WACJ,IAAMgB,EAAa9J,YAAOmC,MAAMnC,OAAO,QAAQ0B,OAC/C1B,YAAOmC,MAAMnC,OAAO,QACjB0B,KAAK,IACLD,OAAO,aACPoH,KAAKiB,MAEZ+B,EAAWhB,QAAQ,aAAa,GAE5B7C,EAAKrI,KAAKY,MAAMQ,WAAa+K,EAE/B3J,KAAK8I,YACFnJ,KAAK,aAAa,SAAUoE,EAAG6C,GAE9B,MAAO,eADGA,EAAI9E,IAAUyF,eACI,OAIhCvH,KAAK8I,YACFnJ,KAAK,aAAa,SAAUoE,EAAG6C,GAE9B,MAAO,aADG9E,IAAUiH,aAAenC,EACT,YAKhC5G,KAAK8I,YACFnJ,KAAK,aAAa,SAAUoE,EAAG6C,GAE9B,MAAO,cADGf,EAAKrI,KAAKuI,aAAaa,EAAI,GAAMf,EAAKrI,KAAKuI,aAAaa,EAAI,GAAK9E,IAAUiH,aAAenC,EAAK,GAC/E,UAGzB5G,KAAKxC,KAAK4L,cACbc,EAAM5D,UAAU,cACbK,MAAK,WACJ9I,YAAOmC,MAAMnC,OAAO,QACjB0B,KAAK,OAEZmK,EAAWhB,QAAQ,aAAa,Q,+BAO9BpI,GACRA,IAAaA,EACbN,KAAKxC,KAAKiE,QAAUnB,EACpBN,KAAK6I,eAAiB7I,KAAK6I,cAAcH,QAAQ,aAAcpI,K,+BAI/DN,KAAK8I,aAAe9I,KAAK8I,YAAYtI,SACrCR,KAAK6I,eAAiB7I,KAAK6I,cAAcrI,SACzCR,KAAKxC,KAAO,S,GA5S8B2C,KAAzBwF,O,oHCHA0E,E,YACnB,WAAa7M,GAAM,8D,oDAKjBwC,KAAKsK,WAAWrK,SAAQ,SAAUsK,GAChCA,EAAOnK,Y,+BAKTJ,KAAKsK,WAAWrK,SAAQ,SAAUsK,GAChCA,EAAOlK,c,+BAIDC,GACRN,KAAKsK,WAAWrK,SAAQ,SAAUsK,GAChCA,EAAOhK,SAASD,Q,+BAMlBN,KAAKsK,WAAWrK,SAAQ,SAAUsK,GAChCA,EAAO/B,c,+BAKTxI,KAAKsK,WAAWrK,SAAQ,SAAUsK,GAChCA,EAAO/J,YAETR,KAAKsK,WAAa,KAClBtK,KAAKxC,KAAO,S,SAnCoB2C,GAAfkK","file":"barseries~pieseries~timeseries.min.js","sourcesContent":["export {\n  scaleBand,\n  scaleLinear,\n  scaleTime,\n  scaleSqrt,\n  scaleOrdinal,\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {schemeCategory10} from 'd3-scale-chromatic'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {partition, hierarchy} from 'd3-hierarchy'\n\nexport {path} from 'd3-path'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event,\n  touch as d3Touch,\n  touches as d3Touches\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport {zoom, zoomTransform} from 'd3-zoom'\n\nexport default {\n  version: 'v5'\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      let svgClass = 'vc-svg ' + (opts.chart.className || '')\n      if (this.options.chart.isTouchScreen) {\n        svgClass += ' vc-noselect'\n      }\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', svgClass)\n\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 100) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use charts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n      const tableStringArray = [] // used to show the tooltip in reverse order\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n\n        tableStringArray.push(`<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`)\n      }\n      // reverse the table string data (for stacked)\n      tableStringArray.reverse()\n\n      // construct the table string\n      tableStringArray.forEach((tString) => {\n        tableStr += tString\n      })\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    let formatter = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n\n\n    }\n    if (opts.series && opts.series.sunburst) {\n      formatter = function (d) {\n        if (!d || !d.value) {\n          return ''\n        }\n\n        const sunburstObj = this.options.series.sunburst\n        const format = sunburstObj.format || defaultValueFormat\n        return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value' colspan='2'>${format(d.value, sunburstObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n      }\n    }\n    opts.tooltip.format = formatter\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}"],"sourceRoot":""}