{"version":3,"sources":["webpack://vc/./data-parser/BasicPSParser.js","webpack://vc/./series/Pie.js","webpack://vc/./series/SunBurst.js","webpack://vc/./series/PieSeries.js","webpack://vc/./legend/PieSeriesLegend.js","webpack://vc/./data-parser/BasicSBParser.js","webpack://vc/./charts/PieSeriesChart.js","webpack://vc/./tooltip/BasicTooltip.js"],"names":["BasicPSParser","opts","this","dataOptions","data","series","constructPlotInfo","err","console","log","onError","Error","pieData","pieseries","plotInfo","eachPlotSet","othersArc","name","value","color","pieObj","pie","total","arcs","values","sort","a","b","forEach","arcInfo","ind","pieArcCount","refineName","refineString","visible","unit","push","plotSet","chartData","ChartDataParser","Pie","className","donutPercent","positionPercentage","seriesOrder","piePosPercentage","constants","PIE_POS_DEFAULT","radius","Math","floor","min","chart","chartWidth","chartHeight","order","d","donutLength","tooltipHelper","arc","outerRadius","PIE_TOOLTIP_BUFFER","innerRadius","self","pieTag","graphZone","append","attr","arcZone","selectAll","enter","each","style","PIE_DARK_OPACITY","on","txtEle","select","textPos","elementOffset","tooltip","hover","left","top","PIE_DULL_OPACITY","PIE_ARC_STROKE","transition","delay","attrTween","i","interpolate","PIE_HOVER_BUFFER","t","hide","centroid","text","showFlag","classed","remove","ChartComponent","SunBurst","sunBurstData","events","maxRadius","x","scaleLinear","range","PI","clamp","y","scaleSqrt","colorArray","getObject","options","colorSchema","length","schemeCategory10","scaleOrdinal","startAngle","x0","endAngle","x1","max","y0","y1","middleArcLine","halfPi","angles","r","middleAngle","invertDirection","reverse","paths","path","toString","textFits","deltaAngle","perimeter","svg","focusOn","fn","click","isFunction","call","sunTag","root","defaultDataParserApproach","valueModel","slice","descendants","exit","newSlice","nodes","d3Event","stopPropagation","elementArray","classList","add","uniqueId","textElem","pathElement","childNodes","fill","toolTipValue","DATA_PARSE_DEFAULT_TYPE","dataObj","parentObj","depthSize","depth","dataName","k","parent","_","duration","SUN_BURST_TRANSITION_TIME","tween","xd","domain","yd","moveStackToFront","elD","filter","index","elemArray","elem","parentNode","appendChild","PieSeries","plotSeries","pieInfo","sunburstInfo","sunburst","Series","PieSeriesLegend","maxWidthLegend","hasOverflow","eachPlotNames","textWidth","dummyG","legendPrefix","thisWidth","round","getComputedTextLength","LEGEND_MAX_WIDTH","maxYLen","chartFullSpace","height","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","width","legendDisplay","pieforeignDiv","legendBlock","legendXDiv","update","chartZoneWidth","node","getBBox","basicWidth","margin","right","LEGEND_RIGHT_BUFFER","pieLegendPos","PIE_POS_LEGEND","legendXPos","xBuff","legendYPos","show","BasicSBParser","jsonData","hierarchy","partitionData","partition","dataParserApproach","sum","parseFloat","eachObjValue","leafSum","children","chData","PieSeriesChart","container","startTime","Date","dataParser","addDefaultPSOptions","isObject","dataExecutor","chartInitilize","draw","tooltipOpts","Tooltip","chartComponentsArr","legend","document","implementation","hasFeature","legends","position","TimeSeriesLegend","afterDraw","chartResponsive","timeDiff","getTime","onComplete","Chart","BasicTooltip","format","toolTipDiv","displayData","excludeToolTipDiv","showHide","box","rootPos","xpos","ypos","html","$toolTipDiv"],"mappings":"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","file":"pieseries.min.js","sourcesContent":["import {refineString} from '@/utils'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\n\nexport default class BasicPSParser extends ChartDataParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while pieseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on pieseries JSON parsing')\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const pieData = resJson.pieseries\n    const plotInfo = dataOptions.series\n    const eachPlotSet = {}\n    const othersArc = {\n      name: 'Others',\n      value: 0,\n      color: '#324fff'\n    }\n\n    // Create pieSet for each pie charts and arcInfo which contains each pie arcs to be drawn\n    const pieObj = plotInfo.pie\n    pieObj.total = 0\n    const arcs = []\n\n    // Find total value for entire pie chart\n    const allArcArr = pieData.values\n\n    allArcArr.sort(function (a, b) {\n      return (b.value - a.value)\n    }).forEach(function (arcInfo, ind) {\n      if (pieObj.pieArcCount && (ind + 1) >= pieObj.pieArcCount) {\n        // Add to others arc\n        othersArc.value += arcInfo.value\n      } else {\n        const refineName = refineString(arcInfo.name)\n        // arcInfo.name = refineName\n        eachPlotSet[refineName] = {}\n        eachPlotSet[refineName].name = arcInfo.name\n        eachPlotSet[refineName].color = arcInfo.color\n        eachPlotSet[refineName].value = arcInfo.value\n        eachPlotSet[refineName].visible = true\n        eachPlotSet[refineName].unit = pieObj.unit\n        arcs.push(arcInfo)\n      }\n      pieObj.total += arcInfo.value\n     \n    })\n    // Add others to arc\n    if (othersArc.value) {\n      const refineName = refineString(othersArc.name)\n      // othersArc.name = refineName\n      eachPlotSet[refineName] = {}\n      eachPlotSet[refineName].name = othersArc.name\n      eachPlotSet[refineName].color = othersArc.color\n      eachPlotSet[refineName].value = othersArc.value\n      eachPlotSet[refineName].visible = true\n      eachPlotSet[refineName].unit = pieObj.unit\n      arcs.push(othersArc)\n    }\n\n    return {\n      plotSet: eachPlotSet,\n      series: {\n        pie: pieObj\n      },\n      chartData: {\n        name: pieObj.name,\n        arcs\n      }\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {pie, arc, interpolate, select} from '@/d3Importer'\nimport {elementOffset} from '@/utils'\n\nexport default class Pie extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      pieData: null,\n      donutPercent: 100,\n      positionPercentage: null,\n      seriesOrder: true,\n      visible: true\n    }, opts)\n\n    this.opts.piePosPercentage = this.opts.positionPercentage || (constants.PIE_POS_DEFAULT / 100)\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n\n    // X Position of pie graph on the chart\n    this.pie = pie()\n\n    if (this.opts.seriesOrder) {\n      this.pie\n        .sort(function (a, b) {\n          return (b.order - a.order) // Sort based on each series order\n        })\n    }\n\n    this.pie\n      .value(function (d) {\n        return d.value // provide index of this series in data Arr\n      })\n\n\n    if (this.opts.donutPercent > 100 || this.opts.donutPercent < 0) {\n      this.opts.donutPercent = 100\n    }\n\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.opts.tooltipHelper = arc()\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arc = arc()\n    // .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n  }\n\n  draw () {\n\n    const outerRadius = this.opts.radius\n    const arc = this.arc\n    const self = this\n    this.pieTag = this.opts.chart.graphZone.append('g')\n      .attr('class', 'vc-pie-plot vc-pie-' + this.opts.className)\n      .attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n\n    this.arcZone = this.pieTag.selectAll('.vc-pie-arc')\n      .data(this.pie(this.opts.pieData.arcs))\n      .enter().append('g')\n      .attr('class', 'vc-pie-arc')\n\n    this.arcZone.append('path')\n      .each(function (d) {\n        d.outerRadius = outerRadius\n      })\n      .attr('d', this.arc)\n      .attr('fill', function (d) {\n        return d.data.color\n      })\n      .style('opacity', constants.PIE_DARK_OPACITY)\n      .style('stroke-width', 0)\n      .on('mouseover', function (d, ind) {\n        // tooltip feature\n        const txtEle = self.arcZone.select(`.vc-tool-text_${ind}`)\n        const textPos = elementOffset(txtEle) // Find position of Arc respective tooltipHelper\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(textPos.left, textPos.top, d)\n        // Dull all other Arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DULL_OPACITY)\n        // Provide new radius and stroke-width\n        select(this)\n          .style('opacity', constants.PIE_DARK_OPACITY)\n          .style('stroke-width', constants.PIE_ARC_STROKE)\n          .transition().delay(10).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius + constants.PIE_HOVER_BUFFER)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n      .on('mouseout', function (d) { // Hide tooltip\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n        // Provide dark opacity to all arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DARK_OPACITY)\n        // Revert back to its loaded radius\n        select(this)\n          .style('stroke-width', 0)\n          .transition().delay(150).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n\n    // Add tooltip-helper for each arc outside pie area\n    this.arcZone.append('text')\n      .attr('class', function (d, ind) {\n        return `vc-tool-text_${ind}`\n      })\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  update () {\n    const self = this\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n    this.pieTag.attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.arc\n      .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n\n    this.opts.tooltipHelper\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arcZone.select('path').attr('d', this.arc)\n    this.arcZone.select('text')\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.pieTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.arcZone && this.arcZone.remove()\n    this.pieTag && this.pieTag.remove()\n    this.opts.tooltipHelper = null\n    this.arc = null\n    this.pie = null\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, elementOffset} from '@/utils'\nimport {arc, scaleLinear, d3Event, scaleSqrt, scaleOrdinal, path, schemeCategory10, interpolate} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class SunBurst extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      sunBurstData: null,\n      visible: true,\n      events: {},\n    }, opts)\n    this.maxRadius = Math.floor(Math.min(this.opts.chart.chartWidth, this.opts.chart.chartHeight) / 2)\n    this.x = scaleLinear()\n      .range([0, 2 * Math.PI])\n      .clamp(true) // scale the data upto 360 degree from 0 and clamp true means not exceed the range\n\n    this.y = scaleSqrt()\n      .range([this.maxRadius * 0.1, this.maxRadius]) // circle is scaled as area in sqrt and range is max radius * .1 to max Radius\n\n    const colorArray = getObject(this.opts.chart.options, 'series.sunburst.color') || []\n    const colorSchema = colorArray.length ? colorArray : schemeCategory10\n\n    this.color = scaleOrdinal(colorSchema) // Give different color for each data d3 inbuilt schema\n\n    /*\n        create the arc for each data object\n        X(d.x0) start angle calculated by d3 after partition  and also scaled in that range\n        X(d.x1) end point angle calculated\n        this is same for d.y0 and d.y1 calculated based on data\n    */\n    this.arcs = arc()\n      .startAngle(d => this.x(d.x0))\n      .endAngle(d => this.x(d.x1))\n      .innerRadius(d => Math.max(0, this.y(d.y0)))\n      .outerRadius(d => Math.max(0, this.y(d.y1)))\n\n    /*\n        To  Format the text and show the text based on arc position\n      */\n    this.middleArcLine = d => {\n      const halfPi = Math.PI / 2\n      const angles = [this.x(d.x0) - halfPi, this.x(d.x1) - halfPi]\n      const r = Math.max(0, (this.y(d.y0) + this.y(d.y1)) / 2)\n\n      const middleAngle = (angles[1] + angles[0]) / 2\n      const invertDirection = middleAngle > 0 && middleAngle < Math.PI // On lower quadrants write text\n      if (invertDirection) { angles.reverse() }\n\n      const paths = path()\n\n      paths.arc(0, 0, r, angles[0], angles[1], invertDirection)\n\n      return paths.toString()\n    }\n\n    // To find if the text is fits inside the arc\n    this.textFits = d => {\n      const CHAR_SPACE = 8 // each character space\n\n      const deltaAngle = this.x(d.x1) - this.x(d.x0) // angle of arc that can be treated as theta\n      const r = Math.max(0, (this.y(d.y0) + this.y(d.y1)) / 2) // radius from center of circle to arc drown\n      const perimeter = r * deltaAngle // perimeter of arc is r* theta\n      // If name exceeds the arc perimeter dont show the name\n      return d.data.name.length * CHAR_SPACE < perimeter\n    }\n\n    /*\n    Append the svg  with view box attribute and on click focus for zoom control and to scale\n     */\n    // const clipElement = this.opts.chart.container.select('svg clipPath')\n    this.opts.chart.svg\n      .attr('viewBox', `${-this.opts.chart.chartWidth / 2} ${-this.opts.chart.chartHeight / 2} \n      ${this.opts.chart.chartWidth} ${this.opts.chart.chartHeight}`) // Adding view box for zoom control\n      .on('click', () => {\n        this.focusOn()\n        const fn = this.opts.events.click\n        if (isFunction(fn)) {\n          fn.call(this.opts.chart, null, null)\n        }\n      }) // Reset zoom on canvas click\n\n    this.sunTag = this.opts.chart.graphZone.append('g')\n      .attr('class', 'vc-sunburst-plot')\n  }\n\n  draw () {\n    const self = this\n    console.log('sunburst draw has been called')\n    // take the root hierarchy and form the sum based on size\n    const root = this.opts.sunBurstData\n    const defaultDataParserApproach =\n      getObject(this.opts.chart.options, 'series.sunburst.dataApproach')\n    const valueModel = getObject(this.opts.chart.options, 'series.sunburst.dataValueAttr')\n\n\n    // Calculate the x and y for the data\n    const slice = this.sunTag.selectAll('g.vc-slice')\n      .data(root.descendants())\n\n    // Data need to be removed same as enter this is used to exit the data\n    slice.exit().remove()\n\n    /* After click and removed the adding new data with <g> container\n    stop all other event on click\n    */\n    const newSlice = slice.enter()\n      .append('g').attr('class', 'vc-slice')\n      .style('cursor', 'pointer')\n      .on('click', (d, i, nodes) => {\n        d3Event.stopPropagation()\n        this.focusOn(d)\n        const fn = this.opts.events.click\n        if (isFunction(fn)) {\n          fn.call(this.opts.chart, d.data[valueModel], d)\n        }\n\n      })\n    // Attach the unique class names for any other operation if found in the data\n    newSlice.each((d, i, elementArray) => {\n      const elm = elementArray[i]\n      elm.classList.add(d.data && d.data.uniqueId ? d.data.uniqueId : '')\n    })\n    /*\n      For Tool tip to show\n     */\n    newSlice.on('mouseover', (d, ind, nodes) => {\n\n      let textElem = newSlice.select(`text.vc-sunburst-text${ind}`) // Actual container <g> element whole area\n      // If the text is not visible take the path element to show the tooltip\n      if (textElem.attr('display') === 'none') {\n        textElem = newSlice.select(`path.vc-sunburst-text${ind}`)\n      }\n      const textPos = elementOffset(textElem) // taking the area of hidden-arc to get position\n      const pathElement = nodes[ind].childNodes[0] // To get the color of path element main-arc get the color of path element main-arc\n      const color = pathElement && pathElement.style.fill\n      const toolTipValue = defaultDataParserApproach === constants.DATA_PARSE_DEFAULT_TYPE ? d.value : d.data[valueModel]\n      const dataObj = {\n        data: {\n          name: d.data && d.data.name,\n          value: toolTipValue,\n          color: color\n        }\n      }\n      self.opts.chart.tooltip && self.opts.chart.tooltip.hover(textPos.left, textPos.top, dataObj)\n    }).on('mouseout', function (d) { // Hide tooltip\n      self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n    })\n\n    // Append <path> tag under container and fill different colors\n    newSlice.append('path')\n      .attr('class', 'vc-main-arc')\n      .style('stroke', '#fff')\n      .style('stroke-width', '1px')\n      .style('fill', d => {\n        let parentObj = null\n        const depthSize = d.depth - 1 // for first depth\n        let dataName = d.data.name\n        // Go up to depth and get the parent data\n        for (let k = 0; k < depthSize; k++) {\n          parentObj = parentObj ? parentObj.parent : d.parent\n          dataName = getObject(parentObj, 'data.name')\n        }\n        // console.log(dataName)\n        return this.color(dataName)\n      })\n      .attr('d', this.arcs)\n\n\n    // //creating the hidden arc line\n    newSlice.append('path')\n      .attr('class', (d, i) => `vc-hidden-arc vc-sunburst-text${i}`) // Used for tooltip when text is hidden\n      .style('fill', 'none')\n      .attr('id', (_, i) => `vc-hiddenArc${i}`)\n      .attr('d', this.middleArcLine)\n\n    // append the text\n    const text = newSlice.append('text')\n      .attr('class', (d, i) => `vc-sunburst-text${i}`) // used for tooltip\n      .style('pointer-events', 'none')\n      .style('dominant-baseline', 'middle')\n      .style('text-anchor', 'middle')\n      .style('font-size', '.8rem')\n      .attr('display', d => this.textFits(d) ? null : 'none')\n\n    // Add white contour\n    text.append('textPath')\n      .text(d => d.data.name)\n\n    // Append the textPath and show the formatted Text according with position of arc\n    text.append('textPath')\n      .attr('startOffset', '50%')\n      .attr('xlink:href', (_, i) => `#vc-hiddenArc${i}`)\n      .text(d => d.data.name)\n  }\n\n  update () {\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.sunTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.sunTag && this.sunTag.remove()\n    this.arcs = null\n    this.opts = null\n    this.color = null\n    this.maxRadius = null\n    this.x = null\n    this.y = null\n    this.middleArcLine = null\n    this.textFits = null\n  }\n\n  focusOn (d = { x0: 0, x1: 1, y0: 0, y1: 1 }) {\n    // Reset to top-level if no data point specified\n    const self = this\n    const transition = this.sunTag.transition()\n      .duration(constants.SUN_BURST_TRANSITION_TIME)\n      .tween('scale', () => {\n        const xd = interpolate(this.x.domain(), [d.x0, d.x1])\n        const yd = interpolate(this.y.domain(), [d.y0, 1])\n        return t => { this.x.domain(xd(t)); this.y.domain(yd(t)) }\n      })\n\n    transition.selectAll('path.vc-main-arc')\n      .attrTween('d', d => () => self.arcs(d))\n\n    transition.selectAll('path.vc-hidden-arc')\n      .attrTween('d', d => () => self.middleArcLine(d))\n\n    transition.selectAll('text')\n      .attrTween('display', d => () => self.textFits(d) ? null : 'none')\n    // On click the parent or child needs to be focus\n\n    const moveStackToFront = (elD) => {\n      self.sunTag.selectAll('.vc-slice').filter(d => d === elD)\n        .each((d, index, elemArray) => {\n          const elem = elemArray[0]\n          elem.parentNode.appendChild(elem)\n          if (d.parent) { moveStackToFront(d.parent) }\n        })\n    }\n\n    moveStackToFront(d)\n\n\n  }\n}\n","import Series from '@/series/Series'\nimport Pie from '@/series/Pie'\nimport SunBurst from '@/series/SunBurst'\n\nexport default class PieSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData\n    const pieInfo = this.opts.chart.options.series.pie\n    const sunburstInfo = this.opts.chart.options.series.sunburst\n\n    // change base don series given\n    if (pieInfo) {\n      this.plotSeries.push(new Pie({\n        chart: this.opts.chart,\n        className: pieInfo.className || pieInfo.name,\n        pieData: data,\n        donutPercent: pieInfo.donutPercent || 100,\n        visible: pieInfo.visible\n      }))\n    } else if (sunburstInfo) {\n      this.plotSeries.push(new SunBurst({\n        chart: this.opts.chart,\n        className: sunburstInfo.className || sunburstInfo.name,\n        sunBurstData: data,\n        events: this.opts.chart.options.series.events || {},\n        visible: sunburstInfo.visible\n      }))\n    }\n\n  }\n\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\n\nexport default class PieSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.hasOverflow = false\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const textWidth = []\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n        }\n        textWidth.push(thisWidth)\n      })\n\n    dummyG.remove()\n\n    if (this.opts.maxWidthLegend > constants.LEGEND_MAX_WIDTH) {\n      this.opts.maxWidthLegend = constants.LEGEND_MAX_WIDTH\n    }\n\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n\n    const pieforeignDiv = this.legendDisplay\n      .append('foreignObject')\n      .attr('width', divWidth)\n      .attr('height', fullYLen)\n      .attr('class', 'vc-legend-right')\n      .append('xhtml:div')\n      .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n      .style('height', '100%')\n      .style('padding', '5px 0px')\n\n    if (fullYLen === maxYLen) {\n      // Add overflow to chart\n      pieforeignDiv\n        .style('overflow', 'auto')\n      this.opts.hasOverflow = true\n    }\n\n    this.legendBlock = pieforeignDiv\n      .selectAll('div')\n      .data(eachPlotNames)\n      .enter()\n      .append('div')\n      .attr('class', 'vc-legend-name')\n\n\n    this.legendBlock.append('span')\n      .style('background-color', function (d) {\n        return eachPlotSet[d].color\n      })\n\n    this.legendBlock.append('label')\n      .style('width', (divWidth - 40) + 'px')\n      .style('font-size', '11px')\n      .style('font-weight', '600')\n      .text(function (d) {\n        return (self.opts.legendPrefix + eachPlotSet[d].name)\n      })\n\n    this.legendXDiv = pieforeignDiv\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const chartZoneWidth = this.opts.chart.graphZone.node().getBBox().width\n    const basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right + constants.LEGEND_RIGHT_BUFFER\n\n    let pieLegendPos = constants.PIE_POS_LEGEND\n    if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n      pieLegendPos = constants.PIE_POS_LEGEND - 5\n    }\n\n    let legendXPos = Math.floor(this.opts.chart.chartWidth * pieLegendPos / 100)\n    let xBuff = this.opts.chart.chartWidth - legendXPos\n    xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n    legendXPos += xBuff\n\n    const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n    if (!this.opts.hasOverflow) {\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n    } else {\n      this.legendXDiv\n        .style('position', 'relative')\n        .style('top', legendYPos + 'px')\n        .style('left', legendXPos + 'px')\n    }\n\n    if (this.opts.chart.chartWidth < (basicWidth + chartZoneWidth)) {\n      // Hide legend display for pielegends\n      this.hide()\n    } else {\n      this.show()\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import ChartDataParser from '@/data-parser/ChartDataParser'\nimport {hierarchy, partition} from '@/d3Importer'\nimport {getObject} from '@/utils'\nimport constants from '@/constants'\n\n\nexport default class BasicSBParser extends ChartDataParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while sunburst JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on sunburst JSON parsing')\n    }\n  }\n\n\n  constructPlotInfo () {\n\n    // take the root hierarchy and form the sum based on size/value\n    const jsonData = this.opts.data\n    if (Object.keys(jsonData).length) {\n      const root = hierarchy(jsonData)\n      const partitionData = partition()\n\n      const dataParserApproach = getObject(this.opts, 'series.sunburst.dataApproach', constants.DATA_PARSE_DEFAULT_TYPE)\n      const valueModel = getObject(this.opts, 'series.sunburst.dataValueAttr', 'value')\n\n      // Check if it is top to bottom or bottom to top approach\n      if (dataParserApproach === constants.DATA_PARSE_DEFAULT_TYPE) {\n        root.sum(d => {\n          return parseFloat(d.data[valueModel])\n        })\n      } else {\n        root.each(d => {\n          // for first depth attach the value to the main object after hirarchy\n          // parse data\n          const eachObjValue = parseFloat(d.data[valueModel])\n          if (d.depth === 0) {\n            d.value = eachObjValue // calculated based on parent value is  assigned to value key\n          }\n          let leafSum = 0\n          if (d.children) {\n            d.children.forEach(chData => {\n              leafSum += parseFloat(chData.data[valueModel]) || 0\n            })\n          }\n          d.leafSum = leafSum\n          // Calculate child nodes value by formula (parentValue/ sum of all leafs value attached on parent) * current value\n          if (d.parent) {\n            d.value = d.parent.leafSum ? (d.parent.value / d.parent.leafSum) * eachObjValue : 0// EX: in ex data 10/7 * 3 for bangalur\n          }\n        })\n      }\n      partitionData(root)\n      return {\n        plotSet: [],\n        chartData: root,\n      }\n    } else {\n      throw new Error('Invalid JSON received - Error on sunburst JSON parsing')\n    }\n\n  }\n}\n","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport {addDefaultPSOptions} from '@/helpers'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicPSParser from '@/data-parser/BasicPSParser'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\nimport PieSeries from '@/series/PieSeries'\nimport PieSeriesLegend from '@/legend/PieSeriesLegend'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\nimport BasicSBParser from '@/data-parser/BasicSBParser'\n\nexport default class PieSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      if (opts.series.sunburst) {\n        opts.dataParser = new BasicSBParser(opts)\n      } else {\n        opts.dataParser = new BasicPSParser(opts)\n      }\n\n    }\n    // Check the dataParser exists and its instanceof ChartDataParser\n    if (!(opts.dataParser instanceof ChartDataParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartDataParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultPSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new PieSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      // IF browser supports foreignObject use pieLegends API\n      if (document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#Extensibility', '1.1')) {\n        this.legends = new PieSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      } else {\n        this.legends = new TimeSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      }\n\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('PieSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    this.chartResponsive()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.toolTipDiv = this.opts && this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    this.showHide(true)\n    // This will be called by series -- bar / pie\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    let xpos = Math.round(x - rootPos.left)\n    let ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (box.width / 2))\n      ypos = Math.round(ypos - (box.height / 2))\n    }\n\n\n    this.toolTipDiv\n      .style('left', xpos + 'px')\n      .style('top', ypos + 'px')\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n"],"sourceRoot":""}