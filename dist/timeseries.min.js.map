{"version":3,"sources":["webpack://vc/./data-parser/BasicTSParser.js","webpack://vc/./tooltip/TimeSeriesTooltip.js","webpack://vc/./mouse-handler/index.js","webpack://vc/./zoom/index.js","webpack://vc/./zoom/GestureZoom.js","webpack://vc/./series/Line.js","webpack://vc/./series/StackArea.js","webpack://vc/./series/TimeSeries.js","webpack://vc/./charts/TimeSeriesChart.js","webpack://vc/./axis/index.js"],"names":["BasicTSParser","opts","this","dataOptions","data","series","yAxis","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","console","log","onError","Error","seriesData","timeseries","columns","values","validJSONType","length","firstTime","isNumber","isDate","start","forEach","d","getDateFromEpoc","chartData","timeInfo","dataIndex","timeRange","eachPlotSet","plotSet","plotInfo","getObject","yAxis2","findEachPlotRange","key","yRange","yRange2","min","max","minVal","maxVal","stack","plot","eachPlot","Infinity","plotData","valueRange","valData","memberArr","stackOrderMembers","sum","member","name","visible","allMax","allMax2","plotAxis","allMin","allMin2","yMin","yMax","reduce","a","b","ind","timeStampIndex","dataColorArr","color","yLeft","yRight","refineName","refineString","unit","isBoolean","barOrderMembers","ChartAxisParser","TimeSeriesTooltip","crossHairs","enable","isFunction","format","toolTipDiv","chart","container","append","attr","className","svg","margin","left","top","constants","TOOLTIP_TOP_BUFFER","chartHeight","mouseHandler","register","self","xScale","dateIndex","options","dataSet","bisectDate","bisector","eventName","isTouchScreen","mouseBrush","on","xMouse","d3Mouse","yMouse","xVal","invert","found","dBefore","dPrev","dFound","toolTipData","chartWidth","dataParseLen","Math","floor","visibleDataIndex","pl","multiArrMap","dSet","filter","val","index","sort","maxInd","mp","arrSet","dateIntRange","abs","hover","hide","select","setTimeout","xPos","yPos","displayData","showHide","percentageDiff","box","elementOffset","rootPos","round","width","height","style","html","call","showFlag","classed","remove","ChartComponent","MouseHandler","registerFn","zoom","callback","push","fun","Zoom","onZoom","emptyFn","onY1Zoom","onY2Zoom","yScaleLeft","yScaleRight","brushOverlay","brushX","extent","brushXDiv","selectAll","d3Event","selection","d0","map","d1","move","xAxis","modifyAxisProps","domainScale","update","brushYLeft","brushY","brushYLeftDiv","brushYRight","brushYRightDiv","BRUSHY_BUFFER","right","GestureZoom","startPos","endPos","zoomX","scaleExtent","translateExtent","touchable","zoomXDiv","isGesture","tooltip","touches","d3Touches","updatebrushXSelection","xPos1","xPos2","xMin","xMax","startVal","startDt","endVal","endDt","Line","DIR_LEFT","DIR_BOTTOM","lineData","yAxisTarget","xAxisTarget","dots","radius","x","indexOf","DIR_TOP","y","DIR_RIGHT","line","defined","lineTag","graphZone","enter","clipElement","lineWidth","totalLineLength","seriesName","draw","StackArea","stackData","stackOrderIndex","ele","d3Stack","area","i","y0","y1","keys","order","stackOrderNone","offset","stackOffsetNone","stackVisibleOrder","stackLayer","stackMember","TimeSeries","plotSeries","isArray","Series","TimeSeriesChart","startTime","Date","dataParser","isObject","dataExecutor","addDefaultTSOptions","chartInitilize","axisOptions","Axis","position","orient","rangeScale","chartComponentsArr","tooltipOpts","Tooltip","zoomOpts","zoomFn","zoomBrush","onXZoom","legend","legends","TimeSeriesLegend","legendPrefix","disableSeriesToggle","onLegendChange","afterDraw","reScaleYAxis","chartResponsive","triggerMouseAction","timeDiff","getTime","onComplete","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","tickValues","reScaleAxis","requiredWidth","class","maxText","dummyG","axis","each","tickHtml","text","String","getComputedTextLength","Y_AXIS_SPACE","chartFullSpace","Chart","label","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","axisBottom","axisTop","tickSizeInner","axisLeft","axisRight","externalFormatter","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","padding","clamp","range","domain","tickVal","newTick","dayLength","minuteLength","ticks","limitText","tickFmt","truncateText"],"mappings":"2TAGqBA,E,YACnB,WAAaC,GAAM,2DACXA,IADW,OAEjB,EAAKA,KAAOA,EAFK,E,4DAOjB,IAYE,OAVAC,KAAKC,YAAc,GACnBD,KAAKD,KAAKG,OAASF,KAAKC,YAAYC,KAAOF,KAAKD,KAAKG,MACrDF,KAAKD,KAAKI,SAAWH,KAAKC,YAAYE,OAASH,KAAKD,KAAKI,QACzDH,KAAKD,KAAKK,QAAUJ,KAAKC,YAAYG,MAAQJ,KAAKD,KAAKK,OAEvD,IAAcJ,KAAKC,YAAaD,KAAKK,sBACrC,IAAcL,KAAKC,YAAaD,KAAKM,sBACrC,IAAcN,KAAKC,YAAaD,KAAKO,qBACrC,IAAcP,KAAKC,YAAaD,KAAKQ,sBAE9BR,KAAKC,YAEZ,MAAOQ,GAGP,MAFAC,QAAQC,IAAI,oDAAqDF,GACjET,KAAKD,KAAKa,QAAQH,GACZ,IAAII,MAAM,+D,2CAKlB,IAEMC,EAFcd,KAAKC,YACGC,KACDa,WACrBC,EAAUF,EAAWE,QACrBd,EAAOY,EAAWG,OAClBC,EAAiBF,EAAQG,QAAUjB,EAAKiB,OAIxCC,EAAYlB,EAAK,GADA,GAEvB,IAAKgB,IAAmBG,YAASD,KAAcE,YAAOF,GACpD,MAAM,IAAIP,MAAM,qCAGlB,IAAIU,EAAQ,EASZ,OARArB,EAAKsB,SAAQ,SAAUC,GACrB,GAAIF,EAAQE,EARS,GASnB,MAAM,IAAIZ,MAAM,kFAElBU,EAAQE,EAXa,GAYrBA,EAZqB,GAYDC,YAAgBD,EAZf,IAYkC,MAGlD,CACLE,UAAWzB,K,2CAKb,IACMY,EADcd,KAAKC,YACM0B,UAE/B,MAAO,CACLC,SAAU,CACRC,UAHc,EAIdC,UAAW,CAAChB,EAAW,GAJT,GAIwBA,EAAYA,EAAWK,OAAS,GAJxD,Q,2CAUlB,IAAMlB,EAAcD,KAAKC,YACnB8B,EAAc9B,EAAY+B,QAC1BC,EAAWhC,EAAYE,OACvBD,EAAOD,EAAY0B,UACnBvB,EAAQ8B,YAAUjC,EAAa,cAC/BkC,EAASD,YAAUjC,EAAa,eAClCmC,GAAoB,EACpBC,SACAC,EAAS,KACTC,EAAU,KA2Jd,OAxJInC,GACE,IAAgBA,EAAMoC,MAAQ,IAAgBpC,EAAMqC,OACtDH,EAAS,CAAClC,EAAMoC,IAAKpC,EAAMqC,MAI3BN,GACE,IAAgBA,EAAOK,MAAQ,IAAgBL,EAAOM,OACxDF,EAAU,CAACJ,EAAOK,IAAKL,EAAOM,OAK7BrC,IAAUkC,GAAYH,IAAWI,IAAU,WAE9C,IAAKF,KAAON,EACV,IAAK,IAAgBA,EAAYM,GAAKK,UAAY,IAAgBX,EAAYM,GAAKM,QAAS,CAC1FP,GAAoB,EACpB,MAIJ,GAAKH,EAASW,OAASX,EAASW,MAAMzB,QAAWiB,EAAmB,CAElE,GAAIA,EAEF,IAAK,IAAMS,KAAQd,EAAa,CAC9B,IAAMe,EAAWf,EAAYc,GAC7BC,EAASJ,OAASK,IAClBD,EAASH,QAAUI,IAKvBd,EAASW,OAASX,EAASW,MAAMpB,SAAQ,SAAUwB,GACjDA,EAASC,WAAa,CAACF,KAAWA,QAIpC,IAAIG,EAAU,EACdhD,EAAKsB,SAAQ,SAAUC,GACrB,GAAIW,EACF,IAAK,IAAMS,KAAQd,EAAa,CAC9B,IAAMe,EAAWf,EAAYc,IAC7BK,EAAUzB,EAAEqB,EAASjB,YACPiB,EAASJ,SACrBI,EAASJ,OAASQ,GAEhBA,EAAUJ,EAASH,SACrBG,EAASH,OAASO,GAKxBjB,EAASW,OAASX,EAASW,MAAMpB,SAAQ,SAAUwB,GACjD,IAAMG,EAAYH,EAASI,kBACvBC,EAAM,EACVF,EAAU3B,SAAQ,SAAU8B,GAC1BD,GAAQtB,EAAYuB,EAAOC,MAAMC,QAAU/B,EAAEM,EAAYuB,EAAOC,MAAM1B,WAAa,KAGjFwB,EAAML,EAASC,WAAW,KAC5BD,EAASC,WAAW,GAAKI,GAEvBA,EAAML,EAASC,WAAW,KAC5BD,EAASC,WAAW,GAAKI,SAOjC,IAAII,GAAUV,IACVW,GAAWX,IACf,IAAKV,KAAOJ,EACE,SAARI,EACFJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC1BjB,EAAYiB,EAASO,MAAMC,SAAsD,SAA3CzB,EAAYiB,EAASO,MAAMI,SAAS,IAAiB5B,EAAYiB,EAASO,MAAMZ,OAASc,IACjIA,EAAS1B,EAAYiB,EAASO,MAAMZ,QAElCZ,EAAYiB,EAASO,MAAMC,SAAsD,UAA3CzB,EAAYiB,EAASO,MAAMI,SAAS,IAAkB5B,EAAYiB,EAASO,MAAMZ,OAASe,IAClIA,EAAU3B,EAAYiB,EAASO,MAAMZ,WAGxB,UAARN,GACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GACD,SAAzBA,EAASW,SAAS,IAAiBX,EAASC,WAAW,GAAKQ,IAC9DA,EAAST,EAASC,WAAW,IAEF,UAAzBD,EAASW,SAAS,IAAkBX,EAASC,WAAW,GAAKS,IAC/DA,EAAUV,EAASC,WAAW,OAOtC,IAAIW,EAASb,IACTc,EAAUd,IACd,IAAKV,KAAON,EAC2B,SAAjCA,EAAYM,GAAKsB,SAAS,IAAiB5B,EAAYM,GAAKmB,SAAWzB,EAAYM,GAAKK,OAASkB,IACnGA,EAAS7B,EAAYM,GAAKK,QAES,UAAjCX,EAAYM,GAAKsB,SAAS,IAAkB5B,EAAYM,GAAKmB,SAAWzB,EAAYM,GAAKK,OAASmB,IACpGA,EAAU9B,EAAYM,GAAKK,QAK/B,IAAIoB,SAAMC,SAEN,CAACH,EAAQH,GAAQO,QAAO,SAAUC,EAAGC,GACvC,OAAO,IAAgBD,IAAM,IAAgBC,OAE7CJ,EAAO5B,YAAUjC,EAAa,kBAC9B6D,EAAO,IAAgBA,GAAQA,EAAOF,EACtCG,EAAO7B,YAAUjC,EAAa,mBAC9B8D,EAAO,IAAgBA,GAAQA,EAAON,KAEpCM,EAAOD,EAAO,IAEhBxB,EAAS,CAACwB,EAAMC,IAGdzB,IADElC,GACO,CAAC,EAAG,IAOb,CAACyD,EAASH,GAASM,QAAO,SAAUC,EAAGC,GACzC,OAAO,IAAgBD,IAAM,IAAgBC,OAE7CJ,EAAO5B,YAAUjC,EAAa,mBAC9B6D,EAAO,IAAgBA,GAAQA,EAAOD,EACtCE,EAAO7B,YAAUjC,EAAa,oBAC9B8D,EAAO,IAAgBA,GAAQA,EAAOL,KAEpCK,EAAOD,EAAO,IAEhBvB,EAAU,CAACuB,EAAMC,IAGfxB,IADEJ,GACQ,CAAC,EAAG,IAnI4B,GA2IzC,CACLG,OAAQA,EACRC,QAASA,K,0CAKX,IAAMtC,EAAcD,KAAKC,YAEnBa,EADUb,EAAYC,KACDa,WACrBC,EAAUF,EAAWE,QACvBmD,EAAM,EAEJpC,EAAc,GAEdE,EAAWhC,EAAYE,OACzBkC,SAEE+B,EAAiBnE,EAAY2B,SAASC,UACtCwC,EAAevD,EAAWwD,OAAS,GACnCC,EAAQrC,YAAUjC,EAAa,cAC/BuE,EAAStC,YAAUjC,EAAa,eAsBtC,IAAKoC,KAnBLrB,EAAQQ,SAAQ,SAAUC,GACxB,GAAI2C,IAAmBD,EAAvB,CAKA,IAAMM,EAAaC,YAAajD,GAChCM,EAAY0C,GAAc,CACxBlB,KAAM9B,EACNI,UAAWsC,EACXzB,OAAQK,IACRJ,QAASI,IACTS,SAAS,EACTc,MAAOD,EAAaF,IAAQ,QAE9BA,SAbEA,OAiBQlC,EACE,SAARI,EACFJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9BA,EAASO,KAAOmB,YAAa1B,EAASO,MACtC,IAAMe,EAAQtB,EAASsB,MACvB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYiB,EAASO,MAAMe,MAAQA,GAC7C,IAAMX,EAAWX,EAASW,UAAY,CAAC,OAAQ,UAC/C5B,EAAYiB,EAASO,MAAMI,SAAWA,EACtC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYiB,EAASO,MAAMoB,KAAOA,EAClCC,YAAU5B,EAASQ,WAAazB,EAAYiB,EAASO,MAAMC,QAAUR,EAASQ,YAE/D,UAARnB,EACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9B,IAAMG,EAAYH,EAASI,kBAC3BJ,EAASC,WAAa,CAACF,KAAWA,KAClCI,EAAU3B,SAAQ,SAAU8B,GAC1BA,EAAOC,KAAOmB,YAAapB,EAAOC,MAClC,IAAMe,EAAQhB,EAAOgB,MACrB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYuB,EAAOC,MAAMe,MAAQA,GAC3C,IAAMX,EAAWL,EAAOK,UAAY,CAAC,OAAQ,UAC7C5B,EAAYuB,EAAOC,MAAMI,SAAWA,EACpC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYuB,EAAOC,MAAMoB,KAAOA,EAChCC,YAAUtB,EAAOE,WAAazB,EAAYuB,EAAOC,MAAMC,QAAUF,EAAOE,eAG3D,QAARnB,GACTJ,EAASI,GAAKb,SAAQ,SAAUwB,GAC9B,IAAMG,EAAYH,EAAS6B,gBAC3B7B,EAASC,WAAa,CAACF,KAAWA,KAClCI,EAAU3B,SAAQ,SAAU8B,GAC1BA,EAAOC,KAAOmB,YAAapB,EAAOC,MAClC,IAAMe,EAAQhB,EAAOgB,MACrB,IAAKA,EACH,qCAAsCtB,EAASO,KAEjDe,IAAUvC,EAAYuB,EAAOC,MAAMe,MAAQA,GAC3C,IAAMX,EAAWL,EAAOK,UAAY,CAAC,OAAQ,UAC7C5B,EAAYuB,EAAOC,MAAMI,SAAWA,EACpC,IAAMgB,EAAuB,SAAhBhB,EAAS,GAAgBY,EAAMI,KAAOH,EAAOG,KAC1D5C,EAAYuB,EAAOC,MAAMoB,KAAOA,EAChCC,YAAUtB,EAAOE,WAAazB,EAAYuB,EAAOC,MAAMC,QAAUF,EAAOE,eAMhF,MAAO,CACLrD,OAAQ8B,EACRD,QAASD,O,GA9U4B+C,K,gCCEtBC,E,YACnB,WAAahF,GAAM,oEAEjB,EAAKA,KAAO,IAAc,CACxBiF,WAAY,CACVC,QAAQ,GAEVzB,SAAS,GACRzD,GAGEmF,YAAW,EAAKnF,KAAKoF,UACxB,EAAKpF,KAAKoF,OAAS,SAAU1D,GAC3B,iDAAkD,IAAeA,GAAjE,YAZa,E,oDAiBX,WACNzB,KAAKgF,YAAa,EAClBhF,KAAKoF,WAAapF,KAAKD,KAAKsF,MAAMC,UAC/BC,OAAO,OACPC,KAAK,QAAS,sBAAwBxF,KAAKD,KAAK0F,YAEf,IAAhCzF,KAAKD,KAAKiF,WAAWC,SACvBjF,KAAKgF,WAAahF,KAAKD,KAAKsF,MAAMK,IAC/BH,OAAO,KACPC,KAAK,QAAS,mBACjBxF,KAAKgF,WAAWO,OAAO,QACpBC,KAAK,YAAa,wBAClBA,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOE,IAAMC,IAAUC,oBAClDP,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAOxF,KAAKD,KAAKsF,MAAMW,YAAchG,KAAKD,KAAKsF,MAAMM,OAAOE,MAItE7F,KAAKD,KAAKsF,MAAMY,aAAaC,UAAS,WAEpC,IAAMC,EAAO,EACPC,EAASlE,YAAU,EAAKnC,KAAM,uBAAwB,EACtDkG,EAAe,EAAKlG,KAAKsF,MAAMY,aAC/BI,EAAY,EAAKtG,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC7C0E,EAAU,EAAKxG,KAAKsF,MAAMiB,QAAQ3E,UAElC6E,EAAaC,aAAS,SAAUhF,GACpC,OAAOA,EAAE4E,MACRT,KA+ECc,EAAY,YACZ,EAAK3G,KAAKsF,MAAMiB,QAAQjB,MAAMsB,gBAChCD,EAAY,YAEdT,EAAaW,WACVC,GAAGH,GAlFW,SAAUjF,GAEzB,IAAMqF,EAASC,YAAQ/G,MAAM,GACvBgH,EAASD,YAAQ/G,MAAM,GACvBiH,EAAOb,EAAOc,OAAOJ,GAGrBK,EAAQX,EAAWD,EAASU,EAAM,GAGlCG,EAAUb,EAAQY,EAAQ,GAG1BE,EAAQd,EAAQY,EAAQ,GAGxBG,EAASf,EAAQY,IAAUE,EAE7BE,EAAcF,EACdd,EAAQpF,OAASgF,EAAKpG,KAAKsF,MAAMmC,WAAY,WAE/C,IAAMC,EAAeC,KAAKC,MAAMpB,EAAQpF,OAASgF,EAAKpG,KAAKsF,MAAMmC,YAAc,EAEzEI,EAAmB,GAEzB,IAAK,IAAMC,KAAM1B,EAAKpG,KAAKsF,MAAMiB,QAAQtE,QAAS,CAChD,IAAMa,EAAOsD,EAAKpG,KAAKsF,MAAMiB,QAAQtE,QAAQ6F,GACzChF,EAAKW,UACPoE,EAAiB/E,EAAKhB,YAAa,GAMvC,IAFA,IAAMiG,EAAc,GAEX3D,EAAOgD,EAAQM,EAAetD,EAAOgD,EAAQM,EAAetD,IACnE,GAAIoC,EAAQpC,GAAM,CAChB,IAAM4D,EAAOxB,EAAQpC,GAAK6D,QAAO,SAAUC,EAAKC,GAC9C,OAAON,EAAiBM,MACvBC,MAAK,SAAUlE,EAAGC,GACnB,OAAOA,EAAID,KAET8D,EAAK5G,SACP2G,EAAY3D,GAAO4D,GAIzB,IAAIK,SACAzF,GAAUI,IACd,IAAK,IAAMsF,KAAMP,EAAa,CAC5B,IAAMQ,EAASR,EAAYO,GACvB1F,EAAS2F,EAAO,KAClB3F,EAAS2F,EAAO,GAChBF,EAASC,GAIbd,EAAchB,EAAQ6B,IAAWd,EArCc,GAwC/CC,EAAeN,EAAOI,EAAMhB,GAAeiB,EAAOjB,GAAaY,EAAQK,EAASD,EAGlF,IAAIkB,EAAejB,EAAOjB,GAAagB,EAAMhB,IAExCkC,GAAgBnB,IACnBmB,EAAelB,EAAMhB,GAAae,EAAQf,IAGxCkC,EAAeb,KAAKc,IAAIlB,EAAOjB,GAAaY,MAE9CM,EAAc,IACFlB,GAAaY,GAG3Bd,EAAKsC,MAAM3B,EAAQE,EAAQO,MAS1BV,GAAG,YAAY,WACdV,EAAKuC,UAEN7B,GAAG,aAAa,WACfV,EAAKuC,UAGTzC,EAAaW,WAAW+B,OAAO,gBAC5B9B,GAAG,aAAa,WACfV,EAAKuC,UAGL,EAAK3I,KAAKsF,MAAMiB,QAAQjB,MAAMsB,gBAEhC,EAAK8B,MAAM,EAAG,EAAGlC,EAAQ,IACzBqC,YAAW,WACTzC,EAAKuC,SACJ,U,4BAMFG,EAAMC,EAAMC,GAEjB/I,KAAKgF,YAAchF,KAAKgF,WAAW2D,OAAO,QACvCnD,KAAK,YADW,aACeqD,EADf,OAEhBrD,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOE,IAAMC,IAAUC,oBAClDP,KAAK,KAAMxF,KAAKD,KAAKsF,MAAMM,OAAOC,MAClCJ,KAAK,KAAOxF,KAAKD,KAAKsF,MAAMW,YAAchG,KAAKD,KAAKsF,MAAMM,OAAOE,KACpE7F,KAAKgJ,UAAS,GAEd,IAAIC,EAAiBJ,EAAO7I,KAAKD,KAAKsF,MAAMmC,WAExCyB,EAAiB,KACnBA,EAAiB,IAEfA,EAAiB,KACnBA,EAAiB,KAGnB,IAAMC,EAAMC,YAAcnJ,KAAKoF,YACzBgE,EAAUD,YAAcnJ,KAAKD,KAAKsF,MAAMC,WACxCM,EAAO8B,KAAK2B,MAAMD,EAAQxD,KAAO5F,KAAKD,KAAKsF,MAAMM,OAAOC,KAAOiD,EAAOK,EAAII,MAAQL,GAAkB,KACpGpD,EAAM6B,KAAK2B,MAAMD,EAAQvD,IAAMqD,EAAIK,OAAS,EAAmC,EAA/BzD,IAAUC,oBAA0B,KAG1F/F,KAAKoF,WACFoE,MAAM,OAAQ5D,GACd4D,MAAM,MAAO3D,GACb2D,MAAM,UAAW,gBACjBC,KAAKzJ,KAAKD,KAAKoF,OAAOuE,KAAK1J,KAAKD,KAAKsF,MAAO0D,M,+BAGvCY,GACRA,IAAaA,EAEb3J,KAAKgF,YAAchF,KAAKgF,WAAW4E,QAAQ,aAAcD,GACzD3J,KAAKoF,YAAcpF,KAAKoF,WAAWwE,QAAQ,aAAcD,GACzD3J,KAAKD,KAAKyD,QAAUmG,I,+BAIpB3J,KAAKoF,YAAcpF,KAAKoF,WAAWyE,SACnC7J,KAAKgF,YAAchF,KAAKgF,WAAW6E,SACnC7J,KAAKD,KAAO,S,GAtM+B+J,KCH1BC,E,YACnB,WAAahK,GAAM,oEAEjB,EAAKA,KAAOA,EACZ,EAAKA,KAAKiK,WAAa,GAHN,E,oDAOjBhK,KAAK4G,WAAa5G,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC1CC,KAAK,QAAS,aACdA,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,aAC/BR,KAAK,OAAQ,QACbA,KAAK,iBAAkB,OACvBA,KAAK,QAAS,iDACdA,KAAK,YAPU,aAOgBxF,KAAKD,KAAKsF,MAAMM,OAAOC,KAPvC,IAO+C5F,KAAKD,KAAKsF,MAAMM,OAAOE,IAPtE,KASd7F,KAAKD,KAAKsF,MAAMiB,QAAQjB,MAAMsB,eAChC3G,KAAK4G,WAAWpB,KAAK,SAAU,WAG5BxF,KAAKD,KAAKsF,MAAMiB,QAAQ2D,KAAKzG,UAAWxD,KAAKD,KAAKsF,MAAMiB,QAAQjB,MAAMsB,eAEzE3G,KAAK4G,WAAWrB,OAAO,QACpBC,KAAK,QAAS,WACdA,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,e,+BAKpChG,KAAK4G,WAAWpB,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC3ChC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,aAC/BR,KAAK,YAFR,aAEkCxF,KAAKD,KAAKsF,MAAMM,OAAOC,KAFzD,IAEiE5F,KAAKD,KAAKsF,MAAMM,OAAOE,IAFxF,KAGK7F,KAAKD,KAAKsF,MAAMiB,QAAQ2D,KAAKzG,UAAWxD,KAAKD,KAAKsF,MAAMiB,QAAQjB,MAAMsB,eACzE3G,KAAK4G,WAAW+B,OAAO,gBACpBnD,KAAK,QAASxF,KAAKD,KAAKsF,MAAMmC,YAC9BhC,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,e,+BAI5B2D,GACRA,IAAaA,EACb3J,KAAK4G,YAAc5G,KAAK4G,WAAWgD,QAAQ,aAAcD,K,+BAGjDO,GACRlK,KAAKD,KAAKiK,WAAWG,KAAKD,K,2CAGN,WACpBlK,KAAKD,KAAKiK,WAAWxI,SAAQ,SAAC4I,GAC5BA,EAAIV,KAAK,Q,+BAKX1J,KAAK4G,YAAc5G,KAAK4G,WAAWiD,SACnC7J,KAAKD,KAAO,S,GA5D0B+J,KCGrBO,E,YACnB,WAAatK,GAAM,oEAEjB,EAAKA,KAAO,IAAc,CACxBuK,OAAQC,IACRC,SAAUD,IACVE,SAAUF,KACTxK,GANc,E,oDAUjB,IAAMoG,EAAOnG,KACPoG,EAASlE,YAAUlC,KAAKD,KAAM,uBAAwB,EACtD2K,EAAaxI,YAAUlC,KAAKD,KAAM,uBAAwB,EAC1D4K,EAAczI,YAAUlC,KAAKD,KAAM,wBAAyB,EAC9D6K,EAAe,KACfxE,IAEFpG,KAAK6K,OAASA,cACXC,OAAO,CACN,CAAC,EAAG,GACJ,CAAC9K,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAIjDhG,KAAK+K,UAAY/K,KAAKD,KAAKsF,MAAMY,aAAaW,WAC3C8C,KAAK1J,KAAK6K,QAEbD,EAAe5K,KAAK+K,UAAUC,UAAU,gBAGxChL,KAAK6K,OAAOhE,GAAG,OAAO,WACpB,GAAKoE,IAAQC,UAAb,CAIA,IAAMC,EAAKF,IAAQC,UAAUE,IAAIhF,EAAOc,QAGlCmE,EAAKF,GAAMA,EAAGC,IAAI1D,KAAK2B,OAG7BlD,EAAK4E,UAAUrB,KAAKvD,EAAK0E,OAAOS,KAAM,MACtCV,EAAapB,MAAM,SAAU,QAO7BrD,EAAKpG,KAAKsF,MAAMkG,MAAMC,gBAAgB,CACpCC,YAAaJ,IAGflF,EAAKpG,KAAKsF,MAAMlF,OAAOuL,SAIvBxG,YAAWiB,EAAKpG,KAAKuK,SAAWnE,EAAKpG,KAAKuK,OAAOZ,KAAKvD,EAAKpG,KAAKsF,MAAOgG,EAAG,GAAIA,EAAG,SAMjFX,IACF1K,KAAK2L,WAAaC,cAElB5L,KAAK6L,cAAgB7L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC7CC,KAAK,QAAS,kBAGjBxF,KAAK2L,WAAW9E,GAAG,OAAO,WACxB,GAAKoE,IAAQC,UAAb,CAGA/E,EAAK0F,cAAcnC,KAAKvD,EAAKwF,WAAWL,KAAM,MAE9C,IAAMH,EAAKF,IAAQC,UAAUE,IAAIV,EAAWxD,QAGtCmE,EAAKF,GAAMA,EAAGC,IAAI1D,KAAK2B,OAC1BlB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMjF,MAAMoL,gBAAgB,CACpCC,YAAaJ,IAGflF,EAAKpG,KAAKsF,MAAMlF,OAAOuL,SAGvBxG,YAAWiB,EAAKpG,KAAKyK,WAAarE,EAAKpG,KAAKyK,SAASd,KAAKvD,EAAKpG,KAAKsF,MAAOgG,EAAG,GAAIA,EAAG,SAMrFV,IACF3K,KAAK8L,YAAcF,cAEnB5L,KAAK+L,eAAiB/L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC9CC,KAAK,QAAS,mBAEjBxF,KAAK8L,YAAYjF,GAAG,OAAO,WACzB,GAAKoE,IAAQC,UAAb,CAGA/E,EAAK4F,eAAerC,KAAKvD,EAAK2F,YAAYR,KAAM,MAEhD,IAAMH,EAAKF,IAAQC,UAAUE,IAAIT,EAAYzD,QAGvCmE,EAAKF,GAAMA,EAAGC,IAAI1D,KAAK2B,OAC1BlB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMlD,OAAOqJ,gBAAgB,CACrCC,YAAaJ,IAGflF,EAAKpG,KAAKsF,MAAMlF,OAAOuL,SAGvBxG,YAAWiB,EAAKpG,KAAK0K,WAAatE,EAAKpG,KAAK0K,SAASf,KAAKvD,EAAKpG,KAAKsF,MAAOgG,EAAG,GAAIA,EAAG,SAKzFT,GAAgB5K,KAAKD,KAAKsF,MAAMY,aAAaC,UAAS,WAEpD0E,EACG/D,GAAG,aAAa,WACf+D,EAAapB,MAAM,SAAU,iBAE9B3C,GAAG,SAAS,WACX+D,EAAapB,MAAM,SAAU,cAGnCxJ,KAAK0L,W,+BAKD1L,KAAK6K,SACP7K,KAAK6K,OAAOC,OAAO,CACjB,CAAC,EAAG,GACJ,CAAC9K,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAG/ChG,KAAK+K,UAAUrB,KAAK1J,KAAK6K,SAGvB7K,KAAK2L,aACP3L,KAAK2L,WACFb,OAAO,CACN,CAAC,EAAG,GACJ,CAAE9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAOE,IAAUkG,cAAgBhM,KAAKD,KAAKsF,MAAMW,eAG9EhG,KAAK6L,cACFrG,KAAK,YAAa,aAAeM,IAAUkG,cAAgB,IAAMhM,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAC9F6D,KAAK1J,KAAK2L,aAGX3L,KAAK8L,cACP9L,KAAK8L,YACFhB,OAAO,CACN,CAAE9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAa1B,IAAUkG,cAAgB,GACvF,CAAEhM,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAaxH,KAAKD,KAAKsF,MAAMM,OAAOsG,MAAQnG,IAAUkG,cAAgBhM,KAAKD,KAAKsF,MAAMW,eAG1IhG,KAAK+L,eACFvG,KAAK,YAAa,aAAgBM,IAAUkG,cAAiB,IAAMhM,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAChG6D,KAAK1J,KAAK8L,gB,+BAIPnC,GACRA,IAAaA,EACb3J,KAAK+K,WAAa/K,KAAK+K,UAAUnB,QAAQ,aAAcD,GACvD3J,KAAK6L,eAAiB7L,KAAK6L,cAAcjC,QAAQ,aAAcD,GAC/D3J,KAAK+L,gBAAkB/L,KAAK+L,eAAenC,QAAQ,aAAcD,GACjE3J,KAAKD,KAAKyD,QAAUmG,I,+BAIhB3J,KAAK+K,YACP/K,KAAK+K,UAAUrB,KAAK1J,KAAK6K,OAAOS,KAAM,MACtCtL,KAAK+K,WAAa/K,KAAK+K,UAAUlB,UAE/B7J,KAAK6L,gBACP7L,KAAK6L,cAAcnC,KAAK1J,KAAK2L,WAAWL,KAAM,MAC9CtL,KAAK6L,cAAchC,UAEjB7J,KAAK+L,iBACP/L,KAAK+L,eAAerC,KAAK1J,KAAK8L,YAAYR,KAAM,MAChDtL,KAAK+L,eAAelC,UAEtB7J,KAAKD,KAAO,S,GAxMkB+J,K,SCCboC,E,YACnB,WAAanM,GAAM,oEAEjB,EAAKA,KAAO,IAAc,CACxBuK,OAAQC,IACRC,SAAUD,IACVE,SAAUF,KACTxK,GANc,E,iEASEkH,EAAMV,GACzB,IAAMF,EAAYrG,KAAKD,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAO7CsF,GAAQX,EALKC,aAAS,SAAUhF,GACpC,OAAOA,EAAE4E,MACRT,MAGsBW,EAASU,EAAM,GAGlCI,EAAQd,EAAQY,EAAQ,GAK9B,OAFeZ,EAAQY,IAAUE,I,4CAMZ8E,EAAUC,GAC/BpM,KAAK+K,UACFvF,KAAK,IAAK2G,GACV3G,KAAK,QAAU4G,EAASD,K,6BAI3B,IAAMhG,EAAOnG,KACPoG,EAASlE,YAAUlC,KAAKD,KAAM,uBAAwB,EACtD2K,EAAaxI,YAAUlC,KAAKD,KAAM,uBAAwB,EAC1D4K,EAAczI,YAAUlC,KAAKD,KAAM,wBAAyB,EAC5DwG,EAAUvG,KAAKD,KAAKsF,MAAMiB,QAAQ3E,UACxC,GAAIyE,EAAQ,CAGVpG,KAAKqM,MAAQpC,cACVqC,YAAY,CAAC,EAAG/F,EAAQpF,SACxBoL,gBAAgB,CACf,CAACvM,KAAKD,KAAKsF,MAAMM,OAAOC,KAAM5F,KAAKD,KAAKsF,MAAMM,OAAOE,KACrD,CAAC7F,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAC9C8E,OAAO,CAAC,CAAC9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAM5F,KAAKD,KAAKsF,MAAMM,OAAOE,KAAM,CAAC7F,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAChHwG,WAAU,kBAAM,KAEnBxM,KAAKyM,SAAWzM,KAAKD,KAAKsF,MAAMK,IAC7BgE,KAAK1J,KAAKqM,OAIbrM,KAAK+K,UAAY/K,KAAKD,KAAKsF,MAAMY,aAAaW,WAC3CrB,OAAO,QACPC,KAAK,QAAS,aACdA,KAAK,SAAU,QACfgE,MAAM,UAAW,OACjBhE,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAS,GACdA,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,aAElC,IAAI0G,GAAY,EACZP,EAAW,EACXC,EAAS,EACPO,EAAUxG,EAAKpG,KAAKsF,MAAMsH,QAChC3M,KAAKyM,SACFjD,MAAM,eAAgB,SACtB3C,GAAG,mBAAmB,WACrB,IAAM+F,EAAUC,YAAU7M,MAE1B,IADA0M,EAAYzB,IAAQ2B,SAAsC,IAA3B3B,IAAQ2B,QAAQzL,SAC9ByL,EAAQzL,OAAQ,CAC/BwL,GAAWA,EAAQjE,OACnB,IAAMG,EAAQ+D,EAAQ,GAAG,GAAKzG,EAAKpG,KAAKsF,MAAMM,OAAOC,KACrDuG,EAAWtD,EACXuD,EAASvD,EACT1C,EAAK2G,sBAAsBX,EAAUC,OAEtC,GACFvF,GAAG,kBAAkB,WACpB,IAAM+F,EAAUC,YAAU7M,MAC1B,GAAI0M,GAAaE,EAAQzL,OAAQ,CAC/B,IAAM4L,EAASH,EAAQ,GAAG,GAAKzG,EAAKpG,KAAKsF,MAAMM,OAAOC,KAChDoH,EAASJ,EAAQ,GAAG,GAAKzG,EAAKpG,KAAKsF,MAAMM,OAAOC,KAClDqH,EAAOF,EACPG,EAAOF,EACPD,EAAQC,IACVC,EAAOD,EACPE,EAAOH,GAETZ,EAAWc,EACXb,EAASc,EACT/G,EAAK2G,sBAAsBX,EAAUC,OAEtC,GACFvF,GAAG,iBAAiB,WACnB,IAAM+F,EAAUC,YAAU7M,MAC1B,GAAI0M,GAAaE,EAAQzL,OAAQ,CAC/B,IAAM0H,EAAQ+D,EAAQ,GAAG,GAAKzG,EAAKpG,KAAKsF,MAAMM,OAAOC,KACjDuG,EAAWtD,IACbsD,EAAWtD,GAETuD,EAASvD,IACXuD,EAASvD,GAGX,IAAMsE,EAAW/G,EAAOc,OAAOiF,GACzBiB,EAAU1F,KAAK2B,MAAM8D,GAErBE,EAASjH,EAAOc,OAAOkF,GACvBkB,EAAQ5F,KAAK2B,MAAMgE,GACzBlH,EAAK2G,sBAAsBX,EAAUC,GAGrClH,YAAWiB,EAAKpG,KAAKuK,SAAWnE,EAAKpG,KAAKuK,OAAOZ,KAAKvD,EAAKpG,KAAKsF,MAAO+H,EAASE,GAElFnH,EAAK2G,sBAAsB,EAAG,GAC9BX,EAAW,EACXC,EAAS,EACTM,GAAY,KACX,GAKHhC,IACF1K,KAAK2L,WAAaC,cAElB5L,KAAK6L,cAAgB7L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC7CC,KAAK,QAAS,kBAGjBxF,KAAK2L,WAAW9E,GAAG,OAAO,WACxB,GAAKoE,IAAQC,UAAb,CAGA/E,EAAK0F,cAAcnC,KAAKvD,EAAKwF,WAAWL,KAAM,MAE9C,IAAMH,EAAKF,IAAQC,UAAUE,IAAIV,EAAWxD,QAGtCmE,EAAKF,GAAMA,EAAGC,IAAI1D,KAAK2B,OAC1BlB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMjF,MAAMoL,gBAAgB,CACpCC,YAAaJ,IAGflF,EAAKpG,KAAKsF,MAAMlF,OAAOuL,SAGvBxG,YAAWiB,EAAKpG,KAAKyK,WAAarE,EAAKpG,KAAKyK,SAASd,KAAKvD,EAAKpG,KAAKsF,MAAOgG,EAAG,GAAIA,EAAG,SAMrFV,IACF3K,KAAK8L,YAAcF,cAEnB5L,KAAK+L,eAAiB/L,KAAKD,KAAKsF,MAAMK,IAAIH,OAAO,KAC9CC,KAAK,QAAS,mBAEjBxF,KAAK8L,YAAYjF,GAAG,OAAO,WACzB,GAAKoE,IAAQC,UAAb,CAGA/E,EAAK4F,eAAerC,KAAKvD,EAAK2F,YAAYR,KAAM,MAEhD,IAAMH,EAAKF,IAAQC,UAAUE,IAAIT,EAAYzD,QAGvCmE,EAAKF,GAAMA,EAAGC,IAAI1D,KAAK2B,OAC1BlB,MAAK,SAAUlE,EAAGC,GACjB,OAAQD,EAAIC,KAGhBiC,EAAKpG,KAAKsF,MAAMlD,OAAOqJ,gBAAgB,CACrCC,YAAaJ,IAGflF,EAAKpG,KAAKsF,MAAMlF,OAAOuL,SAGvBxG,YAAWiB,EAAKpG,KAAK0K,WAAatE,EAAKpG,KAAK0K,SAASf,KAAKvD,EAAKpG,KAAKsF,MAAOgG,EAAG,GAAIA,EAAG,SAKzFrL,KAAK0L,W,+BAKD1L,KAAKqM,QACPrM,KAAKqM,MACFE,gBAAgB,CACf,CAACvM,KAAKD,KAAKsF,MAAMM,OAAOC,KAAM5F,KAAKD,KAAKsF,MAAMM,OAAOE,KACrD,CAAC7F,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAE9C8E,OAAO,CACN,CAAC9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAM5F,KAAKD,KAAKsF,MAAMM,OAAOE,KACrD,CAAC7F,KAAKD,KAAKsF,MAAMmC,WAAYxH,KAAKD,KAAKsF,MAAMW,eAGjDhG,KAAK+K,UACFvF,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAS,GACdA,KAAK,SAAUxF,KAAKD,KAAKsF,MAAMW,cAIhChG,KAAK2L,aACP3L,KAAK2L,WACFb,OAAO,CACN,CAAC,EAAG,GACJ,CAAE9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAOE,IAAUkG,cAAgBhM,KAAKD,KAAKsF,MAAMW,eAG9EhG,KAAK6L,cACFrG,KAAK,YAAa,aAAeM,IAAUkG,cAAgB,IAAMhM,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAC9F6D,KAAK1J,KAAK2L,aAGX3L,KAAK8L,cACP9L,KAAK8L,YACFhB,OAAO,CACN,CAAE9K,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAa1B,IAAUkG,cAAgB,GACvF,CAAEhM,KAAKD,KAAKsF,MAAMM,OAAOC,KAAO5F,KAAKD,KAAKsF,MAAMmC,WAAaxH,KAAKD,KAAKsF,MAAMM,OAAOsG,MAAQnG,IAAUkG,cAAgBhM,KAAKD,KAAKsF,MAAMW,eAG1IhG,KAAK+L,eACFvG,KAAK,YAAa,aAAgBM,IAAUkG,cAAiB,IAAMhM,KAAKD,KAAKsF,MAAMM,OAAOE,IAAM,KAChG6D,KAAK1J,KAAK8L,gB,+BAIPnC,GACRA,IAAaA,EACb3J,KAAK+K,WAAa/K,KAAK+K,UAAUnB,QAAQ,aAAcD,GACvD3J,KAAK6L,eAAiB7L,KAAK6L,cAAcjC,QAAQ,aAAcD,GAC/D3J,KAAK+L,gBAAkB/L,KAAK+L,eAAenC,QAAQ,aAAcD,GACjE3J,KAAKD,KAAKyD,QAAUmG,I,+BAIhB3J,KAAK+K,WACP/K,KAAK+K,WAAa/K,KAAK+K,UAAUlB,SAE/B7J,KAAK6L,gBACP7L,KAAK6L,cAAcnC,KAAK1J,KAAK2L,WAAWL,KAAM,MAC9CtL,KAAK6L,cAAchC,UAEjB7J,KAAK+L,iBACP/L,KAAK+L,eAAerC,KAAK1J,KAAK8L,YAAYR,KAAM,MAChDtL,KAAK+L,eAAelC,UAEtB7J,KAAKD,KAAO,S,GA1QyB+J,K,QCDpByD,E,YAEnB,WAAaxN,GAAM,6DAGjB,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACX9B,SAAU,CAACmC,IAAU0H,SAAU1H,IAAU2H,YACzCC,SAAU,KACVC,YAAa,KACbC,YAAa,KACbpK,SAAS,EACTqK,KAAM,CACJrK,SAAS,EACTsK,OAAQ,IAET/N,GAEH,IAAMoG,EAAOA,EAGT4H,EAAI7L,YAAU,EAAKnC,KAAM,qBACzB,EAAKA,KAAK4D,SAASqK,QAAQlI,IAAUmI,UAAY,IACnDF,EAAI7L,YAAU,EAAKnC,KAAM,uBAG3B,IAAImO,EAAIhM,YAAU,EAAKnC,KAAM,qBAxBZ,OAyBb,EAAKA,KAAK4D,SAASqK,QAAQlI,IAAUqI,YAAc,IACrDD,EAAIhM,YAAU,EAAKnC,KAAM,uBAG3B,EAAKqO,KAAOA,cAER,EAAKrO,KAAK4N,aAEZ,EAAKS,KACFC,SAAQ,SAAU5M,GACjB,OAAmC,MAA5BA,EAAE0E,EAAKpG,KAAK4N,gBAEpBI,GAAE,SAAUtM,GAEX,OAAOsM,EAAEtM,EAAE0E,EAAKpG,KAAK6N,iBAEtBM,GAAE,SAAUzM,GACX,OAAOyM,EAAEzM,EAAE0E,EAAKpG,KAAK4N,iBA1CV,E,oDAgDjB,IAAMxH,EAAOnG,KACbA,KAAKsO,QAAUtO,KAAKD,KAAKsF,MAAMkJ,UAAUvD,UAAU,YAAchL,KAAKD,KAAK0F,WACxEvF,KAAK,CAACF,KAAKD,KAAK2N,WAChBc,QACAjJ,OAAO,KACPC,KAAK,QAAS,wBAA0BxF,KAAKD,KAAK0F,WAErD,IAAMgJ,EAAczO,KAAKD,KAAKsF,MAAMC,UAAUqD,OAAO,gBAiBrD,GAfA3I,KAAKsO,QAAQ/I,OAAO,QACjBC,KAAK,YAAa,QAAUiJ,EAAYjJ,KAAK,MAAQ,KACrDA,KAAK,QAAS,WACdgE,MAAM,UAAU,SAAU/H,GACzB,OAAOA,EAAE6C,SAEVkF,MAAM,OAAQ,eACdA,MAAM,gBAAgB,SAAU/H,GAC/B,OAAOA,EAAEiN,WAAa,SAEvBlJ,KAAK,KAAK,SAAU/D,GACnB,OAAO0E,EAAKiI,KAAK3M,EAAER,WAInBjB,KAAKD,KAAK8N,MAAQ7N,KAAKD,KAAK8N,KAAKrK,QAAS,CAE5C,IAAIuK,EAAI7L,YAAUlC,KAAKD,KAAM,qBACzBC,KAAKD,KAAK4D,SAASqK,QAAQlI,IAAUmI,UAAY,IACnDF,EAAI7L,YAAUlC,KAAKD,KAAM,uBAG3B,IAAImO,EAAIhM,YAAUlC,KAAKD,KAAM,qBACzBC,KAAKD,KAAK4D,SAASqK,QAAQlI,IAAUqI,YAAc,IACrDD,EAAIhM,YAAUlC,KAAKD,KAAM,uBAG3B,IAAM4O,EAAkB3O,KAAKD,KAAK2N,SAASvM,OAC3CnB,KAAKsO,QAAQtD,UAAU,eACpB9K,KAAKF,KAAKD,KAAK2N,UACfc,QAAQjJ,OAAO,UACfC,KAAK,SAAS,SAAU/D,EAAGyG,GAC1B,IAAIzC,EAAYA,uBAAuByC,EAOvC,OANc,IAAVA,IACFzC,GAAa,iBAEXyC,IAAWyG,EAAkB,IAC/BlJ,GAAa,gBAERA,KAERD,KAAK,IAAKxF,KAAKD,KAAK8N,KAAKC,QACzBtI,KAAK,MAAM,SAAU/D,GAEpB,OAAOsM,EAAEtM,EAAE0E,EAAKpG,KAAK6N,iBAEtBpI,KAAK,MAAM,SAAU/D,GACpB,OAAOyM,EAAEzM,EAAE0E,EAAKpG,KAAK4N,oB,+BAO3B,IAAMxH,EAAOnG,KACbA,KAAKsO,SAAWtO,KAAKsO,QAAQ3F,OAAO,QAAQnD,KAAK,KAAK,SAAU/D,GAC9D,OAAO0E,EAAKiI,KAAK3M,EAAER,a,+BAIb0I,GACRA,IAAaA,EACb3J,KAAKsO,SAAWtO,KAAKsO,QAAQ1E,QAAQ,aAAcD,GACnD3J,KAAKD,KAAKyD,QAAUmG,I,+BAKpB,IAAM5H,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QACtC4M,EAAa5O,KAAKD,KAAK2N,SAASnK,KAEtCvD,KAAKsO,SAAWtO,KAAKsO,QAAQzE,SAEzB9H,GAAeA,EAAY6M,IAAe7M,EAAY6M,GAAYpL,SACpExD,KAAK6O,S,+BAMP7O,KAAKsO,SAAWtO,KAAKsO,QAAQzE,SAC7B7J,KAAKoO,KAAO,KACZpO,KAAKD,KAAO,S,GA7IkB+J,KCAbgF,E,YACnB,WAAa/O,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACX9B,SAAU,CAACmC,IAAU0H,SAAU1H,IAAU2H,YACzCG,YAAa,GACbmB,UAAW,KACX3L,kBAAmB,GACnBI,SAAS,GACRzD,GAEH,IAAMoG,EAAOA,EACPpE,EAAc,EAAKhC,KAAKsF,MAAMiB,QAAQtE,QAE5C,EAAKjC,KAAKiP,gBAAkB,EAAKjP,KAAKqD,kBAAkB4E,QAAO,SAAUiH,GACvE,OAAOlN,EAAYkN,EAAI1L,MAAMC,UAAW,KAEvC4H,KAAI,SAAU6D,GACb,OAAOlN,EAAYkN,EAAI1L,MAAM1B,aAKjC,IAAIkM,EAAI7L,YAAU,EAAKnC,KAAM,qBACzB,EAAKA,KAAK4D,SAASqK,QAAQlI,IAAUmI,UAAY,IACnDF,EAAI7L,YAAU,EAAKnC,KAAM,uBAG3B,IAAImO,EAAIhM,YAAU,EAAKnC,KAAM,qBA5BZ,OA6Bb,EAAKA,KAAK4D,SAASqK,QAAQlI,IAAUqI,YAAc,IACrDD,EAAIhM,YAAU,EAAKnC,KAAM,uBAG3B,EAAKA,KAAKmP,QAAUtM,cAEpB,EAAKuM,KAAOA,cACTpB,GAAE,SAAUtM,EAAG2N,GACd,OAAOrB,EAAEtM,EAAEvB,KAAKiG,EAAKpG,KAAK6N,iBAE3ByB,IAAG,SAAU5N,GACZ,OAAOyM,EAAEzM,EAAE,OAEZ6N,IAAG,SAAU7N,GACZ,OAAOyM,EAAEzM,EAAE,OA3CE,E,oDAiDjB,IAAM0E,EAAOnG,KACP+B,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QAE5ChC,KAAKD,KAAKmP,QAAQK,KAAKvP,KAAKD,KAAKiP,iBACjChP,KAAKD,KAAKmP,QAAQM,MAAMC,KACxBzP,KAAKD,KAAKmP,QAAQQ,OAAOC,KAGzB,IAAMC,EAAoB5P,KAAKD,KAAKqD,kBAAkB4E,QAAO,SAAUiH,GACrE,OAAQlN,EAAYkN,EAAI1L,MAAMC,UAAW,KAG3CxD,KAAK6P,WAAa7P,KAAKD,KAAKsF,MAAMkJ,UAAUvD,UAAU,aAAehL,KAAKD,KAAK0F,WAC5EvF,KAAKF,KAAKD,KAAKmP,QAAQlP,KAAKD,KAAKgP,YACjCP,QACAjJ,OAAO,KACPC,KAAK,QAAS,0BAA4BxF,KAAKD,KAAK0F,WAEvD,IAAMgJ,EAAczO,KAAKD,KAAKsF,MAAMC,UAAUqD,OAAO,gBAGrD3I,KAAK6P,WAAWtK,OAAO,QACpBC,KAAK,YAAa,QAAUiJ,EAAYjJ,KAAK,MAAQ,KACrDA,KAAK,SAAS,SAAU/D,GAIvB,MAAO,sBAHamO,EAAkBzJ,EAAKpG,KAAKiP,gBAAgBhB,QAAQvM,EAAEY,OAAS,CACjFkB,KAAM,KAEkCA,QAE3CiG,MAAM,QAAQ,SAAU/H,GACvB,IAAMqO,EAAcF,EAAkBzJ,EAAKpG,KAAKiP,gBAAgBhB,QAAQvM,EAAEY,OAAS,CACjFkB,KAAM,IAER,OAAOxB,EAAY+N,EAAYvM,MAAMe,SAEtCkB,KAAK,IAAKxF,KAAKmP,Q,+BAMlBnP,KAAK6P,YAAc7P,KAAK6P,WAAWlH,OAAO,QAAQnD,KAAK,IAAKxF,KAAKmP,Q,+BAIjE,IAAMpN,EAAc/B,KAAKD,KAAKsF,MAAMiB,QAAQtE,QAE5ChC,KAAKD,KAAKiP,gBAAkBhP,KAAKD,KAAKqD,kBAAkB4E,QAAO,SAAUiH,GACvE,OAAQlN,EAAYkN,EAAI1L,MAAMC,UAAW,KAExC4H,KAAI,SAAU6D,GACb,OAAOlN,EAAYkN,EAAI1L,MAAM1B,aAIjC7B,KAAK6P,YAAc7P,KAAK6P,WAAWhG,SAEnC7J,KAAK6O,S,+BAGGlF,GACRA,IAAaA,EACb3J,KAAK6P,WAAWjG,QAAQ,aAAcD,GACtC3J,KAAKD,KAAKyD,QAAUmG,I,+BAKpB3J,KAAK6P,YAAc7P,KAAK6P,WAAWhG,SACnC7J,KAAKD,KAAKmP,QAAU,KACpBlP,KAAKmP,KAAO,KACZnP,KAAKD,KAAO,S,GAzHuB+J,KCAlBiG,E,YACnB,WAAahQ,GAAM,6DAEjB,EAAKA,KAAOA,EACZ,EAAKiQ,WAAa,GAClB,IAAM9P,EAAO,EAAKH,KAAKsF,MAAMiB,QAAQ3E,UAC/BM,EAAW,EAAKlC,KAAKsF,MAAMiB,QAAQnG,OACnC4B,EAAc,EAAKhC,KAAKsF,MAAMiB,QAAQtE,QAN3B,OASjBiO,YAAQhO,EAASW,QAAUX,EAASW,MAAMpB,SAAQ,SAACwB,GACjD,EAAKgN,WAAW7F,KAAK,IAAI2E,EAAU,CACjCzJ,MAAO,EAAKtF,KAAKsF,MACjBI,UAAWzC,EAASyC,WAAazC,EAASO,KAC1CI,SAAUX,EAASW,SACnBiK,YAAa,EAAK7N,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC9CkN,UAAW7O,EACXkD,kBAAmBJ,EAASI,wBAIhC6M,YAAQhO,EAASmM,OAASnM,EAASmM,KAAK5M,SAAQ,SAACwB,GAC/C,EAAKgN,WAAW7F,KAAK,IAAIoD,EAAK,CAC5BlI,MAAO,EAAKtF,KAAKsF,MACjBI,UAAWzC,EAASyC,WAAazC,EAASO,KAC1CI,SAAUX,EAASW,SACnBgK,YAAa5L,EAAYiB,EAASO,MAAM1B,UACxC+L,YAAa,EAAK7N,KAAKsF,MAAMiB,QAAQ1E,SAASC,UAC9C2B,QAASzB,EAAYiB,EAASO,MAAMC,QACpCkK,SAAU,CACRnK,KAAMP,EAASO,KACfe,MAAOvC,EAAYiB,EAASO,MAAMe,MAClCoK,UAAW3M,EAAYiB,EAASO,MAAMmL,UACtCzN,OAAQf,SAhCG,E,yBADmBgQ,GCUnBC,E,YACnB,WAAa7K,EAAWvF,GAQtB,GAR4B,YAC5BA,EAAKqQ,UAAY,IAAIC,KAGhBtQ,EAAKuQ,aACRvQ,EAAKuQ,WAAa,IAAIxQ,EAAcC,MAGhCA,EAAKuQ,sBAAsBxL,KAC/B,MAAM,IAAIjE,MAAM,wEATU,+CAatByE,EAAWvF,IAbW,OAgBxBwQ,YAAS,EAAKD,aAChB,IAAc,EAAKhK,QAAS,EAAKgK,WAAWE,gBAI9CC,YAAoB,EAAKnK,SAGzB,EAAKoK,iBAEL,KAAa,kBAAM,EAAK7B,UA1BI,E,8DA8B5B,IAAI8B,SACErO,EAAStC,KAAKsG,QAAQhE,OACtBC,EAAUvC,KAAKsG,QAAQ/D,QACvBX,EAAW5B,KAAKsG,QAAQ1E,SAE1BU,IACFqO,EAAczO,YAAUlC,KAAM,sBAC9BA,KAAKI,MAAQ,IAAIwQ,IAAJ,KACXvL,MAAOrF,KACP6Q,SAAU,IACVC,OAAQ,OACRC,WAAY,CAAC/Q,KAAKgG,YAAa,GAC/ByF,YAAanJ,GACVqO,IAEL3Q,KAAKgR,mBAAmB7G,KAAKnK,KAAKI,QAGhCmC,IACFoO,EAAczO,YAAUlC,KAAM,uBAC9BA,KAAKmC,OAAS,IAAIyO,IAAJ,KACZvL,MAAOrF,KACP6Q,SAAU,IACVC,OAAQ,QACRC,WAAY,CAAC/Q,KAAKgG,YAAa,GAC/ByF,YAAalJ,GACVoO,IAGL3Q,KAAKgR,mBAAmB7G,KAAKnK,KAAKmC,SAGhCP,EAASE,YACX6O,EAAczO,YAAUlC,KAAM,wBAC9BA,KAAKuL,MAAQ,IAAIqF,IAAJ,KACXvL,MAAOrF,KACP6Q,SAAU,IACVC,OAAQ,SACRC,WAAY,CAAC,EAAG/Q,KAAKwH,YACrBiE,YAAa7J,EAASE,WACnB6O,IAEL3Q,KAAKgR,mBAAmB7G,KAAKnK,KAAKuL,QAGpC,IAAM0F,EAAc/O,YAAUlC,KAAM,mBAChCiR,EAAYzN,UACdxD,KAAK2M,QAAU,IAAIuE,EAAJ,KACb7L,MAAOrF,MACJiR,IAELjR,KAAKgR,mBAAmB7G,KAAKnK,KAAK2M,UAGpC,IAAMwE,EAAWjP,YAAUlC,KAAM,eAAgB,IAQjD,IAPKiR,EAAYzN,SAAW2N,EAAS3N,WACnCxD,KAAKiG,aAAe,IAAI8D,EAAa,CACnC1E,MAAOrF,OAETA,KAAKgR,mBAAmB7G,KAAKnK,KAAKiG,eAGhCjG,KAAKsG,QAAQ2D,KAAKzG,QAAS,CAC7B,IAAI4N,EAAS/G,EACTrK,KAAKsG,QAAQjB,MAAMsB,gBACrByK,EAASlF,GAEXlM,KAAKqR,UAAY,IAAID,EAAO,CAC1B/L,MAAOrF,KACPsK,OAAQtK,KAAKsG,QAAQ2D,KAAKqH,QAC1B9G,SAAUxK,KAAKsG,QAAQ2D,KAAKO,SAC5BC,SAAUzK,KAAKsG,QAAQ2D,KAAKQ,WAE9BzK,KAAKgR,mBAAmB7G,KAAKnK,KAAKqR,WAGhCrR,KAAKsG,QAAQnG,SACfH,KAAKG,OAAS,IAAI4P,EAAW,CAC3B1K,MAAOrF,OAGTA,KAAKgR,mBAAmB7G,KAAKnK,KAAKG,SAGhCH,KAAKsG,QAAQiL,OAAO/N,UACtBxD,KAAKwR,QAAU,IAAIC,IAAiB,CAClCpM,MAAOrF,KACP0R,aAAc1R,KAAKsG,QAAQiL,OAAOG,aAClCb,SAAU/K,IAAUmI,QACpB0D,oBAAqB3R,KAAKsG,QAAQiL,OAAOI,oBACzCC,eAAgB5R,KAAKsG,QAAQiL,OAAOK,iBAEtC5R,KAAKgR,mBAAmB7G,KAAKnK,KAAKwR,Y,6BAKpC9Q,QAAQC,IAAI,uBAAwBX,MACpC,oEACAA,KAAKsG,QAAQuL,UAAUnI,KAAK1J,MAG5BA,KAAK8R,eAEL9R,KAAK+R,kBAEL/R,KAAKiG,cAAgBjG,KAAKiG,aAAa+L,qBAEvChS,KAAKiS,UAAY,IAAI5B,MAClB6B,UAAYlS,KAAKsG,QAAQ8J,UAAU8B,UACtClS,KAAKsG,QAAQ6L,WAAWzI,KAAK1J,KAAMA,KAAKiS,Y,mCAI5BG,GAAe,WAEvBC,SACAC,SACAC,SACAxO,SACAyO,GAAc,EACdC,GAAc,EAEdL,IAAkBtM,IAAU0H,WAC9BiF,GAAc,GAGZL,IAAkBtM,IAAUqI,YAC9BqE,GAAc,GAIhBzO,EAAO7B,YAAUlC,KAAKsG,QAAS,kBAC3BtG,KAAKsG,QAAQhE,QAAUkQ,IAAgB,IAAgBzO,KACzDsO,EAAarS,KAAKI,MAAMsS,YAETvR,OAAS,IAEtBmR,EAAUD,EAAW,GAAKA,EAAW,GAErCE,EAAWF,EAAW,GAAKC,EAG3BtS,KAAKsG,QAAQhE,OAAO,GAAKiQ,EAGzBvS,KAAKI,MAAMoL,gBAAgB,CACzBC,YAAazL,KAAKsG,QAAQhE,UAKhCyB,EAAO7B,YAAUlC,KAAKsG,QAAS,mBAC3BtG,KAAKsG,QAAQ/D,SAAWkQ,IAAgB,IAAgB1O,KAC1DsO,EAAarS,KAAKmC,OAAOuQ,YAEVvR,OAAS,IACtBmR,EAAUD,EAAW,GAAKA,EAAW,GACrCE,EAAWF,EAAW,GAAKC,EAE3BtS,KAAKsG,QAAQ/D,QAAQ,GAAKgQ,EAG1BvS,KAAKmC,OAAOqJ,gBAAgB,CAC1BC,YAAazL,KAAKsG,QAAQ/D,WAMhC,IAAMoQ,EAAc,GAChBC,EAAgB,EAEhB5S,KAAKsG,QAAQhE,SACfqQ,EAAY7M,IAAU0H,UAAY,GAClCmF,EAAY7M,IAAU0H,UAAUqF,MAAQ,gBACxCF,EAAY7M,IAAU0H,UAAUsF,QAAU,IAGxC9S,KAAKsG,QAAQ/D,UACfoQ,EAAY7M,IAAUqI,WAAa,GACnCwE,EAAY7M,IAAUqI,WAAW0E,MAAQ,iBACzCF,EAAY7M,IAAUqI,WAAW2E,QAAU,IAI7C,IAAMC,EAAS/S,KAAK0F,IAAIH,OAAO,KAC5BC,KAAK,QAAS,WAzEU,WA2EhBwN,GACQ,EAAK1N,UAAUqD,OAAO,OAASgK,EAAYK,GAAMH,OAAO7H,UAAU,QAC1EiI,MAAK,SAAU7D,GACtB,IAAM8D,EAAWvK,YAAO3I,MAAMmT,QAAU,GACpCD,EAAS/R,OAASwR,EAAYK,GAAMF,QAAQ3R,SAC9CwR,EAAYK,GAAMF,QAAUI,MAIhCH,EAAO/H,UAAU,cACd9K,KAAK,CAACyS,EAAYK,GAAMF,UACxBtE,QACAjJ,OAAO,QACP4N,KAAKC,QACLH,MAAK,SAAUxR,EAAG2N,GAEjBwD,EAAgB5S,KAAKqT,2BAIzB,EAAK1N,OAAOqN,GAAQtL,KAAK2B,MAAMuJ,GAAiB9M,IAAUwN,cApB5D,IAAK,IAAMN,KAAQL,EAAa,EAArBK,GAuBXD,EAAOlJ,SAEP7J,KAAKwH,WAAcxH,KAAKuT,eAAejK,MAAQtJ,KAAK2F,OAAOC,KAAO5F,KAAK2F,OAAOsG,MAC9EjM,KAAK0L,a,GAtPoC8H,KAAxBrD,a,iKCPAS,E,YACnB,WAAa7Q,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxB0F,UAAW,GACXoL,SAAU,IACVC,OAAQ,OACR2C,MAAO,GACP9O,KAAM,GACNoM,WAAY,CAAC,EAAG,KAChBtF,YAAa,CAAC,EAAG,KACjBiI,UAAW,GACXC,WAAW,EACXC,WAAY,KACZC,YAAY,EACZC,UAAW,EACXC,eAAe,EACfC,eAAe,EACfC,YAAanO,IAAUoO,aACvBC,aAAcrO,IAAUsO,cACxB5Q,SAAS,GACRzD,GAEH,EAAKiT,KAAO,KAEgB,cAAxB,EAAKjT,KAAK2T,UACZ,EAAKW,MAAQC,eAEb,EAAKD,MAAQE,cACT,EAAKxU,KAAK4E,OAASmB,IAAU0O,aAC/B,EAAKH,MAAQI,gBAIU,MAAvB,EAAK1U,KAAK8Q,WACR,EAAK9Q,KAAK+Q,SAAWhL,IAAU2H,WACjC,EAAKuF,KAAO0B,cACH,EAAK3U,KAAK+Q,SAAWhL,IAAUmI,UACxC,EAAK+E,KAAO2B,gBAEkB,IAA5B,EAAK5U,KAAKiU,eACZ,EAAKhB,KAAK4B,eAAgB,EAAK7U,KAAKsF,MAAMW,cAM9C,EAAK0M,WAAa,GAClB,IAAMvM,EAAOA,EAEb,GAA2B,MAAvB,EAAKpG,KAAK8Q,WACR,EAAK9Q,KAAK+Q,SAAWhL,IAAU0H,SACjC,EAAKwF,KAAO6B,cACH,EAAK9U,KAAK+Q,SAAWhL,IAAUqI,YACxC,EAAK6E,KAAO8B,cACZ,EAAK9B,KAAK4B,cAAc,KAEM,IAA5B,EAAK7U,KAAKiU,eACZ,EAAKhB,KAAK4B,eAAgB,EAAK7U,KAAKsF,MAAMmC,YAGxCtC,YAAW,EAAKnF,KAAKgU,gBAAgB,CAEvC,IAAMgB,EAAoB,EAAKhV,KAAKgU,cACpC,EAAKhU,KAAKgU,cAAgB,SAAU9L,GAElC,OADA9B,EAAKuM,WAAWsC,QAAQ/M,GACjB8M,EAAkB9M,IAjEd,OAsEb,EAAKlI,KAAKkU,YAAc,GAC1B,EAAKjB,KAAKiB,YAAY,EAAKlU,KAAKkU,aAvEjB,E,+DA2ES,IAAXlU,EAAW,uDAAJ,GACtB,IAAcC,KAAKD,KAAMA,GACzBC,KAAK0L,W,6BAIL1L,KAAKiV,cAAgB,KAEjBjV,KAAKD,KAAK+Q,SAAWhL,IAAU2H,WACjCzN,KAAKiV,cAAL,eAAoCjV,KAAKD,KAAKsF,MAAMW,YAApD,IACShG,KAAKD,KAAK+Q,SAAWhL,IAAUqI,YACxCnO,KAAKiV,cAAL,aAAkCjV,KAAKD,KAAKsF,MAAMmC,WAAlD,OAGFxH,KAAKkV,QAAUlV,KAAKD,KAAKsF,MAAMkJ,UAAUhJ,OAAO,KAC7CC,KAAK,QADO,mBACqBxF,KAAKD,KAAK+Q,OAD/B,YACiD9Q,KAAKD,KAAK0F,WAI1EP,YAAWlF,KAAKD,KAAKgU,gBAAkB/T,KAAKgT,KAAKmC,WAAWnV,KAAKD,KAAKgU,eAGlE/T,KAAKD,KAAK0T,QACZzT,KAAKD,KAAKqV,aAAepV,KAAKkV,QAAQ3P,OAAO,QAC1CC,KAAK,QAAS,iBACd2N,KAAKnT,KAAKD,KAAK0T,QAGpBzT,KAAK0L,UAGJ1L,KAAKD,KAAKyD,SAAWxD,KAAKkV,QAAQtL,QAAQ,aAAa,K,+BAexD,GAVI5J,KAAKD,KAAK+Q,SAAWhL,IAAU2H,aACjCzN,KAAKD,KAAKgR,WAAa,CAAC,EAAG/Q,KAAKD,KAAKsF,MAAMmC,aAGzCxH,KAAKD,KAAK+Q,SAAWhL,IAAUqI,YACjCnO,KAAKiV,cAAL,aAAkCjV,KAAKD,KAAKsF,MAAMmC,WAAlD,OAKExH,KAAKD,KAAK0T,MAAO,CACnB,IAAI4B,EAAS,EACTC,EAAS,EACTC,EAAS,EACTvV,KAAKD,KAAK+Q,SAAWhL,IAAU2H,YACjC4H,EAAS3N,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMmC,WAAa,GACjD8N,EAASxP,IAAU0P,gBACVxV,KAAKD,KAAK+Q,SAAWhL,IAAU0H,UAAYxN,KAAKD,KAAK+Q,SAAWhL,IAAUqI,YAC/EnO,KAAKD,KAAK+Q,SAAWhL,IAAU0H,UACjC6H,GAAWrV,KAAKD,KAAKsF,MAAMM,OAAOC,KAAQE,IAAUkG,cACpDuJ,EAAS,MAETF,EAASrV,KAAKD,KAAKsF,MAAMM,OAAOsG,MAAQnG,IAAUkG,cAClDuJ,EAAS,IAEXD,EAAS5N,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMW,YAAc,IAEpDhG,KAAKD,KAAKqV,aACP5P,KAAK,YADR,aAEiB6P,EAFjB,IAE2BC,EAF3B,YAE6CC,EAF7C,KAKFvV,KAAK0S,WAAa,GAElB,IAAIjH,EAAc,CAACzL,KAAKD,KAAK0L,YAAY,GAAIzL,KAAKD,KAAK0L,YAAYzL,KAAKD,KAAK0L,YAAYtK,OAAS,IAclG,GAb4B,cAAxBnB,KAAKD,KAAK2T,WACZjI,EAAczL,KAAKD,KAAK0L,YACxBzL,KAAKqU,MACFoB,QAAQzV,KAAKD,KAAKoU,eAErBnU,KAAKD,KAAK4T,WAAa3T,KAAKqU,MAAMqB,QAGpC1V,KAAKqU,MAAMsB,MAAM3V,KAAKD,KAAKgR,YACxB6E,OAAOnK,GAEVzL,KAAKgT,KAAKqB,MAAMrU,KAAKqU,OAEjBhT,YAASrB,KAAKD,KAAK6T,YAAa,CAClC,IAAIiC,EAAU7V,KAAKD,KAAK6T,WACxB,GAA2B,MAAvB5T,KAAKD,KAAK8Q,UAAoB7Q,KAAKD,KAAK4E,OAASmB,IAAU0O,WAAY,CAEzE,IAAMsB,EAAUpO,KAAKC,MAAM3H,KAAKD,KAAKsF,MAAMmC,WAAa,IAClDuO,EAAYrO,KAAKC,OAAO3H,KAAKD,KAAK0L,YAAY,GAAKzL,KAAKD,KAAK0L,YAAY,IAAlD,OAAiF,EAC1GsK,EAAY,GAAKA,EAAYF,IAC/BA,EAAUE,GAGZ,IAAMC,EAAetO,KAAKC,OAAO3H,KAAKD,KAAK0L,YAAY,GAAKzL,KAAKD,KAAK0L,YAAY,IAAlD,KAC5BuK,EAAeH,IACjBA,EAAUG,GAGRF,EAAUD,IACZA,EAAUC,GAId9V,KAAKgT,KAAKiD,MAAMJ,QACP3Q,YAAWlF,KAAKD,KAAK6T,aAC9B5T,KAAKgT,KAAKiD,MAAMjW,KAAKD,KAAK6T,cAG5B5T,KAAKiV,eAAiBjV,KAAKkV,QAAQ1P,KAAK,YAAaxF,KAAKiV,eAEtDjV,KAAKD,KAAKiU,eAAwC,MAAvBhU,KAAKD,KAAK8Q,UACvC7Q,KAAKgT,KAAK4B,eAAgB5U,KAAKD,KAAKsF,MAAMmC,YAG5CxH,KAAKkV,QAAQxL,KAAK1J,KAAKgT,MAGvB,IAAMkD,EAAYlW,KAAKD,KAAK+T,UACtBqC,EAAUjR,YAAWlF,KAAKD,KAAKgU,eAAiB/T,KAAKD,KAAKgU,cAAgBxJ,IAEnD,UAAzBvK,KAAKD,KAAK8T,WACZ7T,KAAKkV,QACFlK,UAAU,QACVxB,MAAM,cAAe,OACrBhE,KAAK,IAAK,KACVA,KAAK,KAAM,UACXA,KAAK,KAAM,SACXA,KAAK,YAAa,eAClB2N,MAAK,SAAU1R,EAAG2N,GACjB,OAAOgH,YAAaD,EAAQ1U,GAAIyU,MAEF,aAAzBlW,KAAKD,KAAK8T,YACnB7T,KAAKkV,QACFlK,UAAU,QACVxF,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,YAAa,cAClBgE,MAAM,cAAe,SACrB2J,MAAK,SAAU1R,EAAG2N,GACjB,OAAOgH,YAAaD,EAAQ1U,GAAIyU,Q,+BAK9BvM,GACRA,IAAaA,EACb3J,KAAKkV,SAAWlV,KAAKkV,QAAQtL,QAAQ,aAAcD,GACnD3J,KAAKD,KAAKqV,cAAgBpV,KAAKD,KAAKqV,aAAaxL,QAAQ,aAAcD,GACvE3J,KAAKD,KAAKyD,QAAUmG,I,+BAKpB3J,KAAKD,KAAKqV,cAAgBpV,KAAKD,KAAKqV,aAAavL,SACjD7J,KAAKkV,SAAWlV,KAAKkV,QAAQrL,SAC7B7J,KAAKqU,MAAQ,KACbrU,KAAKgT,KAAO,KACZhT,KAAKD,KAAO,S,GA3OkB+J,KAAb8G","file":"timeseries.min.js","sourcesContent":["import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getDateFromEpoc, getObject, refineString, isNumber, isDate, isBoolean} from '@/utils'\n\nexport default class BasicTSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while timeseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on timeseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    // Find seconds in unitArr to find the timeStampIndex\n    const timeStampIndex = 0\n    const firstTime = data[0][timeStampIndex]\n    if (!validJSONType || !(isNumber(firstTime) || isDate(firstTime))) {\n      throw new Error('Invalid Time series JSON received')\n    }\n\n    let start = 0\n    data.forEach(function (d) {\n      if (start > d[timeStampIndex]) {\n        throw new Error('Invalid Time series JSON received: Timestamp Values must be in ascending order')\n      }\n      start = d[timeStampIndex]\n      d[timeStampIndex] = getDateFromEpoc(d[timeStampIndex], true) // convert EPOC to date\n    })\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: [seriesData[0][dataIndex], seriesData[(seriesData.length - 1)][dataIndex]]\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let findEachPlotRange = false\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if ((yAxis && !yRange) || (yAxis2 && !yRange2)) {\n\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if ((plotInfo.stack && plotInfo.stack.length) || findEachPlotRange) {\n\n        if (findEachPlotRange) {\n          // Reset range for each plot for finding min , max\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            eachPlot.minVal = Infinity\n            eachPlot.maxVal = -Infinity\n          }\n        }\n\n        // Reset stack range for each stack for finding min , max\n        plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n          plotData.valueRange = [Infinity, -Infinity]\n        })\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          if (findEachPlotRange) {\n            for (const plot in eachPlotSet) {\n              const eachPlot = eachPlotSet[plot]\n              valData = d[eachPlot.dataIndex]\n              if (valData < eachPlot.minVal) {\n                eachPlot.minVal = valData\n              }\n              if (valData > eachPlot.maxVal) {\n                eachPlot.maxVal = valData\n              }\n            }\n          }\n\n          plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n            const memberArr = plotData.stackOrderMembers\n            let sum = 0\n            memberArr.forEach(function (member) {\n              sum += (eachPlotSet[member.name].visible ? d[eachPlotSet[member.name].dataIndex] : 0)\n            })\n\n            if (sum < plotData.valueRange[0]) {\n              plotData.valueRange[0] = sum\n            }\n            if (sum > plotData.valueRange[1]) {\n              plotData.valueRange[1] = sum\n            }\n          })\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'line') {\n          plotInfo[key].forEach(function (plotData) {\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'left' && eachPlotSet[plotData.name].maxVal > allMax) {\n              allMax = eachPlotSet[plotData.name].maxVal\n            }\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'right' && eachPlotSet[plotData.name].maxVal > allMax2) {\n              allMax2 = eachPlotSet[plotData.name].maxVal\n            }\n          })\n        } else if (key === 'stack') {\n          plotInfo[key].forEach(function (plotData) {\n            if (plotData.plotAxis[0] === 'left' && plotData.valueRange[1] > allMax) {\n              allMax = plotData.valueRange[1]\n            }\n            if (plotData.plotAxis[0] === 'right' && plotData.valueRange[1] > allMax2) {\n              allMax2 = plotData.valueRange[1]\n            }\n          })\n        }\n      }\n\n      // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const timeStampIndex = dataOptions.timeInfo.dataIndex\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      if (timeStampIndex === ind) {\n        ind++\n        return\n      }\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'line') {\n        plotInfo[key].forEach(function (plotData) {\n          plotData.name = refineString(plotData.name)\n          const color = plotData.color // Apply color for each Plot series or pick from data color Arr\n          if (!color) {\n            throw `Color not present for series ${plotData.name}`\n          }\n          color && (eachPlotSet[plotData.name].color = color)\n          const plotAxis = plotData.plotAxis || ['left', 'bottom']\n          eachPlotSet[plotData.name].plotAxis = plotAxis\n          const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n          eachPlotSet[plotData.name].unit = unit\n          isBoolean(plotData.visible) && (eachPlotSet[plotData.name].visible = plotData.visible)\n        })\n      } else if (key === 'stack') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.stackOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      } else if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, getObject, isFunction} from '@/utils'\nimport {bisector, d3Mouse} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class TimeSeriesTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      crossHairs: {\n        enable: true\n      },\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.crossHairs = false\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n\n    if (this.opts.crossHairs.enable === true) {\n      this.crossHairs = this.opts.chart.svg\n        .append('g')\n        .attr('class', 'vc-tooltip-line')\n      this.crossHairs.append('line')\n        .attr('transform', 'translate(-999,-999)')\n        .attr('x1', this.opts.chart.margin.left)\n        .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n        .attr('x2', this.opts.chart.margin.left)\n        .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n\n    }\n\n    this.opts.chart.mouseHandler.register(() => {\n      // Register hover and hide/show toolip events\n      const self = this\n      const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n      const mouseHandler = this.opts.chart.mouseHandler\n      const dateIndex = this.opts.chart.options.timeInfo.dataIndex\n      const dataSet = this.opts.chart.options.chartData\n      // Find nearest existing date among array of sorted date\n      const bisectDate = bisector(function (d) {\n        return d[dateIndex]\n      }).left\n\n      const mouseEvt = function (d) {\n        // On mousemove of x overlay, find x,y values and update tooltip\n        const xMouse = d3Mouse(this)[0]\n        const yMouse = d3Mouse(this)[1]\n        const xVal = xScale.invert(xMouse) // find xAxis date for mouse position\n\n        // Do binary search of data set from 2nd data set to end\n        const found = bisectDate(dataSet, xVal, 1)\n\n          \n        const dBefore = dataSet[found - 2]\n\n          \n        const dPrev = dataSet[found - 1]\n        // get before find dataSet\n          \n        const dFound = dataSet[found] || dPrev // get find dataSet\n\n        let toolTipData = dPrev\n        if (dataSet.length > self.opts.chart.chartWidth) {\n          // More than one tick reside on each pixel. Hence find tick having max value among the dataset\n          const dataParseLen = Math.floor(dataSet.length / self.opts.chart.chartWidth) + 1\n\n          const visibleDataIndex = {}\n\n          for (const pl in self.opts.chart.options.plotSet) {\n            const plot = self.opts.chart.options.plotSet[pl]\n            if (plot.visible) {\n              visibleDataIndex[plot.dataIndex] = true\n            }\n          }\n\n          const multiArrMap = {}\n          // Do Scan from range -dataParseLen to +dataParseLen between found data index\n          for (let ind = (found - dataParseLen); ind < (found + dataParseLen); ind++) {\n            if (dataSet[ind]) {\n              const dSet = dataSet[ind].filter(function (val, index) {\n                return visibleDataIndex[index]\n              }).sort(function (a, b) {\n                return b - a\n              })\n              if (dSet.length) {\n                multiArrMap[ind] = dSet\n              }\n            }\n          }\n          let maxInd\n          let maxVal = -Infinity\n          for (const mp in multiArrMap) {\n            const arrSet = multiArrMap[mp]\n            if (maxVal < arrSet[0]) {\n              maxVal = arrSet[0]\n              maxInd = mp\n            }\n          }\n\n          toolTipData = dataSet[maxInd] || dFound\n        } else {\n          // Find nearest reaching date among above two dates\n          toolTipData = (xVal - dPrev[dateIndex]) > (dFound[dateIndex] - xVal) ? dFound : dPrev\n        }\n\n        let dateIntRange = dFound[dateIndex] - dPrev[dateIndex]\n\n        if (!dateIntRange && dBefore) {\n          dateIntRange = dPrev[dateIndex] - dBefore[dateIndex]\n        }\n\n        if (dateIntRange < Math.abs(dFound[dateIndex] - xVal)) {\n          // If found is outside data interval range, Then data doesnt exist for that tick.\n          toolTipData = []\n          toolTipData[dateIndex] = xVal\n        }\n\n        self.hover(xMouse, yMouse, toolTipData)\n      }\n\n      let eventName = 'mousemove'\n      if (this.opts.chart.options.chart.isTouchScreen) {\n        eventName = 'dblclick'\n      }\n      mouseHandler.mouseBrush\n        .on(eventName, mouseEvt)\n        .on('mouseout', function () {\n          self.hide()\n        })\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n      mouseHandler.mouseBrush.select('rect.overlay')\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n      if (this.opts.chart.options.chart.isTouchScreen) {\n        // In case of touch screen, simulate tooltip hover for first time to auto compute elementOffset\n        this.hover(0, 0, dataSet[0])\n        setTimeout(function () {\n          self.hide()\n        }, 25)\n      }\n\n    })\n  }\n\n  hover (xPos, yPos, displayData) {\n    // Update displayPanel and line based on x position\n    this.crossHairs && this.crossHairs.select('line')\n      .attr('transform', `translate(${xPos},0)`)\n      .attr('x1', this.opts.chart.margin.left)\n      .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n      .attr('x2', this.opts.chart.margin.left)\n      .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n    this.showHide(true)\n\n    let percentageDiff = xPos / this.opts.chart.chartWidth\n\n    if (percentageDiff < 0.3) {\n      percentageDiff = 0.2\n    }\n    if (percentageDiff > 0.7) {\n      percentageDiff = 0.95\n    }\n\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    const left = Math.round(rootPos.left + this.opts.chart.margin.left + xPos - box.width * percentageDiff) + 'px'\n    const top = Math.round(rootPos.top - box.height - 5 + constants.TOOLTIP_TOP_BUFFER * 2) + 'px'\n\n\n    this.toolTipDiv\n      .style('left', left)\n      .style('top', top)\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n\n    this.crossHairs && this.crossHairs.classed('vc-hidden', !showFlag)\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.toolTipDiv && this.toolTipDiv.remove()\n    this.crossHairs && this.crossHairs.remove()\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class MouseHandler extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.opts.registerFn = []\n  }\n\n  draw () {\n    this.mouseBrush = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-brushX')\n      .attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .attr('style', '-webkit-tap-highlight-color: rgba(0, 0, 0, 0)')\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n\n    if (this.opts.chart.options.chart.isTouchScreen) {\n      this.mouseBrush.attr('cursor', 'pointer')\n    }\n\n    if (!this.opts.chart.options.zoom.visible || this.opts.chart.options.chart.isTouchScreen) {\n      // x-Zoom for chart doest not exist, Add rect overlay for brushXDiv or add In case of zoom with touch screen\n      this.mouseBrush.append('rect')\n        .attr('class', 'overlay')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  update () {\n    this.mouseBrush.attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n    if (!this.opts.chart.options.zoom.visible || this.opts.chart.options.chart.isTouchScreen) {\n      this.mouseBrush.select('rect.overlay')\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.mouseBrush && this.mouseBrush.classed('vc-hidden', !showFlag)\n  }\n\n  register (callback) {\n    this.opts.registerFn.push(callback)\n  }\n\n  triggerMouseAction () {\n    this.opts.registerFn.forEach((fun) => {\n      fun.call(this)\n    })\n  }\n\n  remove () {\n    this.mouseBrush && this.mouseBrush.remove()\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, emptyFn} from '@/utils'\nimport {brushX, brushY, d3Event} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class Zoom extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      onZoom: emptyFn,\n      onY1Zoom: emptyFn,\n      onY2Zoom: emptyFn\n    }, opts)\n  }\n\n  draw () {\n    const self = this\n    const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n    const yScaleLeft = getObject(this.opts, 'chart.yAxis.scale') || false\n    const yScaleRight = getObject(this.opts, 'chart.yAxis2.scale') || false\n    let brushOverlay = null\n    if (xScale) {\n      // Create x axis brush for Zoom operation\n      this.brushX = brushX()\n        .extent([\n          [0, 0],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n        ])\n\n      // Use the same mouseBrush for both xBrush and tooltip\n      this.brushXDiv = this.opts.chart.mouseHandler.mouseBrush\n        .call(this.brushX)\n\n      brushOverlay = this.brushXDiv.selectAll('rect.overlay')\n\n      // Call this event when xAxis brush is ended\n      this.brushX.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n\n        const d0 = d3Event.selection.map(xScale.invert)\n        // find x1 and x2\n          \n        const d1 = d0 && d0.map(Math.round) // round both values\n\n        // clear Brush\n        self.brushXDiv.call(self.brushX.move, null)\n        brushOverlay.style('cursor', 'auto')\n\n        // d1 = d1\n        //   .sort(function (a, b) {\n        //     return (a - b)\n        //   })\n\n        self.opts.chart.xAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of X axis upon horizontal zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onZoom) && self.opts.onZoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical left scale operation\n    if (yScaleLeft) {\n      this.brushYLeft = brushY()\n\n      this.brushYLeftDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-left')\n\n      // Call this event when yAxis brush is ended\n      this.brushYLeft.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYLeftDiv.call(self.brushYLeft.move, null)\n\n        const d0 = d3Event.selection.map(yScaleLeft.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of Y axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY1Zoom) && self.opts.onY1Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical right scale operation\n    if (yScaleRight) {\n      this.brushYRight = brushY()\n\n      this.brushYRightDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-right')\n\n      this.brushYRight.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYRightDiv.call(self.brushYRight.move, null)\n\n        const d0 = d3Event.selection.map(yScaleRight.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis2.modifyAxisProps({\n          domainScale: d1 // Change domain of Y2 axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY2Zoom) && self.opts.onY2Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    brushOverlay && this.opts.chart.mouseHandler.register(function () {\n      // When mouse is clicked or down, enable zoom brush and its mouse cursor\n      brushOverlay\n        .on('mousedown', function () {\n          brushOverlay.style('cursor', 'col-resize')\n        })\n        .on('click', function () {\n          brushOverlay.style('cursor', 'auto')\n        })\n    })\n    this.update()\n\n  }\n\n  update () {\n    if (this.brushX) {\n      this.brushX.extent([\n        [0, 0],\n        [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n      ])\n\n      this.brushXDiv.call(this.brushX)\n    }\n\n    if (this.brushYLeft) {\n      this.brushYLeft\n        .extent([\n          [0, 0],\n          [(this.opts.chart.margin.left - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYLeftDiv\n        .attr('transform', 'translate(' + constants.BRUSHY_BUFFER + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYLeft)\n    }\n\n    if (this.brushYRight) {\n      this.brushYRight\n        .extent([\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth - constants.BRUSHY_BUFFER), 0],\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth + this.opts.chart.margin.right - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYRightDiv\n        .attr('transform', 'translate(' + (constants.BRUSHY_BUFFER) + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYRight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.brushXDiv && this.brushXDiv.classed('vc-hidden', !showFlag)\n    this.brushYLeftDiv && this.brushYLeftDiv.classed('vc-hidden', !showFlag)\n    this.brushYRightDiv && this.brushYRightDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    if (this.brushXDiv) {\n      this.brushXDiv.call(this.brushX.move, null)\n      this.brushXDiv && this.brushXDiv.remove()\n    }\n    if (this.brushYLeftDiv) {\n      this.brushYLeftDiv.call(this.brushYLeft.move, null)\n      this.brushYLeftDiv.remove()\n    }\n    if (this.brushYRightDiv) {\n      this.brushYRightDiv.call(this.brushYRight.move, null)\n      this.brushYRightDiv.remove()\n    }\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, emptyFn} from '@/utils'\nimport {brushY, d3Event, d3Touches, zoom} from '@/d3Importer'\nimport constants from '@/constants'\nimport {bisector} from 'd3-array'\n\nexport default class GestureZoom extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      onZoom: emptyFn,\n      onY1Zoom: emptyFn,\n      onY2Zoom: emptyFn,\n    }, opts)\n  }\n\n  getClosestXAxisData (xVal, dataSet) {\n    const dateIndex = this.opts.chart.options.timeInfo.dataIndex\n    // Find nearest existing date among array of sorted date\n    const bisectDate = bisector(function (d) {\n      return d[dateIndex]\n    }).left\n\n    // Do binary search of data set from 2nd data set to end\n    const found = bisectDate(dataSet, xVal, 1)\n\n\n    const dPrev = dataSet[found - 1]\n    // get before find dataSet\n\n    const dFound = dataSet[found] || dPrev // get find dataSet\n\n    return dFound\n  }\n\n\n  updatebrushXSelection (startPos, endPos) {\n    this.brushXDiv\n      .attr('x', startPos)\n      .attr('width', (endPos - startPos))\n  }\n\n  draw () {\n    const self = this\n    const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n    const yScaleLeft = getObject(this.opts, 'chart.yAxis.scale') || false\n    const yScaleRight = getObject(this.opts, 'chart.yAxis2.scale') || false\n    const dataSet = this.opts.chart.options.chartData\n    if (xScale) {\n\n      // Create x axis brush for Zoom operation\n      this.zoomX = zoom()\n        .scaleExtent([0, dataSet.length])\n        .translateExtent([\n          [this.opts.chart.margin.left, this.opts.chart.margin.top],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]])\n        .extent([[this.opts.chart.margin.left, this.opts.chart.margin.top], [this.opts.chart.chartWidth, this.opts.chart.chartHeight]])\n        .touchable(() => true)\n\n      this.zoomXDiv = this.opts.chart.svg\n        .call(this.zoomX)\n\n\n      // Use the same mouseBrush for both xBrush and tooltip\n      this.brushXDiv = this.opts.chart.mouseHandler.mouseBrush\n        .append('rect')\n        .attr('class', 'selection')\n        .attr('cursor', 'move')\n        .style('opacity', '0.3')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 0)\n        .attr('height', this.opts.chart.chartHeight)\n\n      let isGesture = false\n      let startPos = 0\n      let endPos = 0\n      const tooltip = self.opts.chart.tooltip\n      this.zoomXDiv\n        .style('touch-action', 'pan-y')\n        .on('touchstart.zoom', function () {\n          const touches = d3Touches(this)\n          isGesture = d3Event.touches && d3Event.touches.length === 2\n          if (isGesture && touches.length) {\n            tooltip && tooltip.hide()\n            const xPos = (touches[0][0] - self.opts.chart.margin.left)\n            startPos = xPos\n            endPos = xPos\n            self.updatebrushXSelection(startPos, endPos)\n          }\n        }, true)\n        .on('touchmove.zoom', function () {\n          const touches = d3Touches(this)\n          if (isGesture && touches.length) {\n            const xPos1 = (touches[0][0] - self.opts.chart.margin.left)\n            const xPos2 = (touches[1][0] - self.opts.chart.margin.left)\n            let xMin = xPos1\n            let xMax = xPos2\n            if (xPos1 > xPos2) {\n              xMin = xPos2\n              xMax = xPos1\n            }\n            startPos = xMin\n            endPos = xMax\n            self.updatebrushXSelection(startPos, endPos)\n          }\n        }, true)\n        .on('touchend.zoom', function () {\n          const touches = d3Touches(this)\n          if (isGesture && touches.length) {\n            const xPos = (touches[0][0] - self.opts.chart.margin.left)\n            if (startPos > xPos) {\n              startPos = xPos\n            }\n            if (endPos < xPos) {\n              endPos = xPos\n            }\n\n            const startVal = xScale.invert(startPos)\n            const startDt = Math.round(startVal)\n\n            const endVal = xScale.invert(endPos)\n            const endDt = Math.round(endVal)\n            self.updatebrushXSelection(startPos, endPos)\n\n            // Used onZoom.call(), so that external function can have access of chart Instance\n            isFunction(self.opts.onZoom) && self.opts.onZoom.call(self.opts.chart, startDt, endDt)\n          }\n          self.updatebrushXSelection(0, 0)\n          startPos = 0\n          endPos = 0\n          isGesture = false\n        }, true)\n\n    }\n\n    // Create y axis brush for vertical left scale operation\n    if (yScaleLeft) {\n      this.brushYLeft = brushY()\n\n      this.brushYLeftDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-left')\n\n      // Call this event when yAxis brush is ended\n      this.brushYLeft.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYLeftDiv.call(self.brushYLeft.move, null)\n\n        const d0 = d3Event.selection.map(yScaleLeft.invert)\n\n\n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of Y axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY1Zoom) && self.opts.onY1Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical right scale operation\n    if (yScaleRight) {\n      this.brushYRight = brushY()\n\n      this.brushYRightDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-right')\n\n      this.brushYRight.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYRightDiv.call(self.brushYRight.move, null)\n\n        const d0 = d3Event.selection.map(yScaleRight.invert)\n\n\n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis2.modifyAxisProps({\n          domainScale: d1 // Change domain of Y2 axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY2Zoom) && self.opts.onY2Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    this.update()\n\n  }\n\n  update () {\n    if (this.zoomX) {\n      this.zoomX\n        .translateExtent([\n          [this.opts.chart.margin.left, this.opts.chart.margin.top],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n        ])\n        .extent([\n          [this.opts.chart.margin.left, this.opts.chart.margin.top],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n        ])\n\n      this.brushXDiv\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 0)\n        .attr('height', this.opts.chart.chartHeight)\n\n    }\n\n    if (this.brushYLeft) {\n      this.brushYLeft\n        .extent([\n          [0, 0],\n          [(this.opts.chart.margin.left - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYLeftDiv\n        .attr('transform', 'translate(' + constants.BRUSHY_BUFFER + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYLeft)\n    }\n\n    if (this.brushYRight) {\n      this.brushYRight\n        .extent([\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth - constants.BRUSHY_BUFFER), 0],\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth + this.opts.chart.margin.right - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYRightDiv\n        .attr('transform', 'translate(' + (constants.BRUSHY_BUFFER) + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYRight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.brushXDiv && this.brushXDiv.classed('vc-hidden', !showFlag)\n    this.brushYLeftDiv && this.brushYLeftDiv.classed('vc-hidden', !showFlag)\n    this.brushYRightDiv && this.brushYRightDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    if (this.brushXDiv) {\n      this.brushXDiv && this.brushXDiv.remove()\n    }\n    if (this.brushYLeftDiv) {\n      this.brushYLeftDiv.call(this.brushYLeft.move, null)\n      this.brushYLeftDiv.remove()\n    }\n    if (this.brushYRightDiv) {\n      this.brushYRightDiv.call(this.brushYRight.move, null)\n      this.brushYRightDiv.remove()\n    }\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {line} from '@/d3Importer'\n\nexport default class Line extends ChartComponent {\n\n  constructor (opts) {\n    super()\n    // Do not register this component in chartComponentsArr,  As the series component is already registered and will call the line APIs\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      lineData: null,\n      yAxisTarget: null,\n      xAxisTarget: null,\n      visible: true,\n      dots: {\n        visible: false,\n        radius: 5\n      }\n    }, opts)\n\n    const self = this\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.line = line()\n\n    if (this.opts.yAxisTarget) {\n      // For normal series, yAxisTarget refers to the index of this series in data Arr\n      this.line\n        .defined(function (d) {\n          return d[self.opts.yAxisTarget] != null\n        })\n        .x(function (d) {\n          // xAxisTarget refers the index of date in data Arr\n          return x(d[self.opts.xAxisTarget])\n        })\n        .y(function (d) {\n          return y(d[self.opts.yAxisTarget])\n        })\n    }\n  }\n\n  draw () {\n    const self = this\n    this.lineTag = this.opts.chart.graphZone.selectAll('.vc-line-' + this.opts.className)\n      .data([this.opts.lineData])\n      .enter()\n      .append('g')\n      .attr('class', 'vc-line-plot vc-line-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    // Adding the lines series for data to be shown\n    this.lineTag.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-line')\n      .style('stroke', function (d) {\n        return d.color\n      })\n      .style('fill', 'transparent')\n      .style('stroke-width', function (d) {\n        return d.lineWidth || '2px'\n      })\n      .attr('d', function (d) {\n        return self.line(d.values) // Values are array of array having format like  [[date, series1, series2 ....],...]\n      })\n\n    // Adding dots on each points on line if enabled\n    if (this.opts.dots && this.opts.dots.visible) {\n      // Find x and y axis based on plotAxis\n      let x = getObject(this.opts, 'chart.xAxis.scale')\n      if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n        x = getObject(this.opts, 'chart.xAxis2.scale')\n      }\n\n      let y = getObject(this.opts, 'chart.yAxis.scale')\n      if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n        y = getObject(this.opts, 'chart.yAxis2.scale')\n      }\n\n      const totalLineLength = this.opts.lineData.length\n      this.lineTag.selectAll('vc-line-dot')\n        .data(this.opts.lineData)\n        .enter().append('circle')\n        .attr('class', function (d, index) {\n          let className = `vc-dot vc-dot-count-${index}`\n          if (index === 0) {\n            className += ' vc-dot-first'\n          }\n          if (index === (totalLineLength - 1)) {\n            className += ' vc-dot-last'\n          }\n          return className\n        })\n        .attr('r', this.opts.dots.radius)\n        .attr('cx', function (d) {\n          // xAxisTarget refers the index of date in data Arr\n          return x(d[self.opts.xAxisTarget])\n        })\n        .attr('cy', function (d) {\n          return y(d[self.opts.yAxisTarget])\n        })\n    }\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    this.lineTag && this.lineTag.select('path').attr('d', function (d) {\n      return self.line(d.values)\n    })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.lineTag && this.lineTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const seriesName = this.opts.lineData.name\n    // Remove line series\n    this.lineTag && this.lineTag.remove()\n\n    if (eachPlotSet && eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n      this.draw()\n    }\n\n  }\n\n  remove () {\n    this.lineTag && this.lineTag.remove()\n    this.line = null\n    this.opts = null\n  }\n\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {area, stack, stackOrderNone, stackOffsetNone} from '@/d3Importer'\nimport {getObject} from '@/utils'\n\nexport default class StackArea extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      xAxisTarget: '',\n      stackData: null,\n      stackOrderMembers: {},\n      visible: true\n    }, opts)\n\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Define in what order, Stack series needs to be ploted\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.opts.d3Stack = stack()\n\n    this.area = area()\n      .x(function (d, i) {\n        return x(d.data[self.opts.xAxisTarget])\n      })\n      .y0(function (d) {\n        return y(d[0]) // Indicates where to start along YAxis\n      })\n      .y1(function (d) {\n        return y(d[1]) // Indicates where to end along YAxis\n      })\n\n  }\n\n  draw () {\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    this.opts.d3Stack.keys(this.opts.stackOrderIndex) // specify the stack series names in array format\n    this.opts.d3Stack.order(stackOrderNone) // use the given series order.\n    this.opts.d3Stack.offset(stackOffsetNone) // apply a zero baseline on start\n\n    // Show stack plot for only series which are visible\n    const stackVisibleOrder = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n\n    this.stackLayer = this.opts.chart.graphZone.selectAll('.vc-stack-' + this.opts.className)\n      .data(this.opts.d3Stack(this.opts.stackData))\n      .enter()\n      .append('g')\n      .attr('class', 'vc-stack-plot vc-stack-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n\n    // PLot stackLayer based on each series visiblity\n    this.stackLayer.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return 'vc-stack vc-stack-' + stackMember.name\n      })\n      .style('fill', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return eachPlotSet[stackMember.name].color\n      })\n      .attr('d', this.area)\n\n  }\n  \n  // Update stackLayer based on chart resize\n  update () {\n    this.stackLayer && this.stackLayer.select('path').attr('d', this.area)\n  }\n  \n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify stackOrder arr based on visibleSeries\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all stack series\n    this.stackLayer && this.stackLayer.remove()\n    // draw with new stackOrderMembers\n    this.draw()\n  }\n  \n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.stackLayer.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n  \n  remove () {\n    //  this.stackAreaPath.remove();\n    this.stackLayer && this.stackLayer.remove()\n    this.opts.d3Stack = null\n    this.area = null\n    this.opts = null\n  }\n}","import {isArray} from '@/utils'\nimport Line from '@/series/Line'\nimport StackArea from '@/series/StackArea'\nimport Series from '@/series/Series'\n\nexport default class TimeSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.stack) && plotInfo.stack.forEach((plotData) => {\n      this.plotSeries.push(new StackArea({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        stackData: data,\n        stackOrderMembers: plotData.stackOrderMembers\n      }))\n    })\n\n    isArray(plotInfo.line) && plotInfo.line.forEach((plotData) => {\n      this.plotSeries.push(new Line({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        yAxisTarget: eachPlotSet[plotData.name].dataIndex,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        visible: eachPlotSet[plotData.name].visible,\n        lineData: {\n          name: plotData.name,\n          color: eachPlotSet[plotData.name].color,\n          lineWidth: eachPlotSet[plotData.name].lineWidth,\n          values: data\n        }\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultTSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport BasicTSParser from '@/data-parser/BasicTSParser'\nimport Tooltip from '@/tooltip/TimeSeriesTooltip'\nimport MouseHandler from '@/mouse-handler'\nimport Zoom from '@/zoom'\nimport GestureZoom from '@/zoom/GestureZoom'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\nimport TimeSeries from '@/series/TimeSeries'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicTSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Add default options to chart\n    addDefaultTSOptions(this.options)\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    const zoomOpts = getObject(this, 'options.zoom', {})\n    if ((tooltipOpts.visible || zoomOpts.visible)) {\n      this.mouseHandler = new MouseHandler({\n        chart: this,\n      })\n      this.chartComponentsArr.push(this.mouseHandler)\n    }\n\n    if (this.options.zoom.visible) {\n      let zoomFn = Zoom\n      if (this.options.chart.isTouchScreen) {\n        zoomFn = GestureZoom\n      }\n      this.zoomBrush = new zoomFn({\n        chart: this,\n        onZoom: this.options.zoom.onXZoom,\n        onY1Zoom: this.options.zoom.onY1Zoom,\n        onY2Zoom: this.options.zoom.onY2Zoom\n      })\n      this.chartComponentsArr.push(this.zoomBrush)\n    }\n\n    if (this.options.series) {\n      this.series = new TimeSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      this.legends = new TimeSeriesLegend({\n        chart: this,\n        legendPrefix: this.options.legend.legendPrefix,\n        position: constants.DIR_TOP,\n        disableSeriesToggle: this.options.legend.disableSeriesToggle,\n        onLegendChange: this.options.legend.onLegendChange\n      })\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('TimeSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n    const self = this\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n"],"sourceRoot":""}