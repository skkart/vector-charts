{"version":3,"sources":["webpack://vc/./data-parser/BasicTSParser.js","webpack://vc/./tooltip/TimeSeriesTooltip.js","webpack://vc/./mouse-handler/index.js","webpack://vc/./zoom/PinchIndex.js","webpack://vc/./series/Line.js","webpack://vc/./series/StackArea.js","webpack://vc/./series/TimeSeries.js","webpack://vc/./charts/TimeSeriesChart.js","webpack://vc/../node_modules/core-js/library/fn/object/keys.js","webpack://vc/../node_modules/core-js/library/modules/es6.object.keys.js","webpack://vc/./d3Importer.js","webpack://vc/./axis/index.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/../node_modules/babel-runtime/core-js/object/keys.js","webpack://vc/./legend/TimeSeriesLegend.js"],"names":["BasicTSParser","opts","this","dataOptions","data","series","yAxis","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","console","log","onError","Error","seriesData","timeseries","columns","values","validJSONType","length","firstTime","isNumber","isDate","start","forEach","d","getDateFromEpoc","chartData","timeInfo","dataIndex","timeRange","eachPlotSet","plotSet","plotInfo","getObject","yAxis2","findEachPlotRange","key","yRange","yRange2","min","max","minVal","maxVal","stack","plot","eachPlot","Infinity","plotData","valueRange","valData","memberArr","stackOrderMembers","sum","member","name","visible","allMax","allMax2","plotAxis","allMin","allMin2","yMin","yMax","reduce","a","b","ind","timeStampIndex","dataColorArr","color","yLeft","yRight","refineName","refineString","unit","isBoolean","barOrderMembers","ChartAxisParser","TimeSeriesTooltip","crossHairs","enable","isFunction","format","toolTipDiv","chart","container","append","attr","className","svg","margin","left","top","constants","TOOLTIP_TOP_BUFFER","chartHeight","mouseHandler","register","self","xScale","dateIndex","options","dataSet","bisectDate","bisector","eventName","isTouchScreen","mouseBrush","on","xMouse","d3Mouse","yMouse","xVal","invert","found","dBefore","dPrev","dFound","toolTipData","chartWidth","dataParseLen","Math","floor","visibleDataIndex","pl","multiArrMap","dSet","filter","val","index","sort","maxInd","mp","arrSet","dateIntRange","abs","hover","hide","select","xPos","yPos","displayData","showHide","percentageDiff","box","elementOffset","rootPos","round","width","height","style","html","call","showFlag","classed","remove","ChartComponent","MouseHandler","registerFn","zoom","callback","push","fun","Zoom","onZoom","emptyFn","onY1Zoom","onY2Zoom","yScaleLeft","yScaleRight","window","bx","callZoom","debounce","domain","Date","alert","brushX","scaleExtent","translateExtent","extent","bbx","brushXDiv","brushYLeft","brushY","brushYLeftDiv","d3Event","selection","move","d0","map","d1","modifyAxisProps","domainScale","update","brushYRight","brushYRightDiv","BRUSHY_BUFFER","right","Line","DIR_LEFT","DIR_BOTTOM","lineData","yAxisTarget","xAxisTarget","x","indexOf","DIR_TOP","y","DIR_RIGHT","line","defined","lineTag","graphZone","selectAll","enter","clipElement","lineWidth","seriesName","draw","StackArea","stackData","stackOrderIndex","ele","d3Stack","area","i","y0","y1","keys","order","stackOrderNone","offset","stackOffsetNone","stackVisibleOrder","stackLayer","stackMember","TimeSeries","plotSeries","isArray","Series","TimeSeriesChart","startTime","dataParser","isObject","dataExecutor","addDefaultTSOptions","chartInitilize","axisOptions","Axis","position","orient","rangeScale","chartComponentsArr","xAxis","tooltipOpts","tooltip","Tooltip","zoomOpts","zoomBrush","onXZoom","legend","legends","TimeSeriesLegend","legendPrefix","disableSeriesToggle","onLegendChange","afterDraw","reScaleYAxis","chartResponsive","triggerMouseAction","timeDiff","getTime","onComplete","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","tickValues","reScaleAxis","requiredWidth","class","maxText","dummyG","axis","each","tickHtml","text","String","getComputedTextLength","Y_AXIS_SPACE","chartFullSpace","Chart","module","exports","Object","toObject","$keys","it","label","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","axisBottom","axisTop","tickSizeInner","axisLeft","axisRight","externalFormatter","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","padding","clamp","range","tickVal","newTick","dayLength","minuteLength","ticks","limitText","tickFmt","truncateText","isString","size","containerName","containerBox","takeContainerWidth","takeContainerHeight","maxWidth","minWidth","chartType","bottom","counter","chartCmpt","chartResize","throttedResize","throttle","setTimeout","chartId","id","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","chartCounter","c","time","error","defaultValueFormat","decimals","kVal","getValueWithDecimals","timeLen","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","UNITS_DEF","formatTime","zoneOffset","tableStr","isNaN","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","pie","percentage","total","plotFn","redraw","__esModule","maxWidthLegend","spacingNames","eachPlotNames","leng","textWidth","maxLenLegend","thisWidth","maxTextLength","graphOptions","toggleSeries","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","visibleSeries","plotName","applyYAxis","currentPlotInfo","sFlag","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER"],"mappings":"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","file":"timeseries.min.js","sourcesContent":["import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getDateFromEpoc, getObject, refineString, isNumber, isDate, isBoolean} from '@/utils'\n\nexport default class BasicTSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while timeseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on timeseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    // Find seconds in unitArr to find the timeStampIndex\n    const timeStampIndex = 0\n    const firstTime = data[0][timeStampIndex]\n    if (!validJSONType || !(isNumber(firstTime) || isDate(firstTime))) {\n      throw new Error('Invalid Time series JSON received')\n    }\n\n    let start = 0\n    data.forEach(function (d) {\n      if (start > d[timeStampIndex]) {\n        throw new Error('Invalid Time series JSON received: Timestamp Values must be in ascending order')\n      }\n      start = d[timeStampIndex]\n      d[timeStampIndex] = getDateFromEpoc(d[timeStampIndex], true) // convert EPOC to date\n    })\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: [seriesData[0][dataIndex], seriesData[(seriesData.length - 1)][dataIndex]]\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let findEachPlotRange = false\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if ((yAxis && !yRange) || (yAxis2 && !yRange2)) {\n\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if ((plotInfo.stack && plotInfo.stack.length) || findEachPlotRange) {\n\n        if (findEachPlotRange) {\n          // Reset range for each plot for finding min , max\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            eachPlot.minVal = Infinity\n            eachPlot.maxVal = -Infinity\n          }\n        }\n\n        // Reset stack range for each stack for finding min , max\n        plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n          plotData.valueRange = [Infinity, -Infinity]\n        })\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          if (findEachPlotRange) {\n            for (const plot in eachPlotSet) {\n              const eachPlot = eachPlotSet[plot]\n              valData = d[eachPlot.dataIndex]\n              if (valData < eachPlot.minVal) {\n                eachPlot.minVal = valData\n              }\n              if (valData > eachPlot.maxVal) {\n                eachPlot.maxVal = valData\n              }\n            }\n          }\n\n          plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n            const memberArr = plotData.stackOrderMembers\n            let sum = 0\n            memberArr.forEach(function (member) {\n              sum += (eachPlotSet[member.name].visible ? d[eachPlotSet[member.name].dataIndex] : 0)\n            })\n\n            if (sum < plotData.valueRange[0]) {\n              plotData.valueRange[0] = sum\n            }\n            if (sum > plotData.valueRange[1]) {\n              plotData.valueRange[1] = sum\n            }\n          })\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'line') {\n          plotInfo[key].forEach(function (plotData) {\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'left' && eachPlotSet[plotData.name].maxVal > allMax) {\n              allMax = eachPlotSet[plotData.name].maxVal\n            }\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'right' && eachPlotSet[plotData.name].maxVal > allMax2) {\n              allMax2 = eachPlotSet[plotData.name].maxVal\n            }\n          })\n        } else if (key === 'stack') {\n          plotInfo[key].forEach(function (plotData) {\n            if (plotData.plotAxis[0] === 'left' && plotData.valueRange[1] > allMax) {\n              allMax = plotData.valueRange[1]\n            }\n            if (plotData.plotAxis[0] === 'right' && plotData.valueRange[1] > allMax2) {\n              allMax2 = plotData.valueRange[1]\n            }\n          })\n        }\n      }\n\n      // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const timeStampIndex = dataOptions.timeInfo.dataIndex\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      if (timeStampIndex === ind) {\n        ind++\n        return\n      }\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'line') {\n        plotInfo[key].forEach(function (plotData) {\n          plotData.name = refineString(plotData.name)\n          const color = plotData.color // Apply color for each Plot series or pick from data color Arr\n          if (!color) {\n            throw `Color not present for series ${plotData.name}`\n          }\n          color && (eachPlotSet[plotData.name].color = color)\n          const plotAxis = plotData.plotAxis || ['left', 'bottom']\n          eachPlotSet[plotData.name].plotAxis = plotAxis\n          const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n          eachPlotSet[plotData.name].unit = unit\n          isBoolean(plotData.visible) && (eachPlotSet[plotData.name].visible = plotData.visible)\n        })\n      } else if (key === 'stack') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.stackOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      } else if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, getObject, isFunction} from '@/utils'\nimport {bisector, d3Mouse} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class TimeSeriesTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      crossHairs: {\n        enable: true\n      },\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.crossHairs = false\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n\n    if (this.opts.crossHairs.enable === true) {\n      this.crossHairs = this.opts.chart.svg\n        .append('g')\n        .attr('class', 'vc-tooltip-line')\n      this.crossHairs.append('line')\n        .attr('transform', 'translate(-999,-999)')\n        .attr('x1', this.opts.chart.margin.left)\n        .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n        .attr('x2', this.opts.chart.margin.left)\n        .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n\n    }\n\n    this.opts.chart.mouseHandler.register(() => {\n      // Register hover and hide/show toolip events\n      const self = this\n      const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n      const mouseHandler = this.opts.chart.mouseHandler\n      const dateIndex = this.opts.chart.options.timeInfo.dataIndex\n      const dataSet = this.opts.chart.options.chartData\n      // Find nearest existing date among array of sorted date\n      const bisectDate = bisector(function (d) {\n        return d[dateIndex]\n      }).left\n\n      const mouseEvt = function (d) {\n        // On mousemove of x overlay, find x,y values and update tooltip\n        const xMouse = d3Mouse(this)[0]\n        const yMouse = d3Mouse(this)[1]\n        const xVal = xScale.invert(xMouse) // find xAxis date for mouse position\n\n        // Do binary search of data set from 2nd data set to end\n        const found = bisectDate(dataSet, xVal, 1)\n\n          \n        const dBefore = dataSet[found - 2]\n\n          \n        const dPrev = dataSet[found - 1]\n        // get before find dataSet\n          \n        const dFound = dataSet[found] || dPrev // get find dataSet\n\n        let toolTipData = dPrev\n        if (dataSet.length > self.opts.chart.chartWidth) {\n          // More than one tick reside on each pixel. Hence find tick having max value among the dataset\n          const dataParseLen = Math.floor(dataSet.length / self.opts.chart.chartWidth) + 1\n\n          const visibleDataIndex = {}\n\n          for (const pl in self.opts.chart.options.plotSet) {\n            const plot = self.opts.chart.options.plotSet[pl]\n            if (plot.visible) {\n              visibleDataIndex[plot.dataIndex] = true\n            }\n          }\n\n          const multiArrMap = {}\n          // Do Scan from range -dataParseLen to +dataParseLen between found data index\n          for (let ind = (found - dataParseLen); ind < (found + dataParseLen); ind++) {\n            if (dataSet[ind]) {\n              const dSet = dataSet[ind].filter(function (val, index) {\n                return visibleDataIndex[index]\n              }).sort(function (a, b) {\n                return b - a\n              })\n              if (dSet.length) {\n                multiArrMap[ind] = dSet\n              }\n            }\n          }\n          let maxInd\n          let maxVal = -Infinity\n          for (const mp in multiArrMap) {\n            const arrSet = multiArrMap[mp]\n            if (maxVal < arrSet[0]) {\n              maxVal = arrSet[0]\n              maxInd = mp\n            }\n          }\n\n          toolTipData = dataSet[maxInd] || dFound\n        } else {\n          // Find nearest reaching date among above two dates\n          toolTipData = (xVal - dPrev[dateIndex]) > (dFound[dateIndex] - xVal) ? dFound : dPrev\n        }\n\n        let dateIntRange = dFound[dateIndex] - dPrev[dateIndex]\n\n        if (!dateIntRange && dBefore) {\n          dateIntRange = dPrev[dateIndex] - dBefore[dateIndex]\n        }\n\n        if (dateIntRange < Math.abs(dFound[dateIndex] - xVal)) {\n          // If found is outside data interval range, Then data doesnt exist for that tick.\n          toolTipData = []\n          toolTipData[dateIndex] = xVal\n        }\n\n        self.hover(xMouse, yMouse, toolTipData)\n      }\n\n      let eventName = 'mousemove'\n      if (this.opts.chart.options.chart.isTouchScreen) {\n        eventName = 'click'\n      }\n      mouseHandler.mouseBrush\n        .on(eventName, mouseEvt)\n        .on('mouseout', function () {\n          self.hide()\n        })\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n      mouseHandler.mouseBrush.select('rect.overlay')\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n    })\n  }\n\n  hover (xPos, yPos, displayData) {\n    // Update displayPanel and line based on x position\n    this.crossHairs && this.crossHairs.select('line')\n      .attr('transform', `translate(${xPos},0)`)\n      .attr('x1', this.opts.chart.margin.left)\n      .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n      .attr('x2', this.opts.chart.margin.left)\n      .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n    this.showHide(true)\n\n    let percentageDiff = xPos / this.opts.chart.chartWidth\n\n    if (percentageDiff < 0.3) {\n      percentageDiff = 0.2\n    }\n    if (percentageDiff > 0.7) {\n      percentageDiff = 0.95\n    }\n\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    const left = Math.round(rootPos.left + this.opts.chart.margin.left + xPos - box.width * percentageDiff) + 'px'\n    const top = Math.round(rootPos.top - box.height - 5 + constants.TOOLTIP_TOP_BUFFER * 2) + 'px'\n\n\n    this.toolTipDiv\n      .style('left', left)\n      .style('top', top)\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n\n    this.crossHairs && this.crossHairs.classed('vc-hidden', !showFlag)\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.toolTipDiv && this.toolTipDiv.remove()\n    this.crossHairs && this.crossHairs.remove()\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class MouseHandler extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.opts.registerFn = []\n  }\n\n  draw () {\n    this.mouseBrush = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-brushX')\n      .attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .attr('style', '-webkit-tap-highlight-color: rgba(0, 0, 0, 0)')\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n\n    if (this.opts.chart.options.chart.isTouchScreen) {\n      this.mouseBrush.attr('cursor', 'pointer')\n    }\n\n    if (!this.opts.chart.options.zoom.visible) {\n      // x-Zoom for chart doest not exist, Add rect overlay for brushXDiv\n      this.mouseBrush.append('rect')\n        .attr('class', 'overlay')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  update () {\n    this.mouseBrush.attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n    if (!this.opts.chart.options.zoom.visible) {\n      this.mouseBrush.select('rect.overlay')\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.mouseBrush && this.mouseBrush.classed('vc-hidden', !showFlag)\n  }\n\n  register (callback) {\n    this.opts.registerFn.push(callback)\n  }\n\n  triggerMouseAction () {\n    this.opts.registerFn.forEach((fun) => {\n      fun.call(this)\n    })\n  }\n\n  remove () {\n    this.mouseBrush && this.mouseBrush.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, emptyFn, debounce} from '@/utils'\nimport {brushY, d3Event, zoom} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class Zoom extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      onZoom: emptyFn,\n      onY1Zoom: emptyFn,\n      onY2Zoom: emptyFn\n    }, opts)\n  }\n\n  draw () {\n    const self = this\n    const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n    const yScaleLeft = getObject(this.opts, 'chart.yAxis.scale') || false\n    const yScaleRight = getObject(this.opts, 'chart.yAxis2.scale') || false\n    // let brushOverlay = null\n    if (xScale) {\n      window.bx = zoom\n      // Create x axis brush for Zoom operation\n      const callZoom = debounce(function (domain) {\n        // self.opts.chart.xAxis.modifyAxisProps({\n        //   domainScale: domain // Change domain of X axis upon horizontal zoom\n        // })\n        //\n        // self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n\n        console.log(new Date(domain[0]))\n        console.log(new Date(domain[1]))\n        alert('D1: ' + new Date(domain[0]) + '  , D2:' + new Date(domain[1]))\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        // self.opts && self.opts.onZoom.call(self.opts.chart, domain[0], domain[1])\n      }, 200)\n      console.log(callZoom)\n      this.brushX = zoom()\n        .scaleExtent([1, Infinity])\n        .translateExtent([\n          [0, 0],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]])\n        .extent([[0, 0], [this.opts.chart.chartWidth, this.opts.chart.chartHeight]])\n        // .on('zoom', (...args) => {\n        //   console.log('Arg', args)\n        //   var t = d3Event.transform\n        //   const d0 = t.rescaleX(xScale).domain()\n        //   const d1 = d0 && d0.map(Math.round) // round both values\n        //   console.log(d0, d1)\n        //   window.argu = args\n        //   console.log('d1', d1)\n        //   callZoom(d1)\n        // })\n        .on('touchstart.zoom', () => console.log('start here'))\n        .on('touchend.zoom', () => console.log('end here'))\n        .on('touchmove.zoom', () => console.log('move here'))\n      // window.bx = zoom\n      window.bbx = this.brushX\n\n      // Use the same mouseBrush for both xBrush and tooltip\n      this.brushXDiv = this.opts.chart.svg\n        .call(this.brushX)\n      //\n      // brushOverlay = this.brushXDiv.selectAll('rect.overlay')\n\n      // Call this event when xAxis brush is ended\n      // this.brushX.on('end', function () {\n      //   if (!d3Event.selection) {\n      //     return\n      //   }\n      //\n      //   const d0 = d3Event.selection.map(xScale.invert)\n      //   // find x1 and x2\n      //\n      //   const d1 = d0 && d0.map(Math.round) // round both values\n      //\n      //   // clear Brush\n      //   self.brushXDiv.call(self.brushX.move, null)\n      //   brushOverlay.style('cursor', 'auto')\n      //\n      //   // d1 = d1\n      //   //   .sort(function (a, b) {\n      //   //     return (a - b)\n      //   //   })\n      //\n      //   self.opts.chart.xAxis.modifyAxisProps({\n      //     domainScale: d1 // Change domain of X axis upon horizontal zoom\n      //   })\n      //\n      //   self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n      //\n      //\n      //   // Used onZoom.call(), so that external function can have access of chart Instance\n      //   self.opts && self.opts.onZoom.call(self.opts.chart, d1[0], d1[1])\n      //\n      // })\n    }\n\n    // Create y axis brush for vertical left scale operation\n    if (yScaleLeft) {\n      this.brushYLeft = brushY()\n\n      this.brushYLeftDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-left')\n\n      // Call this event when yAxis brush is ended\n      this.brushYLeft.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYLeftDiv.call(self.brushYLeft.move, null)\n\n        const d0 = d3Event.selection.map(yScaleLeft.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of Y axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY1Zoom) && self.opts.onY1Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical right scale operation\n    if (yScaleRight) {\n      this.brushYRight = brushY()\n\n      this.brushYRightDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-right')\n\n      this.brushYRight.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYRightDiv.call(self.brushYRight.move, null)\n\n        const d0 = d3Event.selection.map(yScaleRight.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis2.modifyAxisProps({\n          domainScale: d1 // Change domain of Y2 axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY2Zoom) && self.opts.onY2Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // brushOverlay && this.opts.chart.mouseHandler.register(function () {\n    //   // When mouse is clicked or down, enable zoom brush and its mouse cursor\n    //   brushOverlay\n    //     .on('mousedown', function () {\n    //       brushOverlay.style('cursor', 'col-resize')\n    //     })\n    //     .on('click', function () {\n    //       brushOverlay.style('cursor', 'auto')\n    //     })\n    // })\n    this.update()\n\n  }\n\n  update () {\n    // if (this.brushX) {\n    //   this.brushX.extent([\n    //     [0, 0],\n    //     [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n    //   ])\n    //\n    //   this.brushXDiv.call(this.brushX)\n    // }\n\n    if (this.brushYLeft) {\n      this.brushYLeft\n        .extent([\n          [0, 0],\n          [(this.opts.chart.margin.left - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYLeftDiv\n        .attr('transform', 'translate(' + constants.BRUSHY_BUFFER + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYLeft)\n    }\n\n    if (this.brushYRight) {\n      this.brushYRight\n        .extent([\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth - constants.BRUSHY_BUFFER), 0],\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth + this.opts.chart.margin.right - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYRightDiv\n        .attr('transform', 'translate(' + (constants.BRUSHY_BUFFER) + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYRight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.brushXDiv && this.brushXDiv.classed('vc-hidden', !showFlag)\n    this.brushYLeftDiv && this.brushYLeftDiv.classed('vc-hidden', !showFlag)\n    this.brushYRightDiv && this.brushYRightDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    if (this.brushXDiv) {\n      this.brushXDiv.call(this.brushX.move, null)\n      this.brushXDiv && this.brushXDiv.remove()\n    }\n    if (this.brushYLeftDiv) {\n      this.brushYLeftDiv.call(this.brushYLeft.move, null)\n      this.brushYLeftDiv.remove()\n    }\n    if (this.brushYRightDiv) {\n      this.brushYRightDiv.call(this.brushYRight.move, null)\n      this.brushYRightDiv.remove()\n    }\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {line} from '@/d3Importer'\n\nexport default class Line extends ChartComponent {\n\n  constructor (opts) {\n    super()\n    // Do not register this component in chartComponentsArr,  As the series component is already registered and will call the line APIs\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      lineData: null,\n      yAxisTarget: null,\n      xAxisTarget: null,\n      visible: true\n    }, opts)\n\n    const self = this\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.line = line()\n\n    if (this.opts.yAxisTarget) {\n      // For normal series, yAxisTarget refers to the index of this series in data Arr\n      this.line\n        .defined(function (d) {\n          return d[self.opts.yAxisTarget] != null\n        })\n        .x(function (d) {\n          // xAxisTarget refers the index of date in data Arr\n          return x(d[self.opts.xAxisTarget])\n        })\n        .y(function (d) {\n          return y(d[self.opts.yAxisTarget])\n        })\n    }\n  }\n\n  draw () {\n    const self = this\n    this.lineTag = this.opts.chart.graphZone.selectAll('.vc-line-' + this.opts.className)\n      .data([this.opts.lineData])\n      .enter()\n      .append('g')\n      .attr('class', 'vc-line-plot vc-line-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    // Adding the lines series for data to be shown\n    this.lineTag.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-line')\n      .style('stroke', function (d) {\n        return d.color\n      })\n      .style('fill', 'transparent')\n      .style('stroke-width', function (d) {\n        return d.lineWidth || '2px'\n      })\n      .attr('d', function (d) {\n        return self.line(d.values) // Values are array of array having format like  [[date, series1, series2 ....],...]\n      })\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    this.lineTag && this.lineTag.select('path').attr('d', function (d) {\n      return self.line(d.values)\n    })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.lineTag && this.lineTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const seriesName = this.opts.lineData.name\n    // Remove line series\n    this.lineTag && this.lineTag.remove()\n\n    if (eachPlotSet && eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n      this.draw()\n    }\n\n  }\n  \n  remove () {\n    this.lineTag && this.lineTag.remove()\n    this.line = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {area, stack, stackOrderNone, stackOffsetNone} from '@/d3Importer'\nimport {getObject} from '@/utils'\n\nexport default class StackArea extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      xAxisTarget: '',\n      stackData: null,\n      stackOrderMembers: {},\n      visible: true\n    }, opts)\n\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Define in what order, Stack series needs to be ploted\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.opts.d3Stack = stack()\n\n    this.area = area()\n      .x(function (d, i) {\n        return x(d.data[self.opts.xAxisTarget])\n      })\n      .y0(function (d) {\n        return y(d[0]) // Indicates where to start along YAxis\n      })\n      .y1(function (d) {\n        return y(d[1]) // Indicates where to end along YAxis\n      })\n\n  }\n\n  draw () {\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    this.opts.d3Stack.keys(this.opts.stackOrderIndex) // specify the stack series names in array format\n    this.opts.d3Stack.order(stackOrderNone) // use the given series order.\n    this.opts.d3Stack.offset(stackOffsetNone) // apply a zero baseline on start\n\n    // Show stack plot for only series which are visible\n    const stackVisibleOrder = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n\n    this.stackLayer = this.opts.chart.graphZone.selectAll('.vc-stack-' + this.opts.className)\n      .data(this.opts.d3Stack(this.opts.stackData))\n      .enter()\n      .append('g')\n      .attr('class', 'vc-stack-plot vc-stack-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n\n    // PLot stackLayer based on each series visiblity\n    this.stackLayer.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return 'vc-stack vc-stack-' + stackMember.name\n      })\n      .style('fill', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return eachPlotSet[stackMember.name].color\n      })\n      .attr('d', this.area)\n\n  }\n  \n  // Update stackLayer based on chart resize\n  update () {\n    this.stackLayer && this.stackLayer.select('path').attr('d', this.area)\n  }\n  \n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify stackOrder arr based on visibleSeries\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all stack series\n    this.stackLayer && this.stackLayer.remove()\n    // draw with new stackOrderMembers\n    this.draw()\n  }\n  \n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.stackLayer.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n  \n  remove () {\n    //  this.stackAreaPath.remove();\n    this.stackLayer && this.stackLayer.remove()\n    this.opts.d3Stack = null\n    this.area = null\n    this.opts = null\n  }\n}","import {isArray} from '@/utils'\nimport Line from '@/series/Line'\nimport StackArea from '@/series/StackArea'\nimport Series from '@/series/Series'\n\nexport default class TimeSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.stack) && plotInfo.stack.forEach((plotData) => {\n      this.plotSeries.push(new StackArea({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        stackData: data,\n        stackOrderMembers: plotData.stackOrderMembers\n      }))\n    })\n\n    isArray(plotInfo.line) && plotInfo.line.forEach((plotData) => {\n      this.plotSeries.push(new Line({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        yAxisTarget: eachPlotSet[plotData.name].dataIndex,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        visible: eachPlotSet[plotData.name].visible,\n        lineData: {\n          name: plotData.name,\n          color: eachPlotSet[plotData.name].color,\n          lineWidth: eachPlotSet[plotData.name].lineWidth,\n          values: data\n        }\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultTSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport BasicTSParser from '@/data-parser/BasicTSParser'\nimport Tooltip from '@/tooltip/TimeSeriesTooltip'\nimport MouseHandler from '@/mouse-handler'\n// import Zoom from '@/zoom'\nimport Zoom from '@/zoom/PinchIndex'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\nimport TimeSeries from '@/series/TimeSeries'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicTSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Add default options to chart\n    addDefaultTSOptions(this.options)\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    const zoomOpts = getObject(this, 'options.zoom', {})\n    if ((tooltipOpts.visible || zoomOpts.visible)) {\n      this.mouseHandler = new MouseHandler({\n        chart: this,\n      })\n      this.chartComponentsArr.push(this.mouseHandler)\n    }\n\n    if (this.options.zoom.visible) {\n      this.zoomBrush = new Zoom({\n        chart: this,\n        onZoom: this.options.zoom.onXZoom,\n        onY1Zoom: this.options.zoom.onY1Zoom,\n        onY2Zoom: this.options.zoom.onY2Zoom\n      })\n      this.chartComponentsArr.push(this.zoomBrush)\n    }\n\n    if (this.options.series) {\n      this.series = new TimeSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      this.legends = new TimeSeriesLegend({\n        chart: this,\n        legendPrefix: this.options.legend.legendPrefix,\n        position: constants.DIR_TOP,\n        disableSeriesToggle: this.options.legend.disableSeriesToggle,\n        onLegendChange: this.options.legend.onLegendChange\n      })\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('TimeSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// import * as zoom from 'd3-zoom'\n\nexport {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport {zoom} from 'd3-zoom'\n\nexport default {\n  version: 'v5',\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n    const self = this\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}"],"sourceRoot":""}