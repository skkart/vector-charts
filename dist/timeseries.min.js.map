{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/../node_modules/babel-runtime/core-js/object/keys.js","webpack://vc/./axis/index.js","webpack://vc/./legend/TimeSeriesLegend.js","webpack://vc/../node_modules/core-js/library/fn/object/keys.js","webpack://vc/../node_modules/core-js/library/modules/es6.object.keys.js","webpack://vc/./data-parser/BasicTSParser.js","webpack://vc/./tooltip/TimeSeriesTooltip.js","webpack://vc/./mouse-handler/index.js","webpack://vc/./zoom/index.js","webpack://vc/./series/Line.js","webpack://vc/./series/StackArea.js","webpack://vc/./series/TimeSeries.js","webpack://vc/./charts/TimeSeriesChart.js"],"names":["Chart","container","opts","isString","isObject","length","dataParser","select","size","Error","containerName","containerBox","elementOffset","takeContainerWidth","chart","width","takeContainerHeight","height","maxWidth","minWidth","options","chartHeight","chartWidth","margin","chartType","left","right","top","bottom","chartFullSpace","chartComponentsArr","svg","append","html","attr","className","counter","graphZone","console","log","this","forEach","chartCmpt","ChartComponent","draw","update","showFlag","showHide","remove","chartResize","throttedResize","throttle","Math","floor","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","isTouchScreen","chartCounter","tooltip","visible","format","legend","legendPrefix","position","constants","DIR_TOP","isFunction","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","val","unit","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","xAxis","UNITS_TIME","tickFormatter","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","d","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","series","pie","percentage","total","DIR_RIGHT","Series","plotSeries","plotFn","redraw","module","exports","__esModule","Axis","orient","label","rangeScale","domainScale","scaleType","axisClamp","tickNumber","rotateText","textLimit","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","axis","scale","scaleBand","scaleLinear","scaleTime","DIR_BOTTOM","axisBottom","axisTop","tickSizeInner","tickValues","DIR_LEFT","axisLeft","axisRight","externalFormatter","self","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","text","classed","xTrans","yTrans","rotate","X_AXIS_LABEL_Y","BRUSHY_BUFFER","padding","clamp","range","domain","isNumber","tickVal","newTick","dayLength","minuteLength","ticks","call","limitText","tickFmt","emptyFn","selectAll","style","i","truncateText","TimeSeriesLegend","disableSeriesToggle","maxWidthLegend","spacingNames","eachPlotSet","eachPlotNames","leng","textWidth","maxLenLegend","dummyG","data","enter","each","thisWidth","round","getComputedTextLength","push","ele","maxTextLength","graphOptions","toggleSeries","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","seriesName","visibleSeries","plotName","applyYAxis","currentPlotInfo","constructYAxisInfo","modifyAxisProps","yRange","yAxis2","yRange2","reScaleYAxis","sFlag","onLegendChange","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER","Object","keys","toObject","$keys","it","BasicTSParser","dataOptions","constructChartData","constructXAxisInfo","constructPlotInfo","err","seriesData","timeseries","columns","values","validJSONType","firstTime","isDate","start","getDateFromEpoc","chartData","plotInfo","getObject","findEachPlotRange","max","minVal","maxVal","stack","plot","eachPlot","Infinity","plotData","valueRange","valData","memberArr","stackOrderMembers","sum","member","allMax","allMax2","allMin","allMin2","yMin","yMax","reduce","a","b","ind","timeStampIndex","dataColorArr","yLeft","yRight","refineName","refineString","isBoolean","barOrderMembers","ChartAxisParser","TimeSeriesTooltip","crossHairs","enable","toolTipDiv","TOOLTIP_TOP_BUFFER","mouseHandler","register","xScale","dateIndex","dataSet","bisectDate","bisector","eventName","mouseBrush","xMouse","d3Mouse","yMouse","xVal","invert","found","dBefore","dPrev","dFound","toolTipData","dataParseLen","visibleDataIndex","pl","multiArrMap","dSet","filter","index","sort","maxInd","mp","arrSet","dateIntRange","abs","hover","hide","xPos","yPos","displayData","percentageDiff","box","rootPos","MouseHandler","registerFn","callback","fun","Zoom","onZoom","onY1Zoom","onY2Zoom","yScaleLeft","yScaleRight","brushOverlay","brushX","extent","brushXDiv","d3Event","selection","d0","map","d1","move","brushYLeft","brushY","brushYLeftDiv","brushYRight","brushYRightDiv","Line","lineData","yAxisTarget","xAxisTarget","x","indexOf","y","line","defined","lineTag","clipElement","lineWidth","StackArea","stackData","stackOrderIndex","d3Stack","area","y0","y1","order","stackOrderNone","offset","stackOffsetNone","stackVisibleOrder","stackLayer","stackMember","TimeSeries","TimeSeriesChart","startTime","Date","dataExecutor","chartInitilize","axisOptions","tooltipOpts","Tooltip","zoomOpts","zoomBrush","onXZoom","legends","chartResponsive","triggerMouseAction","timeDiff","getTime","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","reScaleAxis","requiredWidth","class","maxText","tickHtml","String","Y_AXIS_SPACE"],"mappings":"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","file":"timeseries.min.js","sourcesContent":["export {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport default {\n  version: 'v5'\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getDateFromEpoc, getObject, refineString, isNumber, isDate, isBoolean} from '@/utils'\n\nexport default class BasicTSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while timeseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on timeseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    // Find seconds in unitArr to find the timeStampIndex\n    const timeStampIndex = 0\n    const firstTime = data[0][timeStampIndex]\n    if (!validJSONType || !(isNumber(firstTime) || isDate(firstTime))) {\n      throw new Error('Invalid Time series JSON received')\n    }\n\n    let start = 0\n    data.forEach(function (d) {\n      if (start > d[timeStampIndex]) {\n        throw new Error('Invalid Time series JSON received: Timestamp Values must be in ascending order')\n      }\n      start = d[timeStampIndex]\n      d[timeStampIndex] = getDateFromEpoc(d[timeStampIndex], true) // convert EPOC to date\n    })\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: [seriesData[0][dataIndex], seriesData[(seriesData.length - 1)][dataIndex]]\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let findEachPlotRange = false\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if ((yAxis && !yRange) || (yAxis2 && !yRange2)) {\n\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if ((plotInfo.stack && plotInfo.stack.length) || findEachPlotRange) {\n\n        if (findEachPlotRange) {\n          // Reset range for each plot for finding min , max\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            eachPlot.minVal = Infinity\n            eachPlot.maxVal = -Infinity\n          }\n        }\n\n        // Reset stack range for each stack for finding min , max\n        plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n          plotData.valueRange = [Infinity, -Infinity]\n        })\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          if (findEachPlotRange) {\n            for (const plot in eachPlotSet) {\n              const eachPlot = eachPlotSet[plot]\n              valData = d[eachPlot.dataIndex]\n              if (valData < eachPlot.minVal) {\n                eachPlot.minVal = valData\n              }\n              if (valData > eachPlot.maxVal) {\n                eachPlot.maxVal = valData\n              }\n            }\n          }\n\n          plotInfo.stack && plotInfo.stack.forEach(function (plotData) {\n            const memberArr = plotData.stackOrderMembers\n            let sum = 0\n            memberArr.forEach(function (member) {\n              sum += (eachPlotSet[member.name].visible ? d[eachPlotSet[member.name].dataIndex] : 0)\n            })\n\n            if (sum < plotData.valueRange[0]) {\n              plotData.valueRange[0] = sum\n            }\n            if (sum > plotData.valueRange[1]) {\n              plotData.valueRange[1] = sum\n            }\n          })\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'line') {\n          plotInfo[key].forEach(function (plotData) {\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'left' && eachPlotSet[plotData.name].maxVal > allMax) {\n              allMax = eachPlotSet[plotData.name].maxVal\n            }\n            if (eachPlotSet[plotData.name].visible && eachPlotSet[plotData.name].plotAxis[0] === 'right' && eachPlotSet[plotData.name].maxVal > allMax2) {\n              allMax2 = eachPlotSet[plotData.name].maxVal\n            }\n          })\n        } else if (key === 'stack') {\n          plotInfo[key].forEach(function (plotData) {\n            if (plotData.plotAxis[0] === 'left' && plotData.valueRange[1] > allMax) {\n              allMax = plotData.valueRange[1]\n            }\n            if (plotData.plotAxis[0] === 'right' && plotData.valueRange[1] > allMax2) {\n              allMax2 = plotData.valueRange[1]\n            }\n          })\n        }\n      }\n\n      // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.timeseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const timeStampIndex = dataOptions.timeInfo.dataIndex\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      if (timeStampIndex === ind) {\n        ind++\n        return\n      }\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'line') {\n        plotInfo[key].forEach(function (plotData) {\n          plotData.name = refineString(plotData.name)\n          const color = plotData.color // Apply color for each Plot series or pick from data color Arr\n          if (!color) {\n            throw `Color not present for series ${plotData.name}`\n          }\n          color && (eachPlotSet[plotData.name].color = color)\n          const plotAxis = plotData.plotAxis || ['left', 'bottom']\n          eachPlotSet[plotData.name].plotAxis = plotAxis\n          const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n          eachPlotSet[plotData.name].unit = unit\n          isBoolean(plotData.visible) && (eachPlotSet[plotData.name].visible = plotData.visible)\n        })\n      } else if (key === 'stack') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.stackOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      } else if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, getObject, isFunction} from '@/utils'\nimport {bisector, d3Mouse} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class TimeSeriesTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      crossHairs: {\n        enable: true\n      },\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.crossHairs = false\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n\n    if (this.opts.crossHairs.enable === true) {\n      this.crossHairs = this.opts.chart.svg\n        .append('g')\n        .attr('class', 'vc-tooltip-line')\n      this.crossHairs.append('line')\n        .attr('transform', 'translate(-999,-999)')\n        .attr('x1', this.opts.chart.margin.left)\n        .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n        .attr('x2', this.opts.chart.margin.left)\n        .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n\n    }\n\n    this.opts.chart.mouseHandler.register(() => {\n      // Register hover and hide/show toolip events\n      const self = this\n      const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n      const mouseHandler = this.opts.chart.mouseHandler\n      const dateIndex = this.opts.chart.options.timeInfo.dataIndex\n      const dataSet = this.opts.chart.options.chartData\n      // Find nearest existing date among array of sorted date\n      const bisectDate = bisector(function (d) {\n        return d[dateIndex]\n      }).left\n\n      const mouseEvt = function (d) {\n        // On mousemove of x overlay, find x,y values and update tooltip\n        const xMouse = d3Mouse(this)[0]\n        const yMouse = d3Mouse(this)[1]\n        const xVal = xScale.invert(xMouse) // find xAxis date for mouse position\n\n        // Do binary search of data set from 2nd data set to end\n        const found = bisectDate(dataSet, xVal, 1)\n\n          \n        const dBefore = dataSet[found - 2]\n\n          \n        const dPrev = dataSet[found - 1]\n        // get before find dataSet\n          \n        const dFound = dataSet[found] || dPrev // get find dataSet\n\n        let toolTipData = dPrev\n        if (dataSet.length > self.opts.chart.chartWidth) {\n          // More than one tick reside on each pixel. Hence find tick having max value among the dataset\n          const dataParseLen = Math.floor(dataSet.length / self.opts.chart.chartWidth) + 1\n\n          const visibleDataIndex = {}\n\n          for (const pl in self.opts.chart.options.plotSet) {\n            const plot = self.opts.chart.options.plotSet[pl]\n            if (plot.visible) {\n              visibleDataIndex[plot.dataIndex] = true\n            }\n          }\n\n          const multiArrMap = {}\n          // Do Scan from range -dataParseLen to +dataParseLen between found data index\n          for (let ind = (found - dataParseLen); ind < (found + dataParseLen); ind++) {\n            if (dataSet[ind]) {\n              const dSet = dataSet[ind].filter(function (val, index) {\n                return visibleDataIndex[index]\n              }).sort(function (a, b) {\n                return b - a\n              })\n              if (dSet.length) {\n                multiArrMap[ind] = dSet\n              }\n            }\n          }\n          let maxInd\n          let maxVal = -Infinity\n          for (const mp in multiArrMap) {\n            const arrSet = multiArrMap[mp]\n            if (maxVal < arrSet[0]) {\n              maxVal = arrSet[0]\n              maxInd = mp\n            }\n          }\n\n          toolTipData = dataSet[maxInd] || dFound\n        } else {\n          // Find nearest reaching date among above two dates\n          toolTipData = (xVal - dPrev[dateIndex]) > (dFound[dateIndex] - xVal) ? dFound : dPrev\n        }\n\n        let dateIntRange = dFound[dateIndex] - dPrev[dateIndex]\n\n        if (!dateIntRange && dBefore) {\n          dateIntRange = dPrev[dateIndex] - dBefore[dateIndex]\n        }\n\n        if (dateIntRange < Math.abs(dFound[dateIndex] - xVal)) {\n          // If found is outside data interval range, Then data doesnt exist for that tick.\n          toolTipData = []\n          toolTipData[dateIndex] = xVal\n        }\n\n        self.hover(xMouse, yMouse, toolTipData)\n      }\n\n      let eventName = 'mousemove'\n      if (this.opts.chart.options.chart.isTouchScreen) {\n        eventName = 'click'\n      }\n      mouseHandler.mouseBrush\n        .on(eventName, mouseEvt)\n        .on('mouseout', function () {\n          self.hide()\n        })\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n      mouseHandler.mouseBrush.select('rect.overlay')\n        .on('mousedown', function () {\n          self.hide()\n        })\n\n    })\n  }\n\n  hover (xPos, yPos, displayData) {\n    // Update displayPanel and line based on x position\n    this.crossHairs && this.crossHairs.select('line')\n      .attr('transform', `translate(${xPos},0)`)\n      .attr('x1', this.opts.chart.margin.left)\n      .attr('y1', this.opts.chart.margin.top - constants.TOOLTIP_TOP_BUFFER)\n      .attr('x2', this.opts.chart.margin.left)\n      .attr('y2', (this.opts.chart.chartHeight + this.opts.chart.margin.top))\n    this.showHide(true)\n\n    let percentageDiff = xPos / this.opts.chart.chartWidth\n\n    if (percentageDiff < 0.3) {\n      percentageDiff = 0.2\n    }\n    if (percentageDiff > 0.7) {\n      percentageDiff = 0.95\n    }\n\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    const left = Math.round(rootPos.left + this.opts.chart.margin.left + xPos - box.width * percentageDiff) + 'px'\n    const top = Math.round(rootPos.top - box.height - 5 + constants.TOOLTIP_TOP_BUFFER * 2) + 'px'\n\n\n    this.toolTipDiv\n      .style('left', left)\n      .style('top', top)\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n\n    this.crossHairs && this.crossHairs.classed('vc-hidden', !showFlag)\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.toolTipDiv && this.toolTipDiv.remove()\n    this.crossHairs && this.crossHairs.remove()\n    this.opts = null\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class MouseHandler extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.opts.registerFn = []\n  }\n\n  draw () {\n    this.mouseBrush = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-brushX')\n      .attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .attr('style', '-webkit-tap-highlight-color: rgba(0, 0, 0, 0)')\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n\n    if (this.opts.chart.options.chart.isTouchScreen) {\n      this.mouseBrush.attr('cursor', 'pointer')\n    }\n\n    if (!this.opts.chart.options.zoom.visible) {\n      // x-Zoom for chart doest not exist, Add rect overlay for brushXDiv\n      this.mouseBrush.append('rect')\n        .attr('class', 'overlay')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  update () {\n    this.mouseBrush.attr('width', this.opts.chart.chartWidth)\n      .attr('height', this.opts.chart.chartHeight)\n      .attr('transform', `translate(${this.opts.chart.margin.left},${this.opts.chart.margin.top})`)\n    if (!this.opts.chart.options.zoom.visible) {\n      this.mouseBrush.select('rect.overlay')\n        .attr('width', this.opts.chart.chartWidth)\n        .attr('height', this.opts.chart.chartHeight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.mouseBrush && this.mouseBrush.classed('vc-hidden', !showFlag)\n  }\n\n  register (callback) {\n    this.opts.registerFn.push(callback)\n  }\n\n  triggerMouseAction () {\n    this.opts.registerFn.forEach((fun) => {\n      fun.call(this)\n    })\n  }\n\n  remove () {\n    this.mouseBrush && this.mouseBrush.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {getObject, isFunction, emptyFn} from '@/utils'\nimport {brushX, brushY, d3Event} from '@/d3Importer'\nimport constants from '@/constants'\n\nexport default class Zoom extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      onZoom: emptyFn,\n      onY1Zoom: emptyFn,\n      onY2Zoom: emptyFn\n    }, opts)\n  }\n\n  draw () {\n    const self = this\n    const xScale = getObject(this.opts, 'chart.xAxis.scale') || false\n    const yScaleLeft = getObject(this.opts, 'chart.yAxis.scale') || false\n    const yScaleRight = getObject(this.opts, 'chart.yAxis2.scale') || false\n    let brushOverlay = null\n    if (xScale) {\n      // Create x axis brush for Zoom operation\n      this.brushX = brushX()\n        .extent([\n          [0, 0],\n          [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n        ])\n\n      // Use the same mouseBrush for both xBrush and tooltip\n      this.brushXDiv = this.opts.chart.mouseHandler.mouseBrush\n        .call(this.brushX)\n\n      brushOverlay = this.brushXDiv.selectAll('rect.overlay')\n\n      // Call this event when xAxis brush is ended\n      this.brushX.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n\n        const d0 = d3Event.selection.map(xScale.invert)\n        // find x1 and x2\n          \n        const d1 = d0 && d0.map(Math.round) // round both values\n\n        // clear Brush\n        self.brushXDiv.call(self.brushX.move, null)\n        brushOverlay.style('cursor', 'auto')\n\n        // d1 = d1\n        //   .sort(function (a, b) {\n        //     return (a - b)\n        //   })\n\n        self.opts.chart.xAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of X axis upon horizontal zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        self.opts && self.opts.onZoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical left scale operation\n    if (yScaleLeft) {\n      this.brushYLeft = brushY()\n\n      this.brushYLeftDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-left')\n\n      // Call this event when yAxis brush is ended\n      this.brushYLeft.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYLeftDiv.call(self.brushYLeft.move, null)\n\n        const d0 = d3Event.selection.map(yScaleLeft.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis.modifyAxisProps({\n          domainScale: d1 // Change domain of Y axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY1Zoom) && self.opts.onY1Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    // Create y axis brush for vertical right scale operation\n    if (yScaleRight) {\n      this.brushYRight = brushY()\n\n      this.brushYRightDiv = this.opts.chart.svg.append('g')\n        .attr('class', 'vc-brushY-right')\n\n      this.brushYRight.on('end', function () {\n        if (!d3Event.selection) {\n          return\n        }\n        self.brushYRightDiv.call(self.brushYRight.move, null)\n\n        const d0 = d3Event.selection.map(yScaleRight.invert)\n\n          \n        const d1 = d0 && d0.map(Math.round)\n          .sort(function (a, b) {\n            return (a - b)\n          })\n\n        self.opts.chart.yAxis2.modifyAxisProps({\n          domainScale: d1 // Change domain of Y2 axis upon vertical zoom\n        })\n\n        self.opts.chart.series.update() // Update all plotSeries for new YAxis domain change\n\n        // Used onZoom.call(), so that external function can have access of chart Instance\n        isFunction(self.opts.onY2Zoom) && self.opts.onY2Zoom.call(self.opts.chart, d1[0], d1[1])\n\n      })\n    }\n\n    brushOverlay && this.opts.chart.mouseHandler.register(function () {\n      // When mouse is clicked or down, enable zoom brush and its mouse cursor\n      brushOverlay\n        .on('mousedown', function () {\n          brushOverlay.style('cursor', 'col-resize')\n        })\n        .on('click', function () {\n          brushOverlay.style('cursor', 'auto')\n        })\n    })\n    this.update()\n\n  }\n\n  update () {\n    if (this.brushX) {\n      this.brushX.extent([\n        [0, 0],\n        [this.opts.chart.chartWidth, this.opts.chart.chartHeight]\n      ])\n\n      this.brushXDiv.call(this.brushX)\n    }\n\n    if (this.brushYLeft) {\n      this.brushYLeft\n        .extent([\n          [0, 0],\n          [(this.opts.chart.margin.left - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYLeftDiv\n        .attr('transform', 'translate(' + constants.BRUSHY_BUFFER + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYLeft)\n    }\n\n    if (this.brushYRight) {\n      this.brushYRight\n        .extent([\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth - constants.BRUSHY_BUFFER), 0],\n          [(this.opts.chart.margin.left + this.opts.chart.chartWidth + this.opts.chart.margin.right - constants.BRUSHY_BUFFER), this.opts.chart.chartHeight]\n        ])\n\n      this.brushYRightDiv\n        .attr('transform', 'translate(' + (constants.BRUSHY_BUFFER) + ',' + this.opts.chart.margin.top + ')')\n        .call(this.brushYRight)\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.brushXDiv && this.brushXDiv.classed('vc-hidden', !showFlag)\n    this.brushYLeftDiv && this.brushYLeftDiv.classed('vc-hidden', !showFlag)\n    this.brushYRightDiv && this.brushYRightDiv.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    if (this.brushXDiv) {\n      this.brushXDiv.call(this.brushX.move, null)\n      this.brushXDiv && this.brushXDiv.remove()\n    }\n    if (this.brushYLeftDiv) {\n      this.brushYLeftDiv.call(this.brushYLeft.move, null)\n      this.brushYLeftDiv.remove()\n    }\n    if (this.brushYRightDiv) {\n      this.brushYRightDiv.call(this.brushYRight.move, null)\n      this.brushYRightDiv.remove()\n    }\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {getObject} from '@/utils'\nimport {line} from '@/d3Importer'\n\nexport default class Line extends ChartComponent {\n\n  constructor (opts) {\n    super()\n    // Do not register this component in chartComponentsArr,  As the series component is already registered and will call the line APIs\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      lineData: null,\n      yAxisTarget: null,\n      xAxisTarget: null,\n      visible: true\n    }, opts)\n\n    const self = this\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.line = line()\n\n    if (this.opts.yAxisTarget) {\n      // For normal series, yAxisTarget refers to the index of this series in data Arr\n      this.line\n        .defined(function (d) {\n          return d[self.opts.yAxisTarget] != null\n        })\n        .x(function (d) {\n          // xAxisTarget refers the index of date in data Arr\n          return x(d[self.opts.xAxisTarget])\n        })\n        .y(function (d) {\n          return y(d[self.opts.yAxisTarget])\n        })\n    }\n  }\n\n  draw () {\n    const self = this\n    this.lineTag = this.opts.chart.graphZone.selectAll('.vc-line-' + this.opts.className)\n      .data([this.opts.lineData])\n      .enter()\n      .append('g')\n      .attr('class', 'vc-line-plot vc-line-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    // Adding the lines series for data to be shown\n    this.lineTag.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-line')\n      .style('stroke', function (d) {\n        return d.color\n      })\n      .style('fill', 'transparent')\n      .style('stroke-width', function (d) {\n        return d.lineWidth || '2px'\n      })\n      .attr('d', function (d) {\n        return self.line(d.values) // Values are array of array having format like  [[date, series1, series2 ....],...]\n      })\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    this.lineTag && this.lineTag.select('path').attr('d', function (d) {\n      return self.line(d.values)\n    })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.lineTag && this.lineTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const seriesName = this.opts.lineData.name\n    // Remove line series\n    this.lineTag && this.lineTag.remove()\n\n    if (eachPlotSet && eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n      this.draw()\n    }\n\n  }\n  \n  remove () {\n    this.lineTag && this.lineTag.remove()\n    this.line = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {area, stack, stackOrderNone, stackOffsetNone} from '@/d3Importer'\nimport {getObject} from '@/utils'\n\nexport default class StackArea extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      xAxisTarget: '',\n      stackData: null,\n      stackOrderMembers: {},\n      visible: true\n    }, opts)\n\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Define in what order, Stack series needs to be ploted\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.opts.d3Stack = stack()\n\n    this.area = area()\n      .x(function (d, i) {\n        return x(d.data[self.opts.xAxisTarget])\n      })\n      .y0(function (d) {\n        return y(d[0]) // Indicates where to start along YAxis\n      })\n      .y1(function (d) {\n        return y(d[1]) // Indicates where to end along YAxis\n      })\n\n  }\n\n  draw () {\n    const self = this\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    this.opts.d3Stack.keys(this.opts.stackOrderIndex) // specify the stack series names in array format\n    this.opts.d3Stack.order(stackOrderNone) // use the given series order.\n    this.opts.d3Stack.offset(stackOffsetNone) // apply a zero baseline on start\n\n    // Show stack plot for only series which are visible\n    const stackVisibleOrder = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n\n    this.stackLayer = this.opts.chart.graphZone.selectAll('.vc-stack-' + this.opts.className)\n      .data(this.opts.d3Stack(this.opts.stackData))\n      .enter()\n      .append('g')\n      .attr('class', 'vc-stack-plot vc-stack-' + this.opts.className)\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n\n    // PLot stackLayer based on each series visiblity\n    this.stackLayer.append('path')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return 'vc-stack vc-stack-' + stackMember.name\n      })\n      .style('fill', function (d) {\n        const stackMember = stackVisibleOrder[self.opts.stackOrderIndex.indexOf(d.key)] || {\n          name: ''\n        }\n        return eachPlotSet[stackMember.name].color\n      })\n      .attr('d', this.area)\n\n  }\n  \n  // Update stackLayer based on chart resize\n  update () {\n    this.stackLayer && this.stackLayer.select('path').attr('d', this.area)\n  }\n  \n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify stackOrder arr based on visibleSeries\n    this.opts.stackOrderIndex = this.opts.stackOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all stack series\n    this.stackLayer && this.stackLayer.remove()\n    // draw with new stackOrderMembers\n    this.draw()\n  }\n  \n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.stackLayer.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n  \n  remove () {\n    //  this.stackAreaPath.remove();\n    this.stackLayer && this.stackLayer.remove()\n    this.opts.d3Stack = null\n    this.area = null\n    this.opts = null\n  }\n}","import {isArray} from '@/utils'\nimport Line from '@/series/Line'\nimport StackArea from '@/series/StackArea'\nimport Series from '@/series/Series'\n\nexport default class TimeSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n    const eachPlotSet = this.opts.chart.options.plotSet\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.stack) && plotInfo.stack.forEach((plotData) => {\n      this.plotSeries.push(new StackArea({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        stackData: data,\n        stackOrderMembers: plotData.stackOrderMembers\n      }))\n    })\n\n    isArray(plotInfo.line) && plotInfo.line.forEach((plotData) => {\n      this.plotSeries.push(new Line({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        yAxisTarget: eachPlotSet[plotData.name].dataIndex,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        visible: eachPlotSet[plotData.name].visible,\n        lineData: {\n          name: plotData.name,\n          color: eachPlotSet[plotData.name].color,\n          lineWidth: eachPlotSet[plotData.name].lineWidth,\n          values: data\n        }\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultTSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport BasicTSParser from '@/data-parser/BasicTSParser'\nimport Tooltip from '@/tooltip/TimeSeriesTooltip'\nimport MouseHandler from '@/mouse-handler'\nimport Zoom from '@/zoom'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\nimport TimeSeries from '@/series/TimeSeries'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicTSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Add default options to chart\n    addDefaultTSOptions(this.options)\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    const zoomOpts = getObject(this, 'options.zoom', {})\n    if ((tooltipOpts.visible || zoomOpts.visible)) {\n      this.mouseHandler = new MouseHandler({\n        chart: this,\n      })\n      this.chartComponentsArr.push(this.mouseHandler)\n    }\n\n    if (this.options.zoom.visible) {\n      this.zoomBrush = new Zoom({\n        chart: this,\n        onZoom: this.options.zoom.onXZoom,\n        onY1Zoom: this.options.zoom.onY1Zoom,\n        onY2Zoom: this.options.zoom.onY2Zoom\n      })\n      this.chartComponentsArr.push(this.zoomBrush)\n    }\n\n    if (this.options.series) {\n      this.series = new TimeSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      this.legends = new TimeSeriesLegend({\n        chart: this,\n        legendPrefix: this.options.legend.legendPrefix,\n        position: constants.DIR_TOP,\n        disableSeriesToggle: this.options.legend.disableSeriesToggle,\n        onLegendChange: this.options.legend.onLegendChange\n      })\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('TimeSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n"],"sourceRoot":""}