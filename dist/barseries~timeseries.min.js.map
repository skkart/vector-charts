{"version":3,"sources":["webpack://vc/./d3Importer.js","webpack://vc/./axis/index.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./legend/TimeSeriesLegend.js","webpack://vc/./series/Series.js"],"names":["Axis","opts","className","position","orient","label","unit","rangeScale","domainScale","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","constants","TICK_PADDING","scalePadding","SCALE_PADDING","visible","axis","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","DIR_BOTTOM","axisBottom","DIR_TOP","axisTop","tickSizeInner","chart","chartHeight","tickValues","self","DIR_LEFT","axisLeft","DIR_RIGHT","axisRight","chartWidth","isFunction","externalFormatter","val","unshift","this","update","transformAttr","axisTag","graphZone","append","attr","tickFormat","axisLabelTag","text","classed","xTrans","yTrans","rotate","Math","floor","X_AXIS_LABEL_Y","margin","left","BRUSHY_BUFFER","right","length","padding","clamp","range","domain","isNumber","tickVal","newTick","dayLength","minuteLength","ticks","call","limitText","tickFmt","emptyFn","selectAll","style","d","i","truncateText","showFlag","remove","ChartComponent","Chart","container","isString","isObject","dataParser","select","size","Error","containerName","containerBox","elementOffset","takeContainerWidth","width","takeContainerHeight","height","maxWidth","minWidth","options","chartType","top","bottom","chartFullSpace","chartComponentsArr","svg","html","svgClass","isTouchScreen","counter","console","log","forEach","chartCmpt","draw","showHide","chartResize","throttedResize","throttle","setTimeout","chartId","id","window","on","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","chartCounter","tooltip","format","legend","legendPrefix","afterDraw","c","onComplete","time","onError","error","defaultValueFormat","decimals","denominator","kVal","getValueWithDecimals","mVal","addDefaultTSOptions","xAxis","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","min","zoom","formatTime","isArray","plotSet","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","color","name","addDefaultBSOptions","dataArr","addDefaultPSOptions","value","pieObj","series","pie","percentage","total","TimeSeriesLegend","disableSeriesToggle","maxWidthLegend","spacingNames","eachPlotSet","eachPlotNames","leng","textWidth","maxLenLegend","dummyG","data","enter","each","thisWidth","round","getComputedTextLength","push","ele","maxTextLength","graphOptions","toggleSeries","maxYLen","fullYLen","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","seriesName","visibleSeries","plotName","applyYAxis","currentPlotInfo","constructYAxisInfo","modifyAxisProps","yRange","yAxis2","yRange2","reScaleYAxis","redraw","sFlag","onLegendChange","legendDisplay","legendBlock","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","node","getBBox","legendText","basicWidth","legendPos","VERT_POS_LEGEND","LEGEND_MAX_WIDTH","legendXPos","xBuff","legendYPos","d3Svg","DATA_INTERVAL_BUFFER_X","LEGEND_RIGHT_BUFFER","Series","plotSeries","plotFn"],"mappings":"4FAAA,ovC,iKCQqBA,E,YACnB,WAAaC,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxBC,UAAW,GACXC,SAAU,IACVC,OAAQ,OACRC,MAAO,GACPC,KAAM,GACNC,WAAY,CAAC,EAAG,KAChBC,YAAa,CAAC,EAAG,KACjBC,UAAW,GACXC,WAAW,EACXC,WAAY,KACZC,YAAY,EACZC,UAAW,EACXC,eAAe,EACfC,eAAe,EACfC,YAAaC,IAAUC,aACvBC,aAAcF,IAAUG,cACxBC,SAAS,GACRpB,GAEH,EAAKqB,KAAO,KAEgB,cAAxB,EAAKrB,KAAKQ,UACZ,EAAKc,MAAQC,eAEb,EAAKD,MAAQE,cACT,EAAKxB,KAAKK,OAASW,IAAUS,aAC/B,EAAKH,MAAQI,gBAIU,MAAvB,EAAK1B,KAAKE,WACR,EAAKF,KAAKG,SAAWa,IAAUW,WACjC,EAAKN,KAAOO,cACH,EAAK5B,KAAKG,SAAWa,IAAUa,UACxC,EAAKR,KAAOS,gBAEkB,IAA5B,EAAK9B,KAAKc,eACZ,EAAKO,KAAKU,eAAgB,EAAK/B,KAAKgC,MAAMC,cAM9C,EAAKC,WAAa,GAClB,IAAMC,EAAOA,EAEb,GAA2B,MAAvB,EAAKnC,KAAKE,WACR,EAAKF,KAAKG,SAAWa,IAAUoB,SACjC,EAAKf,KAAOgB,cACH,EAAKrC,KAAKG,SAAWa,IAAUsB,YACxC,EAAKjB,KAAOkB,cACZ,EAAKlB,KAAKU,cAAc,KAEM,IAA5B,EAAK/B,KAAKc,eACZ,EAAKO,KAAKU,eAAgB,EAAK/B,KAAKgC,MAAMQ,YAGxCC,YAAW,EAAKzC,KAAKa,gBAAgB,CAEvC,IAAM6B,EAAoB,EAAK1C,KAAKa,cACpC,EAAKb,KAAKa,cAAgB,SAAU8B,GAElC,OADAR,EAAKD,WAAWU,QAAQD,GACjBD,EAAkBC,IAjEd,OAsEb,EAAK3C,KAAKe,YAAc,GAC1B,EAAKM,KAAKN,YAAY,EAAKf,KAAKe,aAvEjB,E,+DA2ES,IAAXf,EAAW,uDAAJ,GACtB,IAAc6C,KAAK7C,KAAMA,GACzB6C,KAAKC,W,6BAILD,KAAKE,cAAgB,KAEjBF,KAAK7C,KAAKG,SAAWa,IAAUW,WACjCkB,KAAKE,cAAL,eAAoCF,KAAK7C,KAAKgC,MAAMC,YAApD,IACSY,KAAK7C,KAAKG,SAAWa,IAAUsB,YACxCO,KAAKE,cAAL,aAAkCF,KAAK7C,KAAKgC,MAAMQ,WAAlD,OAGFK,KAAKG,QAAUH,KAAK7C,KAAKgC,MAAMiB,UAAUC,OAAO,KAC7CC,KAAK,QADO,mBACqBN,KAAK7C,KAAKG,OAD/B,YACiD0C,KAAK7C,KAAKC,WAI1EwC,YAAWI,KAAK7C,KAAKa,gBAAkBgC,KAAKxB,KAAK+B,WAAWP,KAAK7C,KAAKa,eAGlEgC,KAAK7C,KAAKI,QACZyC,KAAK7C,KAAKqD,aAAeR,KAAKG,QAAQE,OAAO,QAC1CC,KAAK,QAAS,iBACdG,KAAKT,KAAK7C,KAAKI,QAGpByC,KAAKC,UAGJD,KAAK7C,KAAKoB,SAAWyB,KAAKG,QAAQO,QAAQ,aAAa,K,+BAexD,GAVIV,KAAK7C,KAAKG,SAAWa,IAAUW,aACjCkB,KAAK7C,KAAKM,WAAa,CAAC,EAAGuC,KAAK7C,KAAKgC,MAAMQ,aAGzCK,KAAK7C,KAAKG,SAAWa,IAAUsB,YACjCO,KAAKE,cAAL,aAAkCF,KAAK7C,KAAKgC,MAAMQ,WAAlD,OAKEK,KAAK7C,KAAKI,MAAO,CACnB,IAAIoD,EAAS,EACTC,EAAS,EACTC,EAAS,EACTb,KAAK7C,KAAKG,SAAWa,IAAUW,YACjC6B,EAASG,KAAKC,MAAMf,KAAK7C,KAAKgC,MAAMQ,WAAa,GACjDiB,EAASzC,IAAU6C,gBACVhB,KAAK7C,KAAKG,SAAWa,IAAUoB,UAAYS,KAAK7C,KAAKG,SAAWa,IAAUsB,YAC/EO,KAAK7C,KAAKG,SAAWa,IAAUoB,UACjCoB,GAAWX,KAAK7C,KAAKgC,MAAM8B,OAAOC,KAAQ/C,IAAUgD,cACpDN,EAAS,MAETF,EAASX,KAAK7C,KAAKgC,MAAM8B,OAAOG,MAAQjD,IAAUgD,cAClDN,EAAS,IAEXD,EAASE,KAAKC,MAAMf,KAAK7C,KAAKgC,MAAMC,YAAc,IAEpDY,KAAK7C,KAAKqD,aACPF,KAAK,YADR,aAEiBK,EAFjB,IAE2BC,EAF3B,YAE6CC,EAF7C,KAKFb,KAAKX,WAAa,GAElB,IAAI3B,EAAc,CAACsC,KAAK7C,KAAKO,YAAY,GAAIsC,KAAK7C,KAAKO,YAAYsC,KAAK7C,KAAKO,YAAY2D,OAAS,IAclG,GAb4B,cAAxBrB,KAAK7C,KAAKQ,WACZD,EAAcsC,KAAK7C,KAAKO,YACxBsC,KAAKvB,MACF6C,QAAQtB,KAAK7C,KAAKkB,eAErB2B,KAAK7C,KAAKS,WAAaoC,KAAKvB,MAAM8C,QAGpCvB,KAAKvB,MAAM+C,MAAMxB,KAAK7C,KAAKM,YACxBgE,OAAO/D,GAEVsC,KAAKxB,KAAKC,MAAMuB,KAAKvB,OAEjBiD,YAAS1B,KAAK7C,KAAKU,YAAa,CAClC,IAAI8D,EAAU3B,KAAK7C,KAAKU,WACxB,GAA2B,MAAvBmC,KAAK7C,KAAKE,UAAoB2C,KAAK7C,KAAKK,OAASW,IAAUS,WAAY,CAEzE,IAAMgD,EAAUd,KAAKC,MAAMf,KAAK7C,KAAKgC,MAAMQ,WAAa,IAClDkC,EAAYf,KAAKC,OAAOf,KAAK7C,KAAKO,YAAY,GAAKsC,KAAK7C,KAAKO,YAAY,IAAlD,OAAiF,EAC1GmE,EAAY,GAAKA,EAAYF,IAC/BA,EAAUE,GAGZ,IAAMC,EAAehB,KAAKC,OAAOf,KAAK7C,KAAKO,YAAY,GAAKsC,KAAK7C,KAAKO,YAAY,IAAlD,KAC5BoE,EAAeH,IACjBA,EAAUG,GAGRF,EAAUD,IACZA,EAAUC,GAId5B,KAAKxB,KAAKuD,MAAMJ,QACP/B,YAAWI,KAAK7C,KAAKU,aAC9BmC,KAAKxB,KAAKuD,MAAM/B,KAAK7C,KAAKU,cAG5BmC,KAAKE,eAAiBF,KAAKG,QAAQG,KAAK,YAAaN,KAAKE,eAEtDF,KAAK7C,KAAKc,eAAwC,MAAvB+B,KAAK7C,KAAKE,UACvC2C,KAAKxB,KAAKU,eAAgBc,KAAK7C,KAAKgC,MAAMQ,YAG5CK,KAAKG,QAAQ6B,KAAKhC,KAAKxB,MAGvB,IAAMyD,EAAYjC,KAAK7C,KAAKY,UACtBmE,EAAUtC,YAAWI,KAAK7C,KAAKa,eAAiBgC,KAAK7C,KAAKa,cAAgBmE,IAEnD,UAAzBnC,KAAK7C,KAAKW,WACZkC,KAAKG,QACFiC,UAAU,QACVC,MAAM,cAAe,OACrB/B,KAAK,IAAK,KACVA,KAAK,KAAM,UACXA,KAAK,KAAM,SACXA,KAAK,YAAa,eAClBG,MAAK,SAAU6B,EAAGC,GACjB,OAAOC,YAAaN,EAAQI,GAAIL,MAEF,aAAzBjC,KAAK7C,KAAKW,YACnBkC,KAAKG,QACFiC,UAAU,QACV9B,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,KAAM,SACXA,KAAK,YAAa,cAClB+B,MAAM,cAAe,SACrB5B,MAAK,SAAU6B,EAAGC,GACjB,OAAOC,YAAaN,EAAQI,GAAIL,Q,+BAK9BQ,GACRA,IAAaA,EACbzC,KAAKG,SAAWH,KAAKG,QAAQO,QAAQ,aAAc+B,GACnDzC,KAAK7C,KAAKqD,cAAgBR,KAAK7C,KAAKqD,aAAaE,QAAQ,aAAc+B,GACvEzC,KAAK7C,KAAKoB,QAAUkE,I,+BAKpBzC,KAAK7C,KAAKqD,cAAgBR,KAAK7C,KAAKqD,aAAakC,SACjD1C,KAAKG,SAAWH,KAAKG,QAAQuC,SAC7B1C,KAAKvB,MAAQ,KACbuB,KAAKxB,KAAO,KACZwB,KAAK7C,KAAO,S,GA3OkBwF,KAAbzF,O,2JCJA0F,E,YACnB,WAAaC,EAAW1F,GAAM,6DAE5B,GAAI2F,YAASD,IAAcE,YAAS5F,IAAS0F,EAAUxB,QAAU0B,YAAS5F,EAAK6F,YAAa,CAE1F,GADA,EAAKH,UAAYI,YAAOJ,IACnB,EAAKA,UAAUK,OAClB,MAAM,IAAIC,MAAM,iFAElBhG,EAAKiG,cAAgBP,EAErB,IAAMQ,EAAeC,YAAc,EAAKT,WAEpCU,GAAqB,EACpB,IAAgBpG,EAAKgC,MAAMqE,SAC9BrG,EAAKgC,MAAMqE,MAAQH,EAAaG,MAChCD,GAAqB,GAGvB,IAAIE,GAAsB,EACrB,IAAgBtG,EAAKgC,MAAMuE,UAC9BvG,EAAKgC,MAAMuE,OAASL,EAAaK,OACjCD,GAAsB,GAGpBtG,EAAKgC,MAAMqE,MAAQrG,EAAKgC,MAAMwE,WAChCxG,EAAKgC,MAAMqE,MAAQrG,EAAKgC,MAAMwE,UAG5BxG,EAAKgC,MAAMqE,MAAQrG,EAAKgC,MAAMyE,WAChCzG,EAAKgC,MAAMqE,MAAQrG,EAAKgC,MAAMyE,UAGhC,EAAKC,QAAU1G,EAEf,EAAKiC,YAAcjC,EAAKgC,MAAMuE,OAC9B,EAAK/D,WAAaxC,EAAKgC,MAAMqE,MAC7B,EAAKvC,OAAS9D,EAAKgC,MAAM8B,OACzB,EAAK6C,UAAY3G,EAAKgC,MAAM2E,UAExBP,IACF,EAAK5D,WAAa,EAAKA,YAAc,EAAKsB,OAAOC,KAAO,EAAKD,OAAOG,QAGlEqC,IACF,EAAKrE,YAAc,EAAKA,aAAe,EAAK6B,OAAO8C,IAAM,EAAK9C,OAAO+C,SAIvE,EAAKhB,WAAa7F,EAAK6F,kBAGhB,EAAKa,QAAQb,WAEpB,EAAKiB,eAAiB,CACpBT,MAAO,EAAK7D,WAAa,EAAKsB,OAAOC,KAAO,EAAKD,OAAOG,MACxDsC,OAAQ,EAAKtE,YAAc,EAAK6B,OAAO8C,IAAM,EAAK9C,OAAO+C,QAK3D,EAAKE,mBAAqB,GAE1B,EAAKC,IAAM,EAAKtB,UAAUI,OAAO,OAET,IAApB,EAAKkB,IAAIjB,SAEX,EAAKiB,IAAM,EAAKtB,UAAUxC,OAAO,QAInC,EAAK8D,IAAIC,KAAK,IAEd,IAAIC,EAAW,UAAYlH,EAAKgC,MAAM/B,UAClC,EAAKyG,QAAQ1E,MAAMmF,gBACrBD,GAAY,gBAEd,EAAKF,IACF7D,KAAK,QAAS,EAAK2D,eAAeT,OAClClD,KAAK,SAAU,EAAK2D,eAAeP,QACnCpD,KAAK,QAAS+D,GAIjB,EAAKF,IAAI9D,OAAO,QACbA,OAAO,YACPC,KAAK,KAFR,cAE4B,EAAKuD,QAAQ1E,MAAMoF,SAC5ClE,OAAO,QACPC,KAAK,QAAS,EAAKX,YACnBW,KAAK,SAAU,EAAKlB,aAGvB,EAAKgB,UAAY,EAAK+D,IAAI9D,OAAO,KAC9BC,KAAK,YAAa,aAAe,EAAKW,OAAOC,KAAO,IAAM,EAAKD,OAAO8C,IAAM,KAC5EzD,KAAK,QAAS,gBA5FS,S,oDAiG5BkE,QAAQC,IAAI,aAAczE,MAE1BA,KAAKkE,mBAAmBQ,SAAQ,SAAUC,GACpCA,aAAqBhC,KACvBgC,EAAUC,Y,+BAMd5E,KAAKmE,IAAI7D,KAAK,QAASN,KAAKiE,eAAeT,OAC3CxD,KAAKI,UAAUE,KAAK,YAAa,aAAeN,KAAKiB,OAAOC,KAAO,IAAMlB,KAAKiB,OAAO8C,IAAM,KAC3F/D,KAAKmE,IAAIlB,OAAO,YAAYA,OAAO,QAAQ3C,KAAK,QAASN,KAAKL,YAE9D6E,QAAQC,IAAI,eAAgBzE,MAE5BA,KAAKkE,mBAAmBQ,SAAQ,SAAUC,GACpCA,aAAqBhC,KACvBgC,EAAU1E,c,+BAKNwC,GACR+B,QAAQC,IAAI,iBAAkBzE,MAC9ByC,IAAaA,EACbzC,KAAKkE,mBAAmBQ,SAAQ,SAAUC,GACpCA,aAAqBhC,KACvBgC,EAAUE,SAASpC,Q,+BAMvB+B,QAAQC,IAAI,eAAgBzE,MAC5BA,KAAKkE,mBAAmBQ,SAAQ,SAAUC,GACpCA,aAAqBhC,KACvBgC,EAAUjC,c,wCAMG,WACjB,GAAI1C,KAAK6D,QAAQ1E,MAAM2F,YAAa,CAClC9E,KAAK+E,eAAiBC,aAAS,SAACxB,EAAOE,GACjCF,IAAU,EAAKS,eAAeT,QAGlC,EAAKS,eAAeT,MAAQ1C,KAAKC,MAAMyC,GACvC,EAAKS,eAAeP,OAAS5C,KAAKC,MAAM2C,GACxC,EAAK/D,WAAa,EAAKsE,eAAeT,OAAS,EAAKvC,OAAOC,KAAO,EAAKD,OAAOG,OAC9E,EAAKhC,YAAc,EAAK6E,eAAeP,QAAU,EAAKzC,OAAO8C,IAAM,EAAK9C,OAAO+C,QAC/EiB,YAAW,kBAAM,EAAKhF,WAAU,MAC/B,KAGH,IAAMiF,EAAU,OAASlF,KAAK6D,QAAQ1E,MAAMgG,IAAMnF,KAAK6D,QAAQ1E,MAAMoF,SACrEtB,YAAOmC,QAAQC,GAAG,UAAYH,GAAS,kBAAM,EAAKI,sB,sCAMpD,IAAMjC,EAAeC,YAActD,KAAK6C,WACpC0C,EAAoBlC,EAAaG,MAEjC+B,EAAoBvF,KAAK6D,QAAQ1E,MAAMwE,WACzC4B,EAAoBvF,KAAK6D,QAAQ1E,MAAMwE,UAGrC4B,EAAoBvF,KAAK6D,QAAQ1E,MAAMyE,WACzC2B,EAAoBvF,KAAK6D,QAAQ1E,MAAMyE,UAGzC5D,KAAK+E,eAAeQ,EAAmBlC,EAAaK,U,8BAI7C8B,GAGP,GAFAA,IAAgBA,EAEZxF,KAAK6D,QAAQ1E,MAAM2F,YAAa,CAClC,IAAMI,EAAU,OAASlF,KAAK6D,QAAQ1E,MAAMgG,IAAMnF,KAAK6D,QAAQ1E,MAAMoF,SACrEtB,YAAOmC,QAAQC,GAAG,UAAYH,EAAS,MAUzC,OANAlF,KAAK0C,SAGL8C,GAAexF,KAAKmE,IAAIzB,SACxB8C,GAAexF,KAAK6C,UAAUH,SAEvB,S,GAhMwBC,KAAdC,O,iMCAd,SAAS6C,EAAwBtI,GAwCtC,OAtCAA,EAAKgC,MAAQ,IAAc,CACzB2F,aAAa,EACbR,eAAe,EACflH,UAAW,GACXuG,aACAC,SAAU,GACTzG,EAAKgC,OACRhC,EAAKgC,MAAMoF,QAAUmB,cAErBvI,EAAKwI,QAAU,IAAc,CAC3BpH,SAAS,EACTqH,QAAQ,GACNzI,EAAKwI,SAAW,IAEpBxI,EAAK0I,OAAS,IAAc,CAC1BtH,SAAS,EACTuH,aAAc,GACdzI,SAAUc,IAAUa,SAClB7B,EAAK0I,QAAU,IAEdjG,YAAWzC,EAAK4I,aACnB5I,EAAK4I,UAAY,SAAUC,GACzB,OAAOA,IAINpG,YAAWzC,EAAK8I,cACnB9I,EAAK8I,WAAa,SAAUC,GAC1B1B,QAAQC,IAAR,oBAAgCtH,EAAKiG,cAArC,oBAAsE8C,EAAtE,SAICtG,YAAWzC,EAAKgJ,WACnBhJ,EAAKgJ,QAAU,SAAUC,GACvB5B,QAAQC,IAAR,kCAA8CtH,EAAKiG,cAAnD,IAAqEgD,KAIlEjJ,EAGF,SAASkJ,EAAoBvG,GAA8B,IAAzBtC,EAAyB,uDAAlB,GAAI8I,EAAc,uDAAH,EACvDC,EAAc,IACpB,GAAIzG,EAAMyG,EAAa,CACrB,IAAMC,EAAOC,YAAqB3G,EAAMyG,EAAaD,GACrD,GAAIE,EAAOD,EAAa,CACtB,IAAMG,EAAOD,YAAqBD,EAAOD,EAAaD,GACtD,OAAUI,EAAV,KAAmBlJ,EAErB,OAAUgJ,EAAV,KAAmBhJ,EAErB,OAAUiJ,YAAqB3G,EAAKwG,GAApC,IAAiD9I,EAI5C,SAASmJ,EAAqBxJ,GASnC,GAPAA,EAAKyJ,MAAQ,IAAc,CACzB5C,OAAQ,CACNxG,KAAMW,IAAUS,WAChBL,SAAS,IAETpB,EAAKyJ,OAAS,KAEbhH,YAAWzC,EAAKyJ,MAAM5C,OAAOhG,eAAgB,CAChD,IAAM6I,EAAW1J,EAAK0J,SAEhBC,EAAUD,EAASE,UAAU1F,OAG7B2F,EAFWH,EAASE,UAAUD,EAAU,GAAKD,EAASE,UAAU,GAE1C5I,IAAU8I,mBAAsBC,YAAW,SAAWA,YAAW,YAC7F/J,EAAKyJ,MAAM5C,OAAOhG,cAAgB,SAACmJ,GACjC,OAAOH,EAAQG,IAqCnB,GAhCKhK,EAAKiK,QACRjK,EAAKiK,MAAQ,CACXlG,KAAM,KAIN/D,EAAKiK,MAAMlG,OACb/D,EAAKiK,MAAMlG,KAAO,IAAc,CAC9B1D,KAAMW,IAAUkJ,UAChBC,IAAK,EACL/I,SAAS,GACRpB,EAAKiK,MAAMlG,OAGZ/D,EAAKiK,MAAMhG,QACbjE,EAAKiK,MAAMhG,MAAQ,IAAc,CAC/B5D,KAAMW,IAAUkJ,UAChBC,IAAK,EACL/I,SAAS,GACRpB,EAAKiK,MAAMhG,QAGhBjE,EAAKoK,KAAO,IAAc,CACxBhJ,SAAS,GACPpB,EAAKoK,MAAQ,IAGjBpK,EAAKwI,QAAU,IAAc,CAC3BpH,SAAS,EACTqH,QAAQ,GACNzI,EAAKwI,SAAW,KAEf/F,YAAWzC,EAAKwI,QAAQC,QAAS,CACpC,IAAM4B,EAAaN,YAAW,sBAC9B/J,EAAKwI,QAAQC,OAAS,SAAUtD,GAC9B,IAAKA,IAAMmF,YAAQnF,GACjB,MAAO,GAET,IAAMoF,EAAU1H,KAAK6D,QAAQ6D,QACvBb,EAAW7G,KAAK6D,QAAQgD,SACxBc,EAAa3H,KAAK6D,QAAQ+C,MAAMe,YAAc,GAC9CP,EAAQpH,KAAK6D,QAAQuD,MAEvBQ,EAAWA,oFAEPJ,EAAWlF,EAAEuE,EAASgB,YAF1B,IAEyCF,EAFzC,2BAKJ,IAAK,IAAMG,KAAOJ,EAAS,CACzB,IAAM5H,EAAMwC,EAAEoF,EAAQI,GAAKD,WAC3B,GAAKH,EAAQI,GAAKvJ,UAAWwJ,MAAMjI,GAAnC,CAKA,IACM8F,EADUwB,EAAMM,EAAQI,GAAKE,SAAS,IACrBpC,QAAUS,EAEjCuB,iFAEoCF,EAAQI,GAAKG,MAFjD,YAEkEP,EAAQI,GAAKI,KAF/E,4DAKMtC,EAAO9F,EAAK4H,EAAQI,GAAKtK,MAL/B,kCAYF,OAFAoK,GAAY,oBAQhB,OAFAnC,EAAuBtI,GAEhBA,EAGF,SAASgL,EAAqBhL,GA0FnC,OAxFAA,EAAKyJ,MAAQ,IAAc,CACzB5C,OAAQ,CACNxG,KAAMW,IAAUkJ,UAChB9I,SAAS,IAETpB,EAAKyJ,OAAS,IAIbzJ,EAAKiK,QACRjK,EAAKiK,MAAQ,CACXlG,KAAM,KAIN/D,EAAKiK,MAAMlG,OACb/D,EAAKiK,MAAMlG,KAAO,IAAc,CAC9B1D,KAAMW,IAAUkJ,UAChBC,IAAK,EACL/I,SAAS,GACRpB,EAAKiK,MAAMlG,OAGZ/D,EAAKiK,MAAMhG,QACbjE,EAAKiK,MAAMhG,MAAQ,IAAc,CAC/B5D,KAAMW,IAAUkJ,UAChBC,IAAK,EACL/I,SAAS,GACRpB,EAAKiK,MAAMhG,QAGhBjE,EAAKoK,KAAO,IAAc,CACxBhJ,SAAS,GACPpB,EAAKoK,MAAQ,IAIjBpK,EAAKwI,QAAU,IAAc,CAC3BpH,SAAS,EACTqH,QAAQ,GACNzI,EAAKwI,SAAW,IAEf/F,YAAWzC,EAAKwI,QAAQC,UAC3BzI,EAAKwI,QAAQC,OAAS,SAAUtD,GAC9B,IAAI8F,EAAU9F,EAId,GAHIA,GAAKA,EAAExC,MACTsI,EAAU9F,EAAExC,MAET2H,YAAQW,GACX,MAAO,GAET,IAAMV,EAAU1H,KAAK6D,QAAQ6D,QACvBb,EAAW7G,KAAK6D,QAAQgD,SACxBO,EAAQpH,KAAK6D,QAAQuD,MAEvBQ,EAAWA,oFAEPQ,EAAQvB,EAASgB,WAFrB,2BAKJ,IAAK,IAAMC,KAAOJ,EAAS,CACzB,IAAM5H,EAAMsI,EAAQV,EAAQI,GAAKD,WACjC,GAAKH,EAAQI,GAAKvJ,UAAWwJ,MAAMjI,GAAnC,CAKA,IACM8F,EADUwB,EAAMM,EAAQI,GAAKE,SAAS,IACrBpC,QAAUS,EAEjCuB,iFAEoCF,EAAQI,GAAKG,MAFjD,qEAKMrC,EAAO9F,EAAK4H,EAAQI,GAAKtK,MAL/B,kCAYF,OAFAoK,GAAY,qBAMhBnC,EAAuBtI,GAEhBA,EAGF,SAASkL,EAAqBlL,GAmCnC,OAhCAA,EAAKwI,QAAU,IAAc,CAC3BpH,SAAS,EACTqH,QAAQ,GACNzI,EAAKwI,SAAW,IAEf/F,YAAWzC,EAAKwI,QAAQC,UAC3BzI,EAAKwI,QAAQC,OAAS,SAAUtD,GAC9B,IAAKA,IAAMA,EAAEgG,MACX,MAAO,GAET,IAAMC,EAASvI,KAAK6D,QAAQ2E,OAAOC,IAC7B7C,EAAS2C,EAAO3C,QAAUS,EAC1BqC,EAAajC,YAAsBnE,EAAEgG,MAAQC,EAAOI,MAAS,IAAK,GAExE,gJAGyDrG,EAAE2F,MAH3D,YAG4E3F,EAAE4F,KAH9E,0CAI4BQ,EAJ5B,iGAOwC9C,EAAOtD,EAAEgG,MAAOC,EAAO/K,MAP/D,+EAcJiI,EAAuBtI,GAEvBA,EAAK0I,OAAOxI,SAAWc,IAAUsB,UAE1BtC,I,kLC7RYyL,E,YACnB,WAAazL,GAAM,6DAEjB,EAAKA,KAAO,IAAc,CACxB0L,qBAAqB,GACpB1L,GAEH,IAAMmC,EAAOA,EACb,EAAKnC,KAAK2L,eAAiB,EAC3B,EAAK3L,KAAK4L,aAAe,GAGzB,IACMC,EADe,EAAK7L,KAAKgC,MAAM0E,QACJ6D,QAC3BuB,EAAgB,IAAYD,GAC9BE,EAAO,EACLC,EAAY,GACdC,SAEEC,EAAS,EAAKlM,KAAKgC,MAAMgF,IAAI9D,OAAO,KAlBzB,OAoBjBgJ,EAAOjH,UAAU,cACdkH,KAAKL,GACLM,QACAlJ,OAAO,QACPC,KAAK,QAAS,mBACd+B,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrB5B,MAAK,SAAU6B,GACd,OAAQhD,EAAKnC,KAAK2I,cAAgBkD,EAAY1G,GAAK0G,EAAY1G,GAAG4F,KAAO,OAE1EsB,MAAK,SAAUlH,EAAGC,GAEjB,IAAMkH,EAAY3I,KAAK4I,MAAM1J,KAAK2J,yBAC9BF,EAAYnK,EAAKnC,KAAK2L,iBACxBxJ,EAAKnC,KAAK2L,eAAiBW,EAC3BL,EAAe9G,GAEjB6G,EAAUS,KAAKH,MAInBN,EAAUzE,SAAQ,SAAUmF,GAC1BX,GAAQW,EACRvK,EAAKnC,KAAK4L,aAAaa,KAAKV,MAI9B,EAAK/L,KAAK2M,cAAgBV,EAAa/H,OAAS,IAEhDgI,EAAO3G,SAjDU,E,oDAsDjB,IAAMpD,EAAOU,KACP+J,EAAe/J,KAAK7C,KAAKgC,MAAM0E,QACjCmG,EAAe7H,IACb6G,EAAce,EAAarC,QAC3BuB,EAAgB,IAAYD,GAC5BiB,EAAUnJ,KAAKC,MAA8C,GAAxCf,KAAK7C,KAAKgC,MAAM8E,eAAeP,OAAc,KACpEwG,EAAWjB,EAAc5H,OAASlD,IAAUgM,eAChDD,EAAWA,EAAWD,EAAUA,EAAUC,EAC1C,IAAME,EAAWpK,KAAK7C,KAAK2L,eAAiB3K,IAAUkM,kBAEtDrK,KAAK7C,KAAKmN,UAAY,CACpB9G,MAAO4G,EACP1G,OAAQwG,GAKLlK,KAAK7C,KAAK0L,sBAEbmB,EAAe,SAAUO,GACvB,IAAIC,EAAgB,EAChBC,SAEJ,GAAIzB,EAAYuB,IAAevB,EAAYuB,GAAYhM,QAAS,CAE9D,IAAKkM,KAAYzB,EACfA,EAAYyB,GAAUlM,SAAWiM,IAGnC,GAAIA,GAAiB,EACnB,OAIJ,IAAIE,SAGAC,SAOJ,GALI3B,GAAeA,EAAYuB,KAC7BI,EAAkB3B,GAIhB2B,EAAiB,CAEnBA,EAAgBJ,GAAYhM,SAAWoM,EAAgBJ,GAAYhM,QAE/DoM,EAAgBJ,GAAYvC,SAAS,KAAO7J,IAAUoB,UAGxD,IAAcD,EAAKnC,KAAKgC,MAAM0E,QAASvE,EAAKnC,KAAKgC,MAAM6D,WAAW4H,sBAElEF,EAAavM,IAAUoB,SAEvBD,EAAKnC,KAAKgC,MAAMiI,MAAMyD,gBAAgB,CACpCnN,YAAaqM,EAAae,UAGnBH,EAAgBJ,GAAYvC,SAAS,KAAO7J,IAAUsB,YAG/D,IAAcH,EAAKnC,KAAKgC,MAAM0E,QAASvE,EAAKnC,KAAKgC,MAAM6D,WAAW4H,sBAElEF,EAAavM,IAAUsB,UAEvBH,EAAKnC,KAAKgC,MAAM4L,OAAOF,gBAAgB,CACrCnN,YAAaqM,EAAaiB,WAK9B1L,EAAKnC,KAAKgC,MAAM8L,aAAaP,GAG7BpL,EAAKnC,KAAKgC,MAAMqJ,OAAO0C,SAEvB,IAAMC,EAAQR,EAAgBJ,GAAYhM,QAE1C0E,YAAOjD,MACJU,QAAQ,kBAAmByK,GAE9BvL,YAAWN,EAAKnC,KAAKiO,iBAAmB9L,EAAKnC,KAAKiO,eAAepJ,KAAK1C,EAAKnC,KAAKgC,MAAOwL,EAAgBJ,GAAaY,MAM1HnL,KAAKqL,cAAgBrL,KAAK7C,KAAKgC,MAAMgF,IAAI9D,OAAO,KAC7CC,KAAK,QAAS,mBACdA,KAAK,YAAa,oBAErBN,KAAKsL,YAActL,KAAKqL,cACrBjJ,UAAU,KACVkH,KAAKL,GACLM,QACAlJ,OAAO,KACPC,KAAK,aAAa,SAAUgC,EAAGC,GAE9B,OAAIjD,EAAKnC,KAAKE,WAAac,IAAUa,QAE5B,cADGM,EAAKnC,KAAK4L,aAAaxG,EAAI,GAAMjD,EAAKnC,KAAK4L,aAAaxG,EAAI,GAAKpE,IAAUoN,aAAehJ,EAAK,GAC/E,OACjBjD,EAAKnC,KAAKE,WAAac,IAAUsB,UAGnC,gBADG8C,EAAIpE,IAAUgM,eACK,SAHxB,KAMR7J,KAAK,SAAS,SAAUgC,GACvB,MAAO,uBAAyBA,KAEjC5B,QAAQ,kBAAkB,SAAU4B,EAAGC,GACtC,QAAQyG,EAAY1G,KAAM0G,EAAY1G,GAAG/D,WAI7CyB,KAAKsL,YACFjG,GAAG,QAASL,YAASgF,EAAc,IAAK,CACvCwB,UAAU,KAIdxL,KAAKsL,YAAYjL,OAAO,QACrBC,KAAK,QAAS,mBACdA,KAAK,IAAKnC,IAAUsN,eACpBnL,KAAK,IAAKnC,IAAUuN,eACpBrJ,MAAM,YAAa,QACnBA,MAAM,cAAe,OACrB5B,MAAK,SAAU6B,GACd,IAAIqJ,EAAWrM,EAAKnC,KAAK2I,cAAgBkD,EAAY1G,GAAK0G,EAAY1G,GAAG4F,KAAO,IAIhF,OAHI5I,EAAKnC,KAAKyO,aAAetM,EAAKnC,KAAK2M,cAAgB6B,EAAQtK,SAC7DsK,EAAUA,EAAQE,UAAU,EAAGvM,EAAKnC,KAAK2M,eAAiB,OAErD6B,KAIX3L,KAAKsL,YAAYjL,OAAO,QACrBC,KAAK,QAAS,iBACdA,KAAK,IAAK,GACVA,KAAK,QAASnC,IAAU2N,kBACxBxL,KAAK,SAAUnC,IAAU2N,kBACzBzJ,MAAM,UAAU,SAAUC,GACzB,OAAO0G,EAAY1G,GAAK0G,EAAY1G,GAAG2F,MAAQ,MAEhD5F,MAAM,eAAgB,OACtBA,MAAM,QAAQ,SAAUC,GACvB,OAAO0G,EAAY1G,GAAK0G,EAAY1G,GAAG2F,MAAQ,MAGnDjI,KAAK7C,KAAK4O,sBAAwBjL,KAAK4I,MAAM1J,KAAKqL,cAAcW,OAC7DC,UACAzI,OAEHxD,KAAKC,W,+BAML,IAAMX,EAAOU,KACPkM,EAAalM,KAAK7C,KAAKgC,MAAM0D,UAAUT,UAAU,wBACnD+J,EAAanM,KAAK7C,KAAK2L,eAAiB9I,KAAK7C,KAAKgC,MAAM8B,OAAOC,KAAOlB,KAAK7C,KAAKgC,MAAM8B,OAAOG,MAEjG,GAAIpB,KAAK7C,KAAKE,WAAac,IAAUsB,UAAW,CAE9C0M,GAAchO,IAAUkM,kBACxB,IAAI+B,EAAYjO,IAAUkO,gBACtBrM,KAAK7C,KAAK2L,iBAAmB3K,IAAUmO,mBACzCF,EAAYjO,IAAUkO,gBAAkB,IAE1C,IAAIE,EAAazL,KAAKC,MAAMf,KAAK7C,KAAKgC,MAAMQ,WAAayM,EAAY,KACjEI,EAAQxM,KAAK7C,KAAKgC,MAAMQ,WAAa4M,EAEzCA,GADAC,EAAQ1L,KAAKC,OAAOyL,EAAQxM,KAAK7C,KAAKmN,UAAU9G,OAAS,GAGzD,IAAMiJ,EAAa3L,KAAKC,OAAOf,KAAK7C,KAAKgC,MAAM8E,eAAeP,OAAS1D,KAAK7C,KAAKmN,UAAU5G,QAAU,GAErG1D,KAAKqL,cACF/K,KAAK,YAAa,aAAeiM,EAAa,IAAME,EAAa,KAItE,IAAMC,EAAQ1M,KAAK7C,KAAKgC,MAAMgF,IAE1BnE,KAAK7C,KAAKE,WAAac,IAAUa,UACnCmN,EAAahO,IAAUoN,aAAejM,EAAKnC,KAAK4L,aAAa1H,OAASlD,IAAUwO,uBAE3E3M,KAAK7C,KAAK4O,sBAAwB5N,IAAUyO,oBAAuBtN,EAAKnC,KAAKgC,MAAMQ,YAEtF+M,EAAMtK,UAAU,cACboH,MAAK,WACJ,IAAMe,EAAatH,YAAOjD,MAAMiD,OAAO,QAAQmB,OAC/CnB,YAAOjD,MAAMiD,OAAO,QACjBmB,KAAK,IACL/D,OAAO,aACPI,KAAK8J,MAEZ2B,EAAWxL,QAAQ,aAAa,GAE5BpB,EAAKnC,KAAKgC,MAAMQ,WAAawM,EAE/BnM,KAAKsL,YACFhL,KAAK,aAAa,SAAUgC,EAAGC,GAE9B,MAAO,eADGA,EAAIpE,IAAUgM,eACI,OAIhCnK,KAAKsL,YACFhL,KAAK,aAAa,SAAUgC,EAAGC,GAE9B,MAAO,aADGpE,IAAUoN,aAAehJ,EACT,YAKhCvC,KAAKsL,YACFhL,KAAK,aAAa,SAAUgC,EAAGC,GAE9B,MAAO,cADGjD,EAAKnC,KAAK4L,aAAaxG,EAAI,GAAMjD,EAAKnC,KAAK4L,aAAaxG,EAAI,GAAKpE,IAAUoN,aAAehJ,EAAK,GAC/E,UAGzBvC,KAAK7C,KAAKyO,cACbc,EAAMtK,UAAU,cACboH,MAAK,WACJvG,YAAOjD,MAAMiD,OAAO,QACjBmB,KAAK,OAEZ8H,EAAWxL,QAAQ,aAAa,Q,+BAO9B+B,GACRA,IAAaA,EACbzC,KAAK7C,KAAKoB,QAAUkE,EACpBzC,KAAKqL,eAAiBrL,KAAKqL,cAAc3K,QAAQ,aAAc+B,K,+BAI/DzC,KAAKsL,aAAetL,KAAKsL,YAAY5I,SACrC1C,KAAKqL,eAAiBrL,KAAKqL,cAAc3I,SACzC1C,KAAK7C,KAAO,S,GA5S8BwF,KAAzBiG,O,oHCHAiE,E,YACnB,WAAa1P,GAAM,8D,oDAKjB6C,KAAK8M,WAAWpI,SAAQ,SAAUqI,GAChCA,EAAOnI,Y,+BAKT5E,KAAK8M,WAAWpI,SAAQ,SAAUqI,GAChCA,EAAO9M,c,+BAIDwC,GACRzC,KAAK8M,WAAWpI,SAAQ,SAAUqI,GAChCA,EAAOlI,SAASpC,Q,+BAMlBzC,KAAK8M,WAAWpI,SAAQ,SAAUqI,GAChCA,EAAO7B,c,+BAKTlL,KAAK8M,WAAWpI,SAAQ,SAAUqI,GAChCA,EAAOrK,YAET1C,KAAK8M,WAAa,KAClB9M,KAAK7C,KAAO,S,SAnCoBwF,GAAfkK","file":"barseries~timeseries.min.js","sourcesContent":["// import * as zoom from 'd3-zoom'\n\nexport {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event,\n  touch as d3Touch,\n  touches as d3Touches\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport {zoom, zoomTransform} from 'd3-zoom'\n\nexport default {\n  version: 'v5'\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n    const self = this\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      let svgClass = 'vc-svg ' + opts.chart.className\n      if (this.options.chart.isTouchScreen) {\n        svgClass += ' vc-noselect'\n      }\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', svgClass)\n\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}"],"sourceRoot":""}