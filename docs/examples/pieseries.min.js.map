{"version":3,"sources":["webpack://vc/./data-parser/BasicPSParser.js","webpack://vc/./series/Pie.js","webpack://vc/./series/PieSeries.js","webpack://vc/./legend/PieSeriesLegend.js","webpack://vc/./charts/PieSeriesChart.js","webpack://vc/./d3Importer.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./legend/TimeSeriesLegend.js","webpack://vc/./series/Series.js","webpack://vc/./tooltip/BasicTooltip.js"],"names":["BasicPSParser","opts","this","dataOptions","data","series","constructPlotInfo","err","console","log","onError","Error","pieData","pieseries","plotInfo","eachPlotSet","othersArc","name","value","color","pieObj","pie","total","arcs","values","sort","a","b","forEach","arcInfo","ind","pieArcCount","refineName","refineString","visible","unit","push","plotSet","chartData","ChartDataParser","Pie","className","donutPercent","positionPercentage","seriesOrder","piePosPercentage","constants","PIE_POS_DEFAULT","radius","Math","floor","min","chart","chartWidth","chartHeight","order","d","donutLength","tooltipHelper","arc","outerRadius","PIE_TOOLTIP_BUFFER","innerRadius","self","pieTag","graphZone","append","attr","arcZone","selectAll","enter","each","style","PIE_DARK_OPACITY","on","txtEle","select","textPos","elementOffset","tooltip","hover","left","top","PIE_DULL_OPACITY","PIE_ARC_STROKE","transition","delay","attrTween","i","interpolate","PIE_HOVER_BUFFER","t","hide","centroid","text","showFlag","classed","remove","ChartComponent","PieSeries","plotSeries","options","pieInfo","Series","PieSeriesLegend","maxWidthLegend","hasOverflow","eachPlotNames","textWidth","dummyG","svg","legendPrefix","thisWidth","round","getComputedTextLength","LEGEND_MAX_WIDTH","maxYLen","chartFullSpace","height","fullYLen","length","LEGEND_Y_SPACE","divWidth","LEGEND_SHOW_WIDTH","legendDiv","width","legendDisplay","pieforeignDiv","legendBlock","legendXDiv","update","chartZoneWidth","node","getBBox","basicWidth","margin","right","LEGEND_RIGHT_BUFFER","pieLegendPos","PIE_POS_LEGEND","legendXPos","xBuff","legendYPos","show","PieSeriesChart","container","startTime","Date","dataParser","addDefaultPSOptions","isObject","dataExecutor","chartInitilize","draw","tooltipOpts","getObject","Tooltip","chartComponentsArr","legend","document","implementation","hasFeature","legends","position","TimeSeriesLegend","afterDraw","call","chartResponsive","timeDiff","getTime","onComplete","Chart","isString","size","containerName","containerBox","takeContainerWidth","takeContainerHeight","maxWidth","minWidth","chartType","bottom","html","svgClass","isTouchScreen","counter","chartCmpt","showHide","chartResize","throttedResize","throttle","setTimeout","chartId","id","window","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","chartCounter","format","DIR_TOP","isFunction","c","time","error","defaultValueFormat","val","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","xAxis","UNITS_TIME","tickFormatter","timeInfo","timeLen","timeRange","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","yAxis","UNITS_DEF","zoom","formatTime","isArray","zoneOffset","tableStr","dataIndex","key","isNaN","plotAxis","addDefaultBSOptions","dataArr","percentage","DIR_RIGHT","disableSeriesToggle","spacingNames","leng","maxLenLegend","ele","maxTextLength","graphOptions","toggleSeries","emptyFn","seriesName","visibleSeries","plotName","applyYAxis","currentPlotInfo","DIR_LEFT","constructYAxisInfo","modifyAxisProps","domainScale","yRange","yAxis2","yRange2","reScaleYAxis","redraw","sFlag","onLegendChange","LEGEND_SPACE","trailing","LEGEND_TEXT_X","LEGEND_TEXT_Y","legName","isPieLegend","substring","LEGEND_RECT_SIZE","horizontalLegendWidth","legendText","legendPos","VERT_POS_LEGEND","d3Svg","DATA_INTERVAL_BUFFER_X","plotFn","BasicTooltip","toolTipDiv","x","y","displayData","excludeToolTipDiv","box","rootPos","xpos","ypos","$toolTipDiv"],"mappings":"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","file":"pieseries.min.js","sourcesContent":["import {refineString} from '@/utils'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\n\nexport default class BasicPSParser extends ChartDataParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while pieseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on pieseries JSON parsing')\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const pieData = resJson.pieseries\n    const plotInfo = dataOptions.series\n    const eachPlotSet = {}\n    const othersArc = {\n      name: 'Others',\n      value: 0,\n      color: '#324fff'\n    }\n\n    // Create pieSet for each pie charts and arcInfo which contains each pie arcs to be drawn\n    const pieObj = plotInfo.pie\n    pieObj.total = 0\n    const arcs = []\n\n    // Find total value for entire pie chart\n    const allArcArr = pieData.values\n\n    allArcArr.sort(function (a, b) {\n      return (b.value - a.value)\n    }).forEach(function (arcInfo, ind) {\n      if (pieObj.pieArcCount && (ind + 1) >= pieObj.pieArcCount) {\n        // Add to others arc\n        othersArc.value += arcInfo.value\n      } else {\n        const refineName = refineString(arcInfo.name)\n        // arcInfo.name = refineName\n        eachPlotSet[refineName] = {}\n        eachPlotSet[refineName].name = arcInfo.name\n        eachPlotSet[refineName].color = arcInfo.color\n        eachPlotSet[refineName].value = arcInfo.value\n        eachPlotSet[refineName].visible = true\n        eachPlotSet[refineName].unit = pieObj.unit\n        arcs.push(arcInfo)\n      }\n      pieObj.total += arcInfo.value\n     \n    })\n    // Add others to arc\n    if (othersArc.value) {\n      const refineName = refineString(othersArc.name)\n      // othersArc.name = refineName\n      eachPlotSet[refineName] = {}\n      eachPlotSet[refineName].name = othersArc.name\n      eachPlotSet[refineName].color = othersArc.color\n      eachPlotSet[refineName].value = othersArc.value\n      eachPlotSet[refineName].visible = true\n      eachPlotSet[refineName].unit = pieObj.unit\n      arcs.push(othersArc)\n    }\n\n    return {\n      plotSet: eachPlotSet,\n      series: {\n        pie: pieObj\n      },\n      chartData: {\n        name: pieObj.name,\n        arcs\n      }\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {pie, arc, interpolate, select} from '@/d3Importer'\nimport {elementOffset} from '@/utils'\n\nexport default class Pie extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      pieData: null,\n      donutPercent: 100,\n      positionPercentage: null,\n      seriesOrder: true,\n      visible: true\n    }, opts)\n\n    this.opts.piePosPercentage = this.opts.positionPercentage || (constants.PIE_POS_DEFAULT / 100)\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n\n    // X Position of pie graph on the chart\n    this.pie = pie()\n\n    if (this.opts.seriesOrder) {\n      this.pie\n        .sort(function (a, b) {\n          return (b.order - a.order) // Sort based on each series order\n        })\n    }\n\n    this.pie\n      .value(function (d) {\n        return d.value // provide index of this series in data Arr\n      })\n\n\n    if (this.opts.donutPercent > 100 || this.opts.donutPercent < 0) {\n      this.opts.donutPercent = 100\n    }\n\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.opts.tooltipHelper = arc()\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arc = arc()\n    // .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n  }\n\n  draw () {\n\n    const outerRadius = this.opts.radius\n    const arc = this.arc\n    const self = this\n    this.pieTag = this.opts.chart.graphZone.append('g')\n      .attr('class', 'vc-pie-plot vc-pie-' + this.opts.className)\n      .attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n\n    this.arcZone = this.pieTag.selectAll('.vc-pie-arc')\n      .data(this.pie(this.opts.pieData.arcs))\n      .enter().append('g')\n      .attr('class', 'vc-pie-arc')\n\n    this.arcZone.append('path')\n      .each(function (d) {\n        d.outerRadius = outerRadius\n      })\n      .attr('d', this.arc)\n      .attr('fill', function (d) {\n        return d.data.color\n      })\n      .style('opacity', constants.PIE_DARK_OPACITY)\n      .style('stroke-width', 0)\n      .on('mouseover', function (d, ind) {\n        // tooltip feature\n        const txtEle = self.arcZone.select(`.vc-tool-text_${ind}`)\n        const textPos = elementOffset(txtEle) // Find position of Arc respective tooltipHelper\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(textPos.left, textPos.top, d)\n        // Dull all other Arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DULL_OPACITY)\n        // Provide new radius and stroke-width\n        select(this)\n          .style('opacity', constants.PIE_DARK_OPACITY)\n          .style('stroke-width', constants.PIE_ARC_STROKE)\n          .transition().delay(10).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius + constants.PIE_HOVER_BUFFER)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n      .on('mouseout', function (d) { // Hide tooltip\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n        // Provide dark opacity to all arcs\n        self.arcZone.selectAll('path')\n          .style('opacity', constants.PIE_DARK_OPACITY)\n        // Revert back to its loaded radius\n        select(this)\n          .style('stroke-width', 0)\n          .transition().delay(150).attrTween('d', function (d) {\n            const i = interpolate(d.outerRadius, outerRadius)\n            return function (t) {\n              d.outerRadius = i(t)\n              return arc(d)\n            }\n          })\n      })\n\n    // Add tooltip-helper for each arc outside pie area\n    this.arcZone.append('text')\n      .attr('class', function (d, ind) {\n        return `vc-tool-text_${ind}`\n      })\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  update () {\n    const self = this\n    this.opts.radius = Math.floor(Math.min((this.opts.chart.chartWidth * this.opts.piePosPercentage), this.opts.chart.chartHeight) / 2)\n    this.pieTag.attr('transform', 'translate(' + Math.floor(this.opts.chart.chartWidth * this.opts.piePosPercentage / 2) + ',' + Math.floor(this.opts.chart.chartHeight / 2) + ')')\n    this.opts.donutLength = Math.floor(this.opts.donutPercent * this.opts.radius / 100)\n\n    this.arc\n      .outerRadius(this.opts.radius)\n      .innerRadius(this.opts.radius - this.opts.donutLength)\n\n    this.opts.tooltipHelper\n      .outerRadius(this.opts.radius + 2 * constants.PIE_TOOLTIP_BUFFER)\n      .innerRadius(this.opts.radius)\n\n    this.arcZone.select('path').attr('d', this.arc)\n    this.arcZone.select('text')\n      .attr('transform', function (d) {\n        return 'translate(' + self.opts.tooltipHelper.centroid(d) + ')'\n      })\n      .style('visibility', 'hidden')\n      .text(function (d) {\n        return 'T'\n      })\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.pieTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  remove () {\n    this.arcZone && this.arcZone.remove()\n    this.pieTag && this.pieTag.remove()\n    this.opts.tooltipHelper = null\n    this.arc = null\n    this.pie = null\n    this.opts = null\n  }\n}","import Series from '@/series/Series'\nimport Pie from '@/series/Pie'\n\nexport default class PieSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData\n    const pieInfo = this.opts.chart.options.series.pie\n\n    this.plotSeries.push(new Pie({\n      chart: this.opts.chart,\n      className: pieInfo.className || pieInfo.name,\n      pieData: data,\n      donutPercent: pieInfo.donutPercent || 100,\n      visible: pieInfo.visible\n    }))\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\n\nexport default class PieSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.hasOverflow = false\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const textWidth = []\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n        }\n        textWidth.push(thisWidth)\n      })\n\n    dummyG.remove()\n\n    if (this.opts.maxWidthLegend > constants.LEGEND_MAX_WIDTH) {\n      this.opts.maxWidthLegend = constants.LEGEND_MAX_WIDTH\n    }\n\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n\n    const pieforeignDiv = this.legendDisplay\n      .append('foreignObject')\n      .attr('width', divWidth)\n      .attr('height', fullYLen)\n      .attr('class', 'vc-legend-right')\n      .append('xhtml:div')\n      .attr('xmlns', 'http://www.w3.org/1999/xhtml')\n      .style('height', '100%')\n      .style('padding', '5px 0px')\n\n    if (fullYLen === maxYLen) {\n      // Add overflow to chart\n      pieforeignDiv\n        .style('overflow', 'auto')\n      this.opts.hasOverflow = true\n    }\n\n    this.legendBlock = pieforeignDiv\n      .selectAll('div')\n      .data(eachPlotNames)\n      .enter()\n      .append('div')\n      .attr('class', 'vc-legend-name')\n\n\n    this.legendBlock.append('span')\n      .style('background-color', function (d) {\n        return eachPlotSet[d].color\n      })\n\n    this.legendBlock.append('label')\n      .style('width', (divWidth - 40) + 'px')\n      .style('font-size', '11px')\n      .style('font-weight', '600')\n      .text(function (d) {\n        return (self.opts.legendPrefix + eachPlotSet[d].name)\n      })\n\n    this.legendXDiv = pieforeignDiv\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const chartZoneWidth = this.opts.chart.graphZone.node().getBBox().width\n    const basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right + constants.LEGEND_RIGHT_BUFFER\n\n    let pieLegendPos = constants.PIE_POS_LEGEND\n    if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n      pieLegendPos = constants.PIE_POS_LEGEND - 5\n    }\n\n    let legendXPos = Math.floor(this.opts.chart.chartWidth * pieLegendPos / 100)\n    let xBuff = this.opts.chart.chartWidth - legendXPos\n    xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n    legendXPos += xBuff\n\n    const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n    if (!this.opts.hasOverflow) {\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n    } else {\n      this.legendXDiv\n        .style('position', 'relative')\n        .style('top', legendYPos + 'px')\n        .style('left', legendXPos + 'px')\n    }\n\n    if (this.opts.chart.chartWidth < (basicWidth + chartZoneWidth)) {\n      // Hide legend display for pielegends\n      this.hide()\n    } else {\n      this.show()\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport {addDefaultPSOptions} from '@/helpers'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicPSParser from '@/data-parser/BasicPSParser'\nimport ChartDataParser from '@/data-parser/ChartDataParser'\nimport PieSeries from '@/series/PieSeries'\nimport PieSeriesLegend from '@/legend/PieSeriesLegend'\nimport TimeSeriesLegend from '@/legend/TimeSeriesLegend'\n\nexport default class PieSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicPSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartDataParser\n    if (!(opts.dataParser instanceof ChartDataParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartDataParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultPSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new PieSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n\n    if (this.options.legend.visible) {\n      // IF browser supports foreignObject use pieLegends API\n      if (document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#Extensibility', '1.1')) {\n        this.legends = new PieSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      } else {\n        this.legends = new TimeSeriesLegend({\n          chart: this,\n          legendPrefix: this.options.legend.legendPrefix,\n          position: this.options.legend.position\n        })\n      }\n\n      this.chartComponentsArr.push(this.legends)\n    }\n  }\n\n  draw () {\n    console.log('PieSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    this.chartResponsive()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n}\n","// import * as zoom from 'd3-zoom'\n\nexport {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event,\n  touch as d3Touch,\n  touches as d3Touches\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport {zoom, zoomTransform} from 'd3-zoom'\n\nexport default {\n  version: 'v5'\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      let svgClass = 'vc-svg ' + opts.chart.className\n      if (this.options.chart.isTouchScreen) {\n        svgClass += ' vc-noselect'\n      }\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', svgClass)\n\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\n\nexport default class TimeSeriesLegend extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      disableSeriesToggle: false\n    }, opts)\n\n    const self = this\n    this.opts.maxWidthLegend = 0\n    this.opts.spacingNames = []\n\n\n    const graphOptions = this.opts.chart.options\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    let leng = 0\n    const textWidth = []\n    let maxLenLegend\n\n    const dummyG = this.opts.chart.svg.append('g')\n    // Add all name on DOM to calculate how much space is needed for every names\n    dummyG.selectAll('.dummyText')\n      .data(eachPlotNames)\n      .enter()\n      .append('text')\n      .attr('class', 'vc-legend-label')\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        return (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n      })\n      .each(function (d, i) {\n        // Find size required for each legend on screen\n        const thisWidth = Math.round(this.getComputedTextLength())\n        if (thisWidth > self.opts.maxWidthLegend) {\n          self.opts.maxWidthLegend = thisWidth\n          maxLenLegend = d\n        }\n        textWidth.push(thisWidth)\n      })\n\n    // Fill the spacing Arr having position for each legends on horizontal order\n    textWidth.forEach(function (ele) {\n      leng += ele\n      self.opts.spacingNames.push(leng)\n    })\n\n    // Make maxTextLength Higher to show full text for pie legends\n    this.opts.maxTextLength = maxLenLegend.length + 100\n\n    dummyG.remove()\n  }\n\n  draw () {\n\n    const self = this\n    const graphOptions = this.opts.chart.options\n    let toggleSeries = emptyFn\n    const eachPlotSet = graphOptions.plotSet\n    const eachPlotNames = Object.keys(eachPlotSet)\n    const maxYLen = Math.floor(this.opts.chart.chartFullSpace.height * 90 / 100)\n    let fullYLen = eachPlotNames.length * constants.LEGEND_Y_SPACE\n    fullYLen = fullYLen > maxYLen ? maxYLen : fullYLen\n    const divWidth = this.opts.maxWidthLegend + constants.LEGEND_SHOW_WIDTH\n\n    this.opts.legendDiv = {\n      width: divWidth,\n      height: fullYLen\n    }\n\n\n    // Perfom Series show and hide on click of each legend\n    if (!this.opts.disableSeriesToggle) {\n\n      toggleSeries = function (seriesName) {\n        let visibleSeries = 0\n        let plotName\n\n        if (eachPlotSet[seriesName] && eachPlotSet[seriesName].visible) {\n          // If the series is getting disabled and its only one series visible, Dont disable it.\n          for (plotName in eachPlotSet) {\n            eachPlotSet[plotName].visible && visibleSeries++\n          }\n\n          if (visibleSeries <= 1) {\n            return\n          }\n        }\n\n        let applyYAxis\n\n        // plotSeries that is getting toggled\n        let currentPlotInfo\n\n        if (eachPlotSet && eachPlotSet[seriesName]) {\n          currentPlotInfo = eachPlotSet\n        }\n\n\n        if (currentPlotInfo) {\n\n          currentPlotInfo[seriesName].visible = !currentPlotInfo[seriesName].visible\n\n          if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_LEFT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_LEFT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis.modifyAxisProps({\n              domainScale: graphOptions.yRange\n            })\n\n          } else if (currentPlotInfo[seriesName].plotAxis[0] === constants.DIR_RIGHT) {\n\n            // This will compute max and min value for YAxis based on series which are visible\n            Object.assign(self.opts.chart.options, self.opts.chart.dataParser.constructYAxisInfo())\n\n            applyYAxis = constants.DIR_RIGHT\n            // Update Y Axis with new domainScale\n            self.opts.chart.yAxis2.modifyAxisProps({\n              domainScale: graphOptions.yRange2\n            })\n          }\n\n          // Adjust YAxis tick value display based on yAxis change\n          self.opts.chart.reScaleYAxis(applyYAxis)\n\n          // Redraw all plot components based on yAxis change\n          self.opts.chart.series.redraw()\n\n          const sFlag = currentPlotInfo[seriesName].visible\n\n          select(this)\n            .classed('vc-fill-hidden', !sFlag)\n\n          isFunction(self.opts.onLegendChange) && self.opts.onLegendChange.call(self.opts.chart, currentPlotInfo[seriesName], sFlag)\n        }\n\n      }\n    }\n\n    this.legendDisplay = this.opts.chart.svg.append('g')\n      .attr('class', 'vc-legend-group')\n      .attr('transform', 'translate(15, 5)')\n\n    this.legendBlock = this.legendDisplay\n      .selectAll('g')\n      .data(eachPlotNames)\n      .enter()\n      .append('g')\n      .attr('transform', function (d, i) {\n        // Provide horizontal position based on order\n        if (self.opts.position === constants.DIR_TOP) {\n          const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n          return 'translate(' + x + ', 0)'\n        } else if (self.opts.position === constants.DIR_RIGHT) {\n          // Provide vertical position based on order\n          const y = i * constants.LEGEND_Y_SPACE\n          return 'translate(0 ,' + y + ')'\n        }\n      })\n      .attr('class', function (d) {\n        return 'vc-legend vc-legend-' + d\n      })\n      .classed('vc-fill-hidden', function (d, i) {\n        return (eachPlotSet[d] ? !eachPlotSet[d].visible : false)\n      })\n\n    // Listen to click event only for timeseries legends\n    this.legendBlock\n      .on('click', throttle(toggleSeries, 300, { // Sometimes toggle event is called multiple times, hence block by adding throttle\n        trailing: false\n      }))\n\n\n    this.legendBlock.append('text')\n      .attr('class', 'vc-legend-label')\n      .attr('x', constants.LEGEND_TEXT_X)\n      .attr('y', constants.LEGEND_TEXT_Y)\n      .style('font-size', '11px')\n      .style('font-weight', '500')\n      .text(function (d) {\n        let legName = (self.opts.legendPrefix + (eachPlotSet[d] ? eachPlotSet[d].name : ''))\n        if (self.opts.isPieLegend && self.opts.maxTextLength < legName.length) {\n          legName = legName.substring(0, self.opts.maxTextLength) + '...'\n        }\n        return legName\n      })\n\n\n    this.legendBlock.append('rect')\n      .attr('class', 'vc-legend-box')\n      .attr('x', 0)\n      .attr('width', constants.LEGEND_RECT_SIZE)\n      .attr('height', constants.LEGEND_RECT_SIZE)\n      .style('stroke', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n      .style('stroke-width', '2px')\n      .style('fill', function (d) {\n        return eachPlotSet[d] ? eachPlotSet[d].color : ''\n      })\n\n    this.opts.horizontalLegendWidth = Math.round(this.legendDisplay.node()\n      .getBBox()\n      .width)\n\n    this.update()\n\n  }\n\n  update () {\n    // Display in vertical order\n    const self = this\n    const legendText = this.opts.chart.container.selectAll('svg .vc-legend-label')\n    let basicWidth = this.opts.maxWidthLegend + this.opts.chart.margin.left + this.opts.chart.margin.right\n\n    if (this.opts.position === constants.DIR_RIGHT) {\n      // Display legends vertically on right side\n      basicWidth += constants.LEGEND_SHOW_WIDTH\n      let legendPos = constants.VERT_POS_LEGEND\n      if (this.opts.maxWidthLegend === constants.LEGEND_MAX_WIDTH) {\n        legendPos = constants.VERT_POS_LEGEND + 10\n      }\n      let legendXPos = Math.floor(this.opts.chart.chartWidth * legendPos / 100)\n      let xBuff = this.opts.chart.chartWidth - legendXPos\n      xBuff = Math.floor((xBuff - this.opts.legendDiv.width) / 2)\n      legendXPos += xBuff\n\n      const legendYPos = Math.floor((this.opts.chart.chartFullSpace.height - this.opts.legendDiv.height) / 2)\n\n      this.legendDisplay\n        .attr('transform', 'translate(' + legendXPos + ',' + legendYPos + ')')\n\n    }\n\n    const d3Svg = this.opts.chart.svg\n\n    if (this.opts.position === constants.DIR_TOP) {\n      basicWidth = constants.LEGEND_SPACE * self.opts.spacingNames.length + constants.DATA_INTERVAL_BUFFER_X\n\n      if ((this.opts.horizontalLegendWidth + constants.LEGEND_RIGHT_BUFFER) > self.opts.chart.chartWidth) {\n        // Hide only text and display Color box with tooltip\n        d3Svg.selectAll('.vc-legend')\n          .each(function () {\n            const seriesName = select(this).select('text').html()\n            select(this).select('rect')\n              .html('')\n              .append('svg:title')\n              .text(seriesName)\n          })\n        legendText.classed('vc-hidden', true)\n\n        if (self.opts.chart.chartWidth < basicWidth) {\n          // display box vertically\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const y = i * constants.LEGEND_Y_SPACE\n              return 'translate(0,' + y + ')'\n            })\n        } else {\n          // Display only box on top\n          this.legendBlock\n            .attr('transform', function (d, i) {\n              const x = constants.LEGEND_SPACE * i\n              return 'translate(' + x + ', 0)'\n            })\n        }\n      } else {\n        // Display legend on top with both text, box and remove tooltip\n        this.legendBlock\n          .attr('transform', function (d, i) {\n            const x = self.opts.spacingNames[i - 1] ? (self.opts.spacingNames[i - 1] + constants.LEGEND_SPACE * i) : 0\n            return 'translate(' + x + ', 0)'\n          })\n\n        if (!this.opts.isPieLegend) {\n          d3Svg.selectAll('.vc-legend')\n            .each(function () {\n              select(this).select('rect')\n                .html('')\n            })\n          legendText.classed('vc-hidden', false)\n        }\n      }\n    }\n\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.opts.visible = showFlag\n    this.legendDisplay && this.legendDisplay.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.legendBlock && this.legendBlock.remove()\n    this.legendDisplay && this.legendDisplay.remove()\n    this.opts = null\n  }\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.toolTipDiv = this.opts && this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    this.showHide(true)\n    // This will be called by series -- bar / pie\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    let xpos = Math.round(x - rootPos.left)\n    let ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (box.width / 2))\n      ypos = Math.round(ypos - (box.height / 2))\n    }\n\n\n    this.toolTipDiv\n      .style('left', xpos + 'px')\n      .style('top', ypos + 'px')\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n"],"sourceRoot":""}