{"version":3,"sources":["webpack://vc/./data-parser/BasicBSParser.js","webpack://vc/./series/Bar.js","webpack://vc/./series/BarSeries.js","webpack://vc/./charts/BarSeriesChart.js","webpack://vc/./d3Importer.js","webpack://vc/./axis/index.js","webpack://vc/./charts/Chart.js","webpack://vc/./helpers.js","webpack://vc/./series/Series.js","webpack://vc/./tooltip/BasicTooltip.js"],"names":["BasicBSParser","opts","this","dataOptions","data","series","yAxis","constructChartData","constructXAxisInfo","constructPlotInfo","constructYAxisInfo","err","console","log","onError","Error","seriesData","barseries","columns","values","length","chartData","timeInfo","dataIndex","timeRange","map","dt","eachPlotSet","plotSet","plotInfo","getObject","yAxis2","key","yRange","yRange2","min","max","findEachPlotRange","minVal","maxVal","plot","eachPlot","Infinity","valData","forEach","d","allMax","allMax2","plotData","barOrderMembers","member","name","visible","plotAxis","allMin","allMin2","yMin","yMax","reduce","a","b","ind","dataColorArr","color","yLeft","yRight","refineName","refineString","memberArr","valueRange","unit","isBoolean","ChartAxisParser","Bar","className","constants","DIR_LEFT","DIR_BOTTOM","barData","xAxisTarget","barType","GROUPED_BAR","events","self","chart","options","barOrderIndex","filter","ele","seriesLength","x","indexOf","DIR_TOP","y","DIR_RIGHT","xScale","yScale","srData","seriesArr","xAxisArr","sData","push","indexVal","brInd","barStack","stack","keys","range","transpose","yMaxGrouped","yMaxStacked","nameIndexMap","pt","clipElement","container","select","barSeries","graphZone","selectAll","enter","append","attr","i","bars","srName","parentNode","colorArr","chartHeight","bandwidth","on","tooltip","hover","d3Event","pageX","pageY","val","hide","fn","apply","arguments","STACKED_BAR","showFlag","classed","remove","draw","ChartComponent","BarSeries","plotSeries","isArray","bar","Series","BarSeriesChart","startTime","Date","dataParser","addDefaultBSOptions","isObject","dataExecutor","chartInitilize","axisOptions","Axis","position","orient","rangeScale","domainScale","chartComponentsArr","xAxis","chartWidth","tooltipOpts","Tooltip","afterDraw","call","reScaleYAxis","chartResponsive","mouseHandler","triggerMouseAction","timeDiff","getTime","onComplete","axisSpecifier","tickValArr","diffVal","rangeVal","applyY1Axis","applyY2Axis","tickValues","modifyAxisProps","reScaleAxis","requiredWidth","class","maxText","dummyG","svg","axis","each","tickHtml","text","String","getComputedTextLength","margin","Math","round","Y_AXIS_SPACE","chartFullSpace","width","left","right","update","Chart","label","scaleType","axisClamp","tickNumber","rotateText","textLimit","tickFormatter","showGridLines","tickPadding","TICK_PADDING","scalePadding","SCALE_PADDING","scale","scaleBand","scaleLinear","UNITS_TIME","scaleTime","axisBottom","axisTop","tickSizeInner","axisLeft","axisRight","isFunction","externalFormatter","unshift","transformAttr","axisTag","tickFormat","axisLabelTag","xTrans","yTrans","rotate","floor","X_AXIS_LABEL_Y","BRUSHY_BUFFER","padding","clamp","domain","isNumber","tickVal","newTick","dayLength","minuteLength","ticks","limitText","tickFmt","emptyFn","style","truncateText","isString","size","containerName","containerBox","elementOffset","takeContainerWidth","takeContainerHeight","height","maxWidth","minWidth","chartType","top","bottom","html","counter","chartCmpt","showHide","chartResize","throttedResize","throttle","setTimeout","chartId","id","window","autoSizeChart","resizedGraphWidth","destroyFull","addDefaultChartOptions","isTouchScreen","chartCounter","format","legend","legendPrefix","c","time","error","defaultValueFormat","decimals","kVal","getValueWithDecimals","addDefaultTSOptions","timeLen","xAxisFn","TIME_FORMAT_BUFFER","timeFormat","xDate","UNITS_DEF","zoom","formatTime","zoneOffset","tableStr","isNaN","dataArr","addDefaultPSOptions","value","pieObj","pie","percentage","total","plotFn","redraw","BasicTooltip","toolTipDiv","displayData","excludeToolTipDiv","box","rootPos","xpos","ypos","$toolTipDiv"],"mappings":"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","file":"barseries.min.js","sourcesContent":["import ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport {getObject, refineString, isBoolean} from '@/utils'\n\nexport default class BasicBSParser extends ChartAxisParser {\n  constructor (opts) {\n    super(opts)\n    this.opts = opts\n  }\n\n  dataExecutor () {\n    // Order in which the DataProcessor APIs needs to be executed\n    try {\n\n      this.dataOptions = {}\n      this.opts.data && (this.dataOptions.data = this.opts.data)\n      this.opts.series && (this.dataOptions.series = this.opts.series)\n      this.opts.yAxis && (this.dataOptions.yAxis = this.opts.yAxis)\n\n      Object.assign(this.dataOptions, this.constructChartData())\n      Object.assign(this.dataOptions, this.constructXAxisInfo())\n      Object.assign(this.dataOptions, this.constructPlotInfo())\n      Object.assign(this.dataOptions, this.constructYAxisInfo())\n\n      return this.dataOptions\n\n    } catch (err) {\n      console.log('Error encountered while barseries JSON parsing :', err)\n      this.opts.onError(err)\n      throw new Error('Invalid JSON received - Error on barseries JSON parsing')\n    }\n  }\n\n  constructChartData () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    const data = seriesData.values\n    const validJSONType = (columns.length && data.length)\n\n    if (!validJSONType) {\n      throw new Error('Invalid Bar series JSON received')\n    }\n\n    return {\n      chartData: data\n    }\n  }\n\n  constructXAxisInfo () {\n    const dataOptions = this.dataOptions\n    const seriesData = dataOptions.chartData\n    const dataIndex = 0\n    return {\n      timeInfo: {\n        dataIndex,\n        timeRange: seriesData.map((dt) => dt[0])\n      }\n    }\n  }\n\n  constructYAxisInfo () {\n    const dataOptions = this.dataOptions\n    const eachPlotSet = dataOptions.plotSet\n    const plotInfo = dataOptions.series\n    const data = dataOptions.chartData\n    const yAxis = getObject(dataOptions, 'yAxis.left')\n    const yAxis2 = getObject(dataOptions, 'yAxis.right')\n    let key\n    let yRange = null\n    let yRange2 = null\n\n\n    if (yAxis) {\n      if (Number.isFinite(yAxis.min) && Number.isFinite(yAxis.max)) {\n        yRange = [yAxis.min, yAxis.max]\n      }\n    }\n\n    if (yAxis2) {\n      if (Number.isFinite(yAxis2.min) && Number.isFinite(yAxis2.max)) {\n        yRange2 = [yAxis2.min, yAxis2.max]\n      }\n    }\n\n    // If yRange is not set from graphOptions, then go inside\n    if (!yRange || !yRange2) {\n      let findEachPlotRange = false\n      for (key in eachPlotSet) {\n        if (!Number.isFinite(eachPlotSet[key].minVal) || !Number.isFinite(eachPlotSet[key].maxVal)) {\n          findEachPlotRange = true\n          break\n        }\n      }\n\n      if (findEachPlotRange) {\n\n        // Reset range for each plot for finding min , max\n        for (const plot in eachPlotSet) {\n          const eachPlot = eachPlotSet[plot]\n          eachPlot.minVal = Infinity\n          eachPlot.maxVal = -Infinity\n        }\n\n        // Calculate Max and Min for each plots series\n        let valData = 0\n        data.forEach(function (d) {\n          for (const plot in eachPlotSet) {\n            const eachPlot = eachPlotSet[plot]\n            valData = d[eachPlot.dataIndex]\n            if (valData < eachPlot.minVal) {\n              eachPlot.minVal = valData\n            }\n            if (valData > eachPlot.maxVal) {\n              eachPlot.maxVal = valData\n            }\n          }\n        })\n      }\n\n      // Find Max value required to plot on graph based on visible plot function . i.e line or stack\n      let allMax = -Infinity\n      let allMax2 = -Infinity\n      for (key in plotInfo) {\n        if (key === 'bar') {\n          plotInfo[key].forEach(function (plotData) {\n            const memberArr = plotData.barOrderMembers\n            memberArr.forEach(function (member) {\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'left' && eachPlotSet[member.name].maxVal > allMax) {\n                allMax = eachPlotSet[member.name].maxVal\n              }\n              if (eachPlotSet[member.name].visible && eachPlotSet[member.name].plotAxis[0] === 'right' && eachPlotSet[member.name].maxVal > allMax2) {\n                allMax2 = eachPlotSet[member.name].maxVal\n              }\n            })\n          })\n        }\n      }\n\n      // // Find min value just by checking min value among all series data\n      let allMin = Infinity\n      let allMin2 = Infinity\n      for (key in eachPlotSet) {\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'left' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin) {\n          allMin = eachPlotSet[key].minVal\n        }\n        if (eachPlotSet[key].plotAxis && eachPlotSet[key].plotAxis[0] === 'right' && eachPlotSet[key].visible && eachPlotSet[key].minVal < allMin2) {\n          allMin2 = eachPlotSet[key].minVal\n        }\n      }\n\n\n      let yMin, yMax\n      // If Yaxis range is already defined in options, Override it.\n      if ([allMin, allMax].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.left.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin\n        yMax = getObject(dataOptions, 'yAxis.left.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange = [yMin, yMax]\n      } else {\n        if (yAxis) {\n          yRange = [0, 80]\n        } else {\n          yRange = false\n        }\n      }\n\n\n      if ([allMin2, allMax2].reduce(function (a, b) {\n        return Number.isFinite(a) && Number.isFinite(b)\n      })) {\n        yMin = getObject(dataOptions, 'yAxis.right.min')\n        yMin = Number.isFinite(yMin) ? yMin : allMin2\n        yMax = getObject(dataOptions, 'yAxis.right.max')\n        yMax = Number.isFinite(yMax) ? yMax : allMax2\n        if (!yMax) {\n          yMax = yMin + 80 // Set as default 100 if range is [0,0]\n        }\n        yRange2 = [yMin, yMax]\n      } else {\n        if (yAxis2) {\n          yRange2 = [0, 80]\n        } else {\n          yRange2 = false\n        }\n      }\n\n    }\n\n    return {\n      yRange: yRange,\n      yRange2: yRange2\n    }\n  }\n\n  constructPlotInfo () {\n    const dataOptions = this.dataOptions\n    const resJson = dataOptions.data\n    const seriesData = resJson.barseries\n    const columns = seriesData.columns\n    let ind = 0\n    // Object that contains all plot functions needed for the chart\n    const eachPlotSet = {}\n    // Set of rules that charts needs to be draw on timeSeriesChart\n    const plotInfo = dataOptions.series\n    let key\n\n    const dataColorArr = seriesData.color || []\n    const yLeft = getObject(dataOptions, 'yAxis.left')\n    const yRight = getObject(dataOptions, 'yAxis.right')\n\n    // Generate eachPlotSet using columns\n    columns.forEach(function (d) {\n      // Convert the Series Name to JS suitable object mapped name ex: abc(%) 1 --> abc1\n      const refineName = refineString(d)\n      eachPlotSet[refineName] = {\n        name: d,\n        dataIndex: ind,\n        minVal: Infinity,\n        maxVal: -Infinity,\n        visible: true,\n        color: dataColorArr[ind] || '#000'\n      }\n      ind++\n    })\n\n\n    for (key in plotInfo) {\n      if (key === 'bar') {\n        plotInfo[key].forEach(function (plotData) {\n          const memberArr = plotData.barOrderMembers\n          plotData.valueRange = [Infinity, -Infinity]\n          memberArr.forEach(function (member) {\n            member.name = refineString(member.name)\n            const color = member.color // Apply color for each Plot series or pick from data color Arr\n            if (!color) {\n              throw `Color not present for series ${plotData.name}`\n            }\n            color && (eachPlotSet[member.name].color = color)\n            const plotAxis = member.plotAxis || ['left', 'bottom']\n            eachPlotSet[member.name].plotAxis = plotAxis\n            const unit = plotAxis[0] === 'left' ? yLeft.unit : yRight.unit\n            eachPlotSet[member.name].unit = unit\n            isBoolean(member.visible) && (eachPlotSet[member.name].visible = member.visible)\n          })\n        })\n      }\n    }\n\n    return {\n      series: plotInfo, // newly updated series from user options having additional info of each series\n      plotSet: eachPlotSet, // Info of each plot like color, max, min etc\n    }\n  }\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport constants from '@/constants'\nimport {\n  getObject\n} from '@/utils'\nimport {\n  stack,\n  range,\n  transpose,\n  max,\n  select,\n  d3Event\n} from '@/d3Importer'\n\nexport default class Bar extends ChartComponent {\n  constructor (opts) {\n    super()\n\n    this.opts = Object.assign({\n      className: '',\n      plotAxis: [constants.DIR_LEFT, constants.DIR_BOTTOM],\n      barData: null,\n      xAxisTarget: null,\n      barType: constants.GROUPED_BAR,\n      barOrderMembers: {},\n      visible: true,\n      events: {}\n    }, opts)\n\n    const self = this\n\n    const eachPlotSet = this.opts.chart.options.plotSet\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return eachPlotSet[ele.name].visible || false\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    this.opts.seriesLength = this.opts.barOrderIndex.length\n    // Find x and y axis based on plotAxis\n    let x = getObject(this.opts, 'chart.xAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_TOP) > -1) {\n      x = getObject(this.opts, 'chart.xAxis2.scale')\n    }\n\n    let y = getObject(this.opts, 'chart.yAxis.scale')\n    if (this.opts.plotAxis.indexOf(constants.DIR_RIGHT) > -1) {\n      y = getObject(this.opts, 'chart.yAxis2.scale')\n    }\n\n    this.xScale = x\n    this.yScale = y\n\n    const srData = this.opts.barData\n    this.opts.seriesArr = []\n    this.opts.xAxisArr = []\n    srData.forEach((sData, ind) => {\n      this.opts.xAxisArr.push(sData[this.opts.xAxisTarget])\n      this.opts.barOrderIndex.forEach(function (indexVal, brInd) {\n        if (!self.opts.seriesArr[brInd]) {\n          self.opts.seriesArr[brInd] = []\n        }\n        const eachSeriesData = self.opts.seriesArr[brInd]\n        eachSeriesData.push(sData[indexVal])\n      })\n    })\n    // this.opts.barOrderIndex.forEach(function (indexVal) {\n    //   self.opts.seriesArr.push(map(srData, indexVal))\n    // })\n\n    this.opts.barStack = stack().keys(range(this.opts.seriesLength))(transpose(this.opts.seriesArr))\n\n    this.yMaxGrouped = max(this.opts.seriesArr, function (y) {\n      return max(y)\n    })\n    this.yMaxStacked = max(this.opts.barStack, function (y) {\n      return max(y, function (d) {\n        return d[1]\n      })\n    })\n  }\n\n  draw () {\n    const self = this\n    const nameIndexMap = {}\n    const eachPlotSet = this.opts.chart.options.plotSet\n    const barVisibleOrder = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n    barVisibleOrder.forEach(function (plot, name) {\n      const pt = eachPlotSet[plot.name]\n      nameIndexMap[pt.dataIndex - 1] = plot.name\n    })\n\n\n    const clipElement = this.opts.chart.container.select('svg clipPath')\n    this.barSeries = this.opts.chart.graphZone.selectAll('.vc-bar-series')\n      .data(this.opts.barStack)\n      .enter()\n      .append('g')\n      .attr('clip-path', 'url(#' + clipElement.attr('id') + ')') // display graphZone of same size as clip-path defined\n      .attr('class', 'vc-bar-series')\n      .attr('fill', function (d, i) {\n        return eachPlotSet[nameIndexMap[i]].color\n      })\n      .attr('seriesName', function (d, i) {\n        return nameIndexMap[i]\n      })\n      .attr('seriesIndex', function (d, i) {\n        return i\n      })\n\n\n    this.bars = this.barSeries.selectAll('rect')\n      .data(function (d) {\n        return d\n      })\n      .enter().append('rect')\n      .attr('x', function (d, i) {\n        return self.xScale(self.opts.xAxisArr[i])\n      })\n      .attr('fill', function (d, i) {\n        const srName = select(this.parentNode).attr('seriesName')\n        return eachPlotSet[srName].colorArr && eachPlotSet[srName].colorArr[i]\n      })\n      .attr('y', this.opts.chart.chartHeight)\n      .attr('width', this.xScale.bandwidth())\n      .attr('height', 0)\n      .on('mousemove', function (d, i) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hover(d3Event.pageX, d3Event.pageY - 20, {\n          data: {\n            val: self.opts.barData[i],\n            ind: i\n          }\n        })\n      })\n      .on('mouseout', function (d) {\n        self.opts.chart.tooltip && self.opts.chart.tooltip.hide()\n      })\n\n    for (const name in this.opts.events) {\n      const fn = this.opts.events[name]\n      self.bars.on(name, function () {\n        fn.apply(self.opts.chart, arguments)\n      })\n    }\n\n  }\n\n  // Update happens when the chart is resized\n  update () {\n    const self = this\n    if (this.opts.barType === constants.STACKED_BAR) {\n      this.bars\n        .attr('y', function (d) {\n          return self.yScale(d[1])\n        })\n        .attr('height', function (d) {\n          return self.yScale(d[0]) - self.yScale(d[1])\n        })\n        .attr('x', function (d, i) {\n          return self.xScale(self.opts.xAxisArr[i])\n        })\n        .attr('width', self.xScale.bandwidth())\n    } else {\n      this.bars\n        .attr('x', function (d, i) {\n          const xVal = self.xScale(self.opts.xAxisArr[i]) + self.xScale.bandwidth() / self.opts.seriesLength * select(this.parentNode).attr('seriesIndex')\n          return xVal\n        })\n        .attr('width', self.xScale.bandwidth() / self.opts.seriesLength)\n        .attr('y', function (d) {\n          return self.yScale(d[1] - d[0])\n        })\n        .attr('height', function (d) {\n          return self.yScale(0) - self.yScale(d[1] - d[0])\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.barSeries.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    const eachPlotSet = this.opts.chart.options.plotSet\n    // Modify barOrder arr based on visibleSeries\n    this.opts.barOrderIndex = this.opts.barOrderMembers.filter(function (ele) {\n      return (eachPlotSet[ele.name].visible || false)\n    })\n      .map(function (ele) {\n        return eachPlotSet[ele.name].dataIndex\n      })\n\n    // Remove all bar series\n    this.barSeries && this.barSeries.remove()\n    // draw with new barOrderMembers\n    this.draw()\n  }\n\n  remove () {\n    this.barSeries && this.barSeries.remove()\n    this.bars = null\n    this.opts = null\n  }\n\n}","import {isArray} from '@/utils'\nimport Bar from '@/series/Bar'\nimport Series from '@/series/Series'\n\nexport default class BarSeries extends Series {\n  constructor (opts) {\n    super()\n    this.opts = opts\n    this.plotSeries = []\n    const data = this.opts.chart.options.chartData // Accept either timeseries or pieseries\n    const plotInfo = this.opts.chart.options.series\n\n    // Create plot components based on input options and each plot info\n    isArray(plotInfo.bar) && plotInfo.bar.forEach((plotData) => {\n      this.plotSeries.push(new Bar({\n        chart: this.opts.chart,\n        className: plotData.className || plotData.name,\n        plotAxis: plotData.plotAxis,\n        xAxisTarget: this.opts.chart.options.timeInfo.dataIndex,\n        barOrderMembers: plotData.barOrderMembers,\n        barData: data\n      }))\n    })\n  }\n\n}","import {getObject, isObject} from '@/utils'\nimport Chart from '@/charts/Chart'\nimport Axis from '@/axis'\nimport {addDefaultBSOptions} from '@/helpers'\nimport constants from '@/constants'\nimport ChartAxisParser from '@/data-parser/ChartAxisParser'\nimport Tooltip from '@/tooltip/BasicTooltip'\nimport BasicBSParser from '@/data-parser/BasicBSParser'\nimport BarSeries from '@/series/BarSeries'\nimport {select} from '@/d3Importer'\n\nexport default class BarSeriesChart extends Chart {\n  constructor (container, opts) {\n    opts.startTime = new Date()\n\n    // Create the dataParser is not passed\n    if (!opts.dataParser) {\n      opts.dataParser = new BasicBSParser(opts)\n    }\n    // Check the dataParser exists and its instanceof ChartAxisParser\n    if (!(opts.dataParser instanceof ChartAxisParser)) {\n      throw new Error(\"DataParser in options dosen't have implementation of ChartAxisParser\")\n    }\n\n    // Call Parent Impl\n    super(container, opts)\n\n    // Add default options to chart\n    addDefaultBSOptions(this.options)\n\n    // Run the dataParser for given JSON data\n    if (isObject(this.dataParser)) {\n      Object.assign(this.options, this.dataParser.dataExecutor())\n    }\n\n    // Initilize all chart components needed for timeSeriesChart on exact order based on each dependencies\n    this.chartInitilize()\n\n    setImmediate(() => this.draw())\n  }\n\n  chartInitilize () {\n    let axisOptions\n    const yRange = this.options.yRange\n    const yRange2 = this.options.yRange2\n    const timeInfo = this.options.timeInfo\n\n    if (yRange) {\n      axisOptions = getObject(this, 'options.yAxis.left')\n      this.yAxis = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'left',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.yAxis)\n    }\n\n    if (yRange2) {\n      axisOptions = getObject(this, 'options.yAxis.right')\n      this.yAxis2 = new Axis({\n        chart: this,\n        position: 'y',\n        orient: 'right',\n        rangeScale: [this.chartHeight, 0],\n        domainScale: yRange2,\n        ...axisOptions\n      })\n      // Register the component for draw, update, showHide and remove (chart API)\n      this.chartComponentsArr.push(this.yAxis2)\n    }\n\n    if (timeInfo.timeRange) {\n      axisOptions = getObject(this, 'options.xAxis.bottom')\n      this.xAxis = new Axis({\n        chart: this,\n        position: 'x',\n        orient: 'bottom',\n        rangeScale: [0, this.chartWidth],\n        domainScale: timeInfo.timeRange,\n        ...axisOptions\n      })\n      this.chartComponentsArr.push(this.xAxis)\n    }\n\n    const tooltipOpts = getObject(this, 'options.tooltip')\n    if (tooltipOpts.visible) {\n      this.tooltip = new Tooltip({\n        chart: this,\n        ...tooltipOpts\n      })\n      this.chartComponentsArr.push(this.tooltip)\n    }\n\n    if (this.options.series) {\n      this.series = new BarSeries({\n        chart: this\n      })\n      // Register the component for draw, update, showHide and remove\n      this.chartComponentsArr.push(this.series)\n    }\n  }\n\n  draw () {\n    console.log('BarSeriesChart draw', this)\n    super.draw()\n    this.options.afterDraw.call(this)\n\n    // Add Extra Buffer for max Y value and provide space to display all ticks in graphZone\n    this.reScaleYAxis()\n\n    this.chartResponsive()\n\n    this.mouseHandler && this.mouseHandler.triggerMouseAction()\n\n    this.timeDiff = (new Date()\n      .getTime() - this.options.startTime.getTime())\n    this.options.onComplete.call(this, this.timeDiff)\n  }\n\n  // Find next possible tick to display max Y value and adjust margin to show all tick labels completely\n  reScaleYAxis (axisSpecifier) {\n\n    let tickValArr\n    let diffVal\n    let rangeVal\n    let yMax\n    let applyY1Axis = true\n    let applyY2Axis = true\n\n    if (axisSpecifier === constants.DIR_LEFT) {\n      applyY2Axis = false\n    }\n\n    if (axisSpecifier === constants.DIR_RIGHT) {\n      applyY1Axis = false\n    }\n\n    // If Max value is provided in options, Dont compute next possible tick.\n    yMax = getObject(this.options, 'yAxis.left.max')\n    if (this.options.yRange && applyY1Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis.tickValues\n      // If tickValArr contains values\n      if (tickValArr.length > 1) {\n        // Find difference of last and last previous tick values of Y Axis\n        diffVal = tickValArr[0] - tickValArr[1]\n        // New range is increased by above difference\n        rangeVal = tickValArr[0] + diffVal\n\n        // Modify new max range for the graph\n        this.options.yRange[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis.modifyAxisProps({\n          domainScale: this.options.yRange\n        })\n      }\n    }\n\n    yMax = getObject(this.options, 'yAxis.right.max')\n    if (this.options.yRange2 && applyY2Axis && !Number.isFinite(yMax)) {\n      tickValArr = this.yAxis2.tickValues\n\n      if (tickValArr.length > 1) {\n        diffVal = tickValArr[0] - tickValArr[1]\n        rangeVal = tickValArr[0] + diffVal\n\n        this.options.yRange2[1] = rangeVal\n\n        // Update Y Axis with new domainScale\n        this.yAxis2.modifyAxisProps({\n          domainScale: this.options.yRange2\n        })\n      }\n    }\n\n    // Adjusts Y axis width based on max text length displayed\n    const reScaleAxis = {}\n    let requiredWidth = 0\n\n    if (this.options.yRange) {\n      reScaleAxis[constants.DIR_LEFT] = {}\n      reScaleAxis[constants.DIR_LEFT].class = '.vc-axis-left'\n      reScaleAxis[constants.DIR_LEFT].maxText = ''\n    }\n\n    if (this.options.yRange2) {\n      reScaleAxis[constants.DIR_RIGHT] = {}\n      reScaleAxis[constants.DIR_RIGHT].class = '.vc-axis-right'\n      reScaleAxis[constants.DIR_RIGHT].maxText = ''\n    }\n\n    // Creates dummy svg to add Max length tick values and check its required width in chart\n    const dummyG = this.svg.append('g')\n      .attr('class', 'vc-axis')\n\n    for (const axis in reScaleAxis) {\n      const ticksArr = this.container.select('svg ' + reScaleAxis[axis].class).selectAll('text')\n      ticksArr.each(function (i) {\n        const tickHtml = select(this).text() || ''\n        if (tickHtml.length > reScaleAxis[axis].maxText.length) {\n          reScaleAxis[axis].maxText = tickHtml\n        }\n      })\n\n\n      dummyG.selectAll('.dummyText')\n        .data([reScaleAxis[axis].maxText])\n        .enter()\n        .append('text')\n        .text(String)\n        .each(function (d, i) {\n          // Compute requiredWidth for the Max text\n          requiredWidth = this.getComputedTextLength()\n        })\n\n      // Update respective margin to fit in ticks text\n      this.margin[axis] = Math.round(requiredWidth) + constants.Y_AXIS_SPACE\n\n    }\n    dummyG.remove()\n\n    this.chartWidth = (this.chartFullSpace.width - this.margin.left - this.margin.right)\n    this.update()\n  }\n\n}\n","// import * as zoom from 'd3-zoom'\n\nexport {\n  scaleBand,\n  scaleLinear,\n  scaleTime\n} from 'd3-scale'\n\nexport {\n  axisBottom,\n  axisTop,\n  axisLeft,\n  axisRight\n} from 'd3-axis'\n\nexport {timeFormat} from 'd3-time-format'\n\nexport {interpolate} from 'd3-interpolate'\n\nexport {\n  select,\n  selectAll,\n  mouse as d3Mouse,\n  event as d3Event\n} from 'd3-selection'\n\nexport {\n  range,\n  max,\n  transpose,\n  bisector\n} from 'd3-array'\n\nexport {brushX, brushY} from 'd3-brush'\n\nexport {\n  line, stack, area,\n  stackOrderNone, stackOffsetNone,\n  pie, arc\n} from 'd3-shape'\n\nexport {zoom} from 'd3-zoom'\n\nexport default {\n  version: 'v5',\n}\n","import ChartComponent from '@/charts/ChartComponent'\nimport {\n  axisBottom, axisTop, axisLeft, axisRight,\n  scaleBand, scaleLinear, scaleTime\n} from '@/d3Importer'\nimport constants from '@/constants'\nimport {emptyFn, isFunction, isNumber, truncateText} from '@/utils'\n\nexport default class Axis extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      className: '',\n      position: 'y',\n      orient: 'left',\n      label: '',\n      unit: '',\n      rangeScale: [0, 1000],\n      domainScale: [0, 100],\n      scaleType: '',\n      axisClamp: true,\n      tickNumber: null,\n      rotateText: false,\n      textLimit: 8,\n      tickFormatter: false, // Use d3 tickFormatter\n      showGridLines: false,\n      tickPadding: constants.TICK_PADDING,\n      scalePadding: constants.SCALE_PADDING,\n      visible: true\n    }, opts)\n\n    this.axis = null\n    // Create Axis and Scale based on input options\n    if (this.opts.scaleType === 'scaleBand') {\n      this.scale = scaleBand()\n    } else {\n      this.scale = scaleLinear()\n      if (this.opts.unit === constants.UNITS_TIME) {\n        this.scale = scaleTime()\n      }\n    }\n\n    if (this.opts.position === 'x') {\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        this.axis = axisBottom()\n      } else if (this.opts.orient === constants.DIR_TOP) {\n        this.axis = axisTop()\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartHeight))\n      }\n\n    }\n\n    // Holds all tick values that axis shows\n    this.tickValues = []\n    const self = this\n\n    if (this.opts.position === 'y') {\n      if (this.opts.orient === constants.DIR_LEFT) {\n        this.axis = axisLeft()\n      } else if (this.opts.orient === constants.DIR_RIGHT) {\n        this.axis = axisRight()\n        this.axis.tickSizeInner(0)\n      }\n      if (this.opts.showGridLines === true) {\n        this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n      }\n\n      if (isFunction(this.opts.tickFormatter)) {\n        // If external formatter is provided, modify formatter to populate tickValues\n        const externalFormatter = this.opts.tickFormatter\n        this.opts.tickFormatter = function (val) {\n          self.tickValues.unshift(val)\n          return externalFormatter(val)\n        }\n      }\n    }\n\n    if (this.opts.tickPadding > 0) {\n      this.axis.tickPadding(this.opts.tickPadding)\n    }\n  }\n\n  modifyAxisProps (opts = {}) {\n    Object.assign(this.opts, opts)\n    this.update()\n  }\n\n  draw () {\n    this.transformAttr = null\n\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.transformAttr = `translate(0,${this.opts.chart.chartHeight})`\n    } else if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n    this.axisTag = this.opts.chart.graphZone.append('g')\n      .attr('class', `vc-axis vc-axis-${this.opts.orient} vc-axis-${this.opts.className}`)\n\n\n    // If no formatter is provided, axis uses d3 default formatter\n    isFunction(this.opts.tickFormatter) && this.axis.tickFormat(this.opts.tickFormatter)\n\n    // Add Label to Axis\n    if (this.opts.label) {\n      this.opts.axisLabelTag = this.axisTag.append('text')\n        .attr('class', 'vc-axis-label')\n        .text(this.opts.label)\n    }\n\n    this.update()\n\n    // IF not visible, Dont show the axis, but still scale and plot on graphZone, so that all series can be plotted\n    !this.opts.visible && this.axisTag.classed('vc-hidden', true)\n  }\n\n  // Updates graph Axis based on new width and modify range, domain and ticks\n  update () {\n    if (this.opts.orient === constants.DIR_BOTTOM) {\n      this.opts.rangeScale = [0, this.opts.chart.chartWidth]\n    }\n\n    if (this.opts.orient === constants.DIR_RIGHT) {\n      this.transformAttr = `translate(${this.opts.chart.chartWidth},0)`\n    }\n\n\n    // Position label, scale, ticks, axis based on chart width\n    if (this.opts.label) {\n      let xTrans = 0\n      let yTrans = 0\n      let rotate = 0\n      if (this.opts.orient === constants.DIR_BOTTOM) {\n        xTrans = Math.floor(this.opts.chart.chartWidth / 2)\n        yTrans = constants.X_AXIS_LABEL_Y\n      } else if (this.opts.orient === constants.DIR_LEFT || this.opts.orient === constants.DIR_RIGHT) {\n        if (this.opts.orient === constants.DIR_LEFT) {\n          xTrans = -(this.opts.chart.margin.left) + constants.BRUSHY_BUFFER\n          rotate = 270\n        } else {\n          xTrans = this.opts.chart.margin.right - constants.BRUSHY_BUFFER\n          rotate = 90\n        }\n        yTrans = Math.floor(this.opts.chart.chartHeight / 2)\n      }\n      this.opts.axisLabelTag\n        .attr('transform',\n          `translate(${xTrans},${yTrans}) rotate(${rotate})`)\n    }\n\n    this.tickValues = []\n\n    let domainScale = [this.opts.domainScale[0], this.opts.domainScale[this.opts.domainScale.length - 1]]\n    if (this.opts.scaleType === 'scaleBand') {\n      domainScale = this.opts.domainScale\n      this.scale\n        .padding(this.opts.scalePadding)\n    } else {\n      this.opts.axisClamp && this.scale.clamp() // Clamps outside range value within spectifed range and domain\n    }\n\n    this.scale.range(this.opts.rangeScale)\n      .domain(domainScale)\n\n    this.axis.scale(this.scale)\n\n    if (isNumber(this.opts.tickNumber)) {\n      let tickVal = this.opts.tickNumber\n      if (this.opts.position === 'x' && this.opts.unit === constants.UNITS_TIME) {\n        // modify xtick to display less ticks on lower chart width or has less days\n        const newTick = Math.floor(this.opts.chart.chartWidth / 60)\n        const dayLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 60 * 24 * 1000)) + 1\n        if (dayLength > 2 && dayLength < tickVal) {\n          tickVal = dayLength\n        }\n\n        const minuteLength = Math.floor((this.opts.domainScale[1] - this.opts.domainScale[0]) / (60 * 1000))\n        if (minuteLength < tickVal) {\n          tickVal = minuteLength\n        }\n\n        if (newTick < tickVal) {\n          tickVal = newTick\n        }\n      }\n\n      this.axis.ticks(tickVal)\n    } else if (isFunction(this.opts.tickNumber)) {\n      this.axis.ticks(this.opts.tickNumber())\n    }\n\n    this.transformAttr && this.axisTag.attr('transform', this.transformAttr)\n\n    if (this.opts.showGridLines && this.opts.position === 'y') {\n      this.axis.tickSizeInner(-(this.opts.chart.chartWidth))\n    }\n\n    this.axisTag.call(this.axis)\n\n\n    const limitText = this.opts.textLimit\n    const tickFmt = isFunction(this.opts.tickFormatter) ? this.opts.tickFormatter : emptyFn\n\n    if (this.opts.rotateText === 'slant') {\n      this.axisTag\n        .selectAll('text')\n        .style('text-anchor', 'end')\n        .attr('y', '8')\n        .attr('dx', '-1.0em')\n        .attr('dy', '.15em')\n        .attr('transform', 'rotate(-65)')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    } else if (this.opts.rotateText === 'vertical') {\n      this.axisTag\n        .selectAll('text')\n        .attr('y', 0)\n        .attr('x', 9)\n        .attr('dy', '.35em')\n        .attr('transform', 'rotate(90)')\n        .style('text-anchor', 'start')\n        .text(function (d, i) {\n          return truncateText(tickFmt(d), limitText)\n        })\n    }\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.axisTag && this.axisTag.classed('vc-hidden', !showFlag)\n    this.opts.axisLabelTag && this.opts.axisLabelTag.classed('vc-hidden', !showFlag)\n    this.opts.visible = showFlag\n  }\n\n  // Remove Axis Instance\n  remove () {\n    this.opts.axisLabelTag && this.opts.axisLabelTag.remove()\n    this.axisTag && this.axisTag.remove()\n    this.scale = null\n    this.axis = null\n    this.opts = null\n  }\n}\n","import {elementOffset, isObject, isString, throttle} from '@/utils'\nimport {select} from '@/d3Importer'\nimport ChartComponent from '@/charts/ChartComponent'\n\nexport default class Chart extends ChartComponent {\n  constructor (container, opts) {\n    super()\n    if (isString(container) && isObject(opts) && container.length && isObject(opts.dataParser)) {\n      this.container = select(container)\n      if (!this.container.size()) {\n        throw new Error('The graph container spectifed in options doesnt exist inside in Document Body')\n      }\n      opts.containerName = container\n\n      const containerBox = elementOffset(this.container)\n\n      let takeContainerWidth = false\n      if (!Number.isFinite(opts.chart.width)) {\n        opts.chart.width = containerBox.width\n        takeContainerWidth = true\n      }\n\n      let takeContainerHeight = false\n      if (!Number.isFinite(opts.chart.height)) {\n        opts.chart.height = containerBox.height\n        takeContainerHeight = true\n      }\n\n      if (opts.chart.width > opts.chart.maxWidth) {\n        opts.chart.width = opts.chart.maxWidth\n      }\n\n      if (opts.chart.width < opts.chart.minWidth) {\n        opts.chart.width = opts.chart.minWidth\n      }\n\n      this.options = opts\n\n      this.chartHeight = opts.chart.height\n      this.chartWidth = opts.chart.width\n      this.margin = opts.chart.margin\n      this.chartType = opts.chart.chartType\n\n      if (takeContainerWidth) {\n        this.chartWidth = this.chartWidth - (this.margin.left + this.margin.right)\n      }\n\n      if (takeContainerHeight) {\n        this.chartHeight = this.chartHeight - (this.margin.top + this.margin.bottom)\n      }\n\n      // Attach dataProcess to chart, which generate chartData and plot Info based on JSON and options\n      this.dataParser = opts.dataParser\n\n      // Delete dataProcess from options\n      delete this.options.dataParser\n\n      this.chartFullSpace = {\n        width: this.chartWidth + this.margin.left + this.margin.right,\n        height: this.chartHeight + this.margin.top + this.margin.bottom,\n      }\n\n\n      // Array which holds all the chartComponents required for the graph like axis, series, tooltip, legend etc\n      this.chartComponentsArr = []\n\n      this.svg = this.container.select('svg')\n\n      if (this.svg.size() === 0) {\n        // Create svg element if not exist inside chart container DIV\n        this.svg = this.container.append('svg')\n      }\n\n      // Clear svg if it has needless content\n      this.svg.html('')\n\n      this.svg\n        .attr('width', this.chartFullSpace.width)\n        .attr('height', this.chartFullSpace.height)\n        .attr('class', 'vc-svg ' + opts.chart.className)\n\n      // Add defs to show plot series within the def specified width and height\n      this.svg.append('defs')\n        .append('clipPath')\n        .attr('id', `chart_clip_${this.options.chart.counter}`)\n        .append('rect')\n        .attr('width', this.chartWidth)\n        .attr('height', this.chartHeight)\n\n      // Add graphZone tag, so that all series and axis are grouped together\n      this.graphZone = this.svg.append('g')\n        .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n        .attr('class', 'vc-graphZone')\n    }\n  }\n\n  draw () {\n    console.log('Chart draw', this)\n    // Draw all the chartComponents in the same order of there initilization using chartComponentsArr\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.draw()\n      }\n    })\n  }\n\n  update () {\n    this.svg.attr('width', this.chartFullSpace.width)\n    this.graphZone.attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')')\n    this.svg.select('clipPath').select('rect').attr('width', this.chartWidth)\n\n    console.log('Chart update', this)\n    // Update all chart component based on new width changes\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.update()\n      }\n    })\n  }\n\n  showHide (showFlag) {\n    console.log('Chart showHide', this)\n    showFlag = !!showFlag // Convert any type to boolean\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.showHide(showFlag)\n      }\n    })\n  }\n\n  remove () {\n    console.log('Chart remove', this)\n    this.chartComponentsArr.forEach(function (chartCmpt) {\n      if (chartCmpt instanceof ChartComponent) {\n        chartCmpt.remove()\n      }\n    })\n  }\n\n  // chartResponsive based on screen resize is handled\n  chartResponsive () {\n    if (this.options.chart.chartResize) {\n      this.throttedResize = throttle((width, height) => {\n        if (width === this.chartFullSpace.width) {\n          return // Dont resize if graph is already adjusted\n        }\n        this.chartFullSpace.width = Math.floor(width)\n        this.chartFullSpace.height = Math.floor(height)\n        this.chartWidth = this.chartFullSpace.width - (this.margin.left + this.margin.right)\n        this.chartHeight = this.chartFullSpace.height - (this.margin.top + this.margin.bottom)\n        setTimeout(() => this.update(), 0)\n      }, 450) // 'this' Will have reference of timeSeriesChart or pieSeriesChart\n\n      // Add resize for each chart based on chart ID namespace\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, () => this.autoSizeChart())\n\n    }\n  }\n\n  autoSizeChart () {\n    const containerBox = elementOffset(this.container)\n    let resizedGraphWidth = containerBox.width\n\n    if (resizedGraphWidth > this.options.chart.maxWidth) {\n      resizedGraphWidth = this.options.chart.maxWidth\n    }\n\n    if (resizedGraphWidth < this.options.chart.minWidth) {\n      resizedGraphWidth = this.options.chart.minWidth\n    }\n\n    this.throttedResize(resizedGraphWidth, containerBox.height)\n  }\n\n  // Destroy all chart properties and components\n  destroy (destroyFull) {\n    destroyFull = !!destroyFull\n    // Remove resize hander on window for vcChart namespace\n    if (this.options.chart.chartResize) {\n      const chartId = 'vc-' + (this.options.chart.id || this.options.chart.counter)\n      select(window).on('resize.' + chartId, null)\n    }\n\n    // Remove all chartComponents (timeSeriesChart or pieSeriesChart)\n    this.remove()\n\n    // Remove svg and container if destroyFull is true\n    destroyFull && this.svg.remove()\n    destroyFull && this.container.remove()\n\n    return null\n  }\n}\n","import constants from '@/constants'\nimport {chartCounter, getValueWithDecimals, isArray, isFunction} from '@/utils'\nimport {timeFormat} from '@/d3Importer'\n\nexport function addDefaultChartOptions (opts) {\n\n  opts.chart = Object.assign({\n    chartResize: false,\n    isTouchScreen: false,\n    className: '',\n    maxWidth: Number.MAX_SAFE_INTEGER,\n    minWidth: 0\n  }, opts.chart)\n  opts.chart.counter = chartCounter()\n\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  opts.legend = Object.assign({\n    visible: true,\n    legendPrefix: '',\n    position: constants.DIR_TOP\n  }, (opts.legend || {}))\n\n  if (!isFunction(opts.afterDraw)) {\n    opts.afterDraw = function (c) {\n      return c\n    }\n  }\n\n  if (!isFunction(opts.onComplete)) {\n    opts.onComplete = function (time) {\n      console.log(`Chart loading of ${opts.containerName} is completed in ${time} ms`)\n    }\n  }\n\n  if (!isFunction(opts.onError)) {\n    opts.onError = function (error) {\n      console.log(`Chart has encountered error of ${opts.containerName} `, error)\n    }\n  }\n\n  return opts\n}\n\nexport function defaultValueFormat (val, unit = '', decimals = 3) {\n  const denominator = 1000\n  if (val > denominator) {\n    const kVal = getValueWithDecimals(val / denominator, decimals)\n    if (kVal > denominator) {\n      const mVal = getValueWithDecimals(kVal / denominator, decimals)\n      return `${mVal}M ${unit}`\n    }\n    return `${kVal}K ${unit}`\n  }\n  return `${getValueWithDecimals(val, decimals)} ${unit}`\n}\n\n\nexport function addDefaultTSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_TIME,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n  if (!isFunction(opts.xAxis.bottom.tickFormatter)) {\n    const timeInfo = opts.timeInfo\n    // If the date range is less than 2 days, Show in hour format\n    const timeLen = timeInfo.timeRange.length\n    const dateDiff = timeInfo.timeRange[timeLen - 1] - timeInfo.timeRange[0]\n\n    const xAxisFn = (dateDiff < constants.TIME_FORMAT_BUFFER) ? timeFormat('%H:%M') : timeFormat('%d %b %Y')\n    opts.xAxis.bottom.tickFormatter = (xDate) => {\n      return xAxisFn(xDate)\n    }\n  }\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    const formatTime = timeFormat('%d %b %Y  %H:%M:%S')\n    opts.tooltip.format = function (d) {\n      if (!d || !isArray(d)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const zoneOffset = this.options.xAxis.zoneOffset || ''\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${formatTime(d[timeInfo.dataIndex])} ${zoneOffset}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = d[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>${plotSet[key].name}\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultBSOptions (opts) {\n  // Add defaults to xAxis\n  opts.xAxis = Object.assign({\n    bottom: {\n      unit: constants.UNITS_DEF,\n      visible: true\n    }\n  }, (opts.xAxis || {}))\n\n\n  // If yAxis is not specified, then default is left and its value axis with unit\n  if (!opts.yAxis) {\n    opts.yAxis = {\n      left: {}\n    }\n  }\n\n  if (opts.yAxis.left) {\n    opts.yAxis.left = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.left)\n  }\n\n  if (opts.yAxis.right) {\n    opts.yAxis.right = Object.assign({\n      unit: constants.UNITS_DEF,\n      min: 0, // Start plotting Y Axis from 0\n      visible: true\n    }, opts.yAxis.right)\n  }\n\n  opts.zoom = Object.assign({\n    visible: false\n  }, (opts.zoom || {}))\n\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      let dataArr = d\n      if (d && d.val) {\n        dataArr = d.val\n      }\n      if (!isArray(dataArr)) {\n        return ''\n      }\n      const plotSet = this.options.plotSet\n      const timeInfo = this.options.timeInfo\n      const yAxis = this.options.yAxis\n\n      let tableStr = `<table><tbody><tr>\n            <td class=\"value_full\" colspan=\"2\">\n            ${dataArr[timeInfo.dataIndex]}\n            </td></tr>`\n\n      for (const key in plotSet) {\n        const val = dataArr[plotSet[key].dataIndex]\n        if (!plotSet[key].visible || isNaN(val)) {\n          continue\n        }\n\n        // Find Y Axis format is preset\n        const yOrient = yAxis[plotSet[key].plotAxis[0]]\n        const format = yOrient.format || defaultValueFormat\n\n        tableStr += `<tr>\n        <td class='name'>\n            <span style='background-color:${plotSet[key].color}'></span>\n        </td>\n        <td class='value'>\n            ${format(val, plotSet[key].unit)}\n        </td>\n        </tr>`\n      }\n\n      tableStr += '</tbody></table>'\n\n      return tableStr\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  return opts\n}\n\nexport function addDefaultPSOptions (opts) {\n\n  // General Options to both chartType\n  opts.tooltip = Object.assign({\n    visible: true,\n    format: false // Use aryakaCharts internal tooltip formatter to show raw data\n  }, (opts.tooltip || {}))\n\n  if (!isFunction(opts.tooltip.format)) {\n    opts.tooltip.format = function (d) {\n      if (!d || !d.value) {\n        return ''\n      }\n      const pieObj = this.options.series.pie\n      const format = pieObj.format || defaultValueFormat\n      const percentage = getValueWithDecimals((d.value / pieObj.total) * 100, 1)\n\n      return `<table style='opacity: 0.8;'>\n              <tbody>\n              <tr>\n              <td class='name'><span style='background-color:${d.color}'></span>${d.name}</td>\n              <td class='value'>${percentage} %</td>\n              </tr>\n              <tr>\n              <td class='value' colspan='2'>${format(d.value, pieObj.unit)}</td>\n              </tr>\n              </tbody>\n              </table>`\n    }\n  }\n\n  addDefaultChartOptions(opts)\n\n  opts.legend.position = constants.DIR_RIGHT\n\n  return opts\n}","import ChartComponent from '@/charts/ChartComponent'\n\nexport default class Series extends ChartComponent {\n  constructor (opts) {\n    super()\n  }\n\n  draw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.draw()\n    })\n  }\n\n  update () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.update()\n    })\n  }\n\n  showHide (showFlag) {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.showHide(showFlag)\n    })\n  }\n\n  // Redraw is called when series is toggled from Legends\n  redraw () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.redraw()\n    })\n  }\n\n  remove () {\n    this.plotSeries.forEach(function (plotFn) {\n      plotFn.remove()\n    })\n    this.plotSeries = null\n    this.opts = null\n  }\n\n}","import ChartComponent from '@/charts/ChartComponent'\nimport {elementOffset, isFunction} from '@/utils'\n\nexport default class BasicTooltip extends ChartComponent {\n  constructor (opts) {\n    super()\n    this.opts = Object.assign({\n      visible: true\n    }, opts)\n\n    // Provide basic formatter to display hover data\n    if (!isFunction(this.opts.format)) {\n      this.opts.format = function (d) {\n        return `<span> ToolTip Text : </span><br/><span>${JSON.stringify(d)}</span>`\n      }\n    }\n  }\n\n  draw () {\n    this.toolTipDiv = this.opts.chart.container\n      .append('div')\n      .attr('class', 'vc-tooltip-display ' + this.opts.className)\n  }\n\n  hover (x, y, displayData, excludeToolTipDiv) {\n    this.showHide(true)\n    // This will be called by series -- bar / pie\n    const box = elementOffset(this.toolTipDiv)\n    const rootPos = elementOffset(this.opts.chart.container)\n    let xpos = Math.round(x - rootPos.left)\n    let ypos = Math.round(y - rootPos.top)\n\n    if (!excludeToolTipDiv) {\n      // Consider toolTip offset for position\n      xpos = Math.round(xpos - (box.width / 2))\n      ypos = Math.round(ypos - (box.height / 2))\n    }\n\n\n    this.toolTipDiv\n      .style('left', xpos + 'px')\n      .style('top', ypos + 'px')\n      .style('display', 'inline-block')\n      .html(this.opts.format.call(this.opts.chart, displayData.data)) // Used format.call(), so that external fun can have access of chart Instance\n  }\n\n  showHide (showFlag) {\n    showFlag = !!showFlag\n    this.toolTipDiv && this.toolTipDiv.classed('vc-hidden', !showFlag)\n  }\n\n  remove () {\n    this.$toolTipDiv && this.$toolTipDiv.remove()\n    this.opts = null\n  }\n}\n"],"sourceRoot":""}